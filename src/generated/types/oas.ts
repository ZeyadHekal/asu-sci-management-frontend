/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { Infer } from '@kubb/oas'

export const oas = {
  openapi: '3.0.0',
  paths: {
    '/user-types': {
      post: {
        description: 'Create a new user type',
        operationId: 'UserTypeController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateUserTypeDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'User type created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UserTypeDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create user type',
        tags: ['user-types'],
      },
      get: {
        description: 'Retrieve all user types',
        operationId: 'UserTypeController_findAll',
        parameters: [],
        responses: {
          '200': {
            description: 'User types retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/UserTypeDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all user types',
        tags: ['user-types'],
      },
    },
    '/user-types/for-staff-assignment': {
      get: {
        description: 'Retrieve user types suitable for staff assignment (excludes Student type)',
        operationId: 'UserTypeController_findAllForStaffAssignment',
        parameters: [],
        responses: {
          '200': {
            description: 'User types for staff assignment retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/UserTypeDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get user types for staff assignment',
        tags: ['user-types'],
      },
    },
    '/user-types/with-privileges': {
      get: {
        description: 'Retrieve all user types with their associated privileges, with search and pagination',
        operationId: 'UserTypeController_findAllWithPrivileges',
        parameters: [
          {
            name: 'search',
            required: true,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'page',
            required: true,
            in: 'query',
            schema: {
              type: 'number',
            },
          },
          {
            name: 'limit',
            required: true,
            in: 'query',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: 'User types with privileges retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UserTypePagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all user types with privileges',
        tags: ['user-types'],
      },
    },
    '/user-types/{id}': {
      get: {
        description: 'Retrieve a user type by its ID',
        operationId: 'UserTypeController_getById',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'User Type ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'User type retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UserTypeDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - User type does not exist',
          },
        },
        summary: 'Get user type by ID',
        tags: ['user-types'],
      },
      patch: {
        description: 'Update an existing user type by ID',
        operationId: 'UserTypeController_update',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'User Type ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateUserTypeDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'User type updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UserTypeDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - User type does not exist',
          },
        },
        summary: 'Update user type',
        tags: ['user-types'],
      },
    },
    '/user-types/{id}/privileges': {
      get: {
        description: 'Retrieve all privileges assigned to a specific user type',
        operationId: 'UserTypeController_getPrivileges',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'User Type ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Privileges retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/PrivilegeAssignmentDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - User type does not exist',
          },
        },
        summary: 'Get user type privileges',
        tags: ['user-types'],
      },
    },
    '/user-types/{ids}': {
      delete: {
        description: 'Delete one or multiple user types by IDs',
        operationId: 'UserTypeController_delete',
        parameters: [
          {
            name: 'ids',
            required: true,
            in: 'path',
            description: 'Comma-separated user type IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'User types deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Cannot delete non-deletable user types',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more user types do not exist',
          },
        },
        summary: 'Delete user types',
        tags: ['user-types'],
      },
    },
    '/users/doctors': {
      get: {
        description: 'Retrieve all users with TEACH_COURSE privilege',
        operationId: 'UserController_getAllDoctors',
        parameters: [],
        responses: {
          '200': {
            description: 'Doctors retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/DoctorDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all doctors',
        tags: ['users'],
      },
    },
    '/users/doctors/paginated': {
      get: {
        description: 'Retrieve doctors with pagination',
        operationId: 'UserController_getPaginatedDoctors',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated doctors retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DoctorPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated doctors',
        tags: ['users'],
      },
    },
    '/users/students': {
      post: {
        description: 'Create a new student user',
        operationId: 'UserController_createStudent',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'multipart/form-data': {
              schema: {
                $ref: '#/components/schemas/CreateStudentDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Student created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create student',
        tags: ['users'],
      },
      get: {
        description: 'Retrieve all student users',
        operationId: 'UserController_getAllStudents',
        parameters: [],
        responses: {
          '200': {
            description: 'Students retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all students',
        tags: ['users'],
      },
    },
    '/users/students/paginated': {
      get: {
        description: 'Retrieve students with pagination',
        operationId: 'UserController_getPaginatedStudents',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated students retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated students',
        tags: ['users'],
      },
    },
    '/users/students/{id}': {
      get: {
        description: 'Retrieve a student by their ID',
        operationId: 'UserController_getStudentById',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Student retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Student does not exist',
          },
        },
        summary: 'Get student by ID',
        tags: ['users'],
      },
      patch: {
        description: 'Update an existing student by ID',
        operationId: 'UserController_updateStudent',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateStudentDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Student updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Student does not exist',
          },
        },
        summary: 'Update student',
        tags: ['users'],
      },
      delete: {
        description: 'Delete an existing student by ID',
        operationId: 'UserController_deleteStudent',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '204': {
            description: 'Student deleted successfully',
          },
          '400': {
            description: 'Bad Request - User is not a student',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Student does not exist',
          },
        },
        summary: 'Delete student',
        tags: ['users'],
      },
    },
    '/users/staff/{userTypeId}': {
      post: {
        description: 'Create a new staff user with specific user type',
        operationId: 'UserController_createStaff',
        parameters: [
          {
            name: 'userTypeId',
            required: true,
            in: 'path',
            description: 'User Type ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateStaffDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Staff created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create staff',
        tags: ['users'],
      },
    },
    '/users/staff': {
      get: {
        description: 'Retrieve all staff users',
        operationId: 'UserController_getAllStaff',
        parameters: [],
        responses: {
          '200': {
            description: 'Staff retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StaffDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all staff',
        tags: ['users'],
      },
    },
    '/users/staff/paginated': {
      get: {
        description:
          'Retrieve staff with pagination, search, and filtering. Available search: name, username, title, department. Available filters: department (string), userType (string). Example: ?page=0&limit=10&search=john&department=Computer%20Science&userType=Doctor',
        operationId: 'UserController_getPaginatedStaff',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search by name, username, title, or department',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'department',
            required: false,
            in: 'query',
            description: 'Filter by department',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'userType',
            required: false,
            in: 'query',
            description: 'Filter by user type name',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated staff retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated staff',
        tags: ['users'],
      },
    },
    '/users/staff/{id}': {
      get: {
        description: 'Retrieve a staff member by their ID',
        operationId: 'UserController_getStaffById',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Staff ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Staff retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Staff does not exist',
          },
        },
        summary: 'Get staff by ID',
        tags: ['users'],
      },
      patch: {
        description: 'Update an existing staff member by ID. Username can be updated but must be unique. UserType can also be updated.',
        operationId: 'UserController_updateStaff',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Staff ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateStaffDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Staff updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data or username already in use',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Staff does not exist',
          },
        },
        summary: 'Update staff',
        tags: ['users'],
      },
      delete: {
        description: 'Delete an existing staff member by ID',
        operationId: 'UserController_deleteStaff',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Staff ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '204': {
            description: 'Staff deleted successfully',
          },
          '400': {
            description: 'Bad Request - User is not a staff member',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Staff does not exist',
          },
        },
        summary: 'Delete staff',
        tags: ['users'],
      },
    },
    '/users/{id}/privileges': {
      patch: {
        description:
          "Update a user's specific privileges by providing an array of privilege codes. This will replace all user-specific privileges (user type privileges remain unchanged).",
        operationId: 'UserController_updateUserPrivileges',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'User ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateUserPrivilegesDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'User privileges updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid privilege codes',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - User does not exist',
          },
        },
        summary: 'Update user privileges',
        tags: ['users'],
      },
    },
    '/users/assistants': {
      get: {
        description: 'Retrieve all users with LAB_ASSISTANT privilege',
        operationId: 'UserController_getAllAssistants',
        parameters: [],
        responses: {
          '200': {
            description: 'Lab assistants retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StaffDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all lab assistants',
        tags: ['users'],
      },
    },
    '/files/upload': {
      post: {
        operationId: 'FileController_uploadFile',
        parameters: [],
        responses: {
          '201': {
            description: 'File uploaded successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/FileResponseDto',
                },
              },
            },
          },
        },
        summary: 'Upload a file',
        tags: ['files'],
      },
    },
    '/files/{id}': {
      get: {
        operationId: 'FileController_getFileById',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: 'File metadata retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/FileResponseDto',
                },
              },
            },
          },
        },
        summary: 'Get file metadata by ID',
        tags: ['files'],
      },
      delete: {
        operationId: 'FileController_deleteFile',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: '',
          },
        },
        summary: 'Delete file by ID',
        tags: ['files'],
      },
    },
    '/files/{id}/download': {
      get: {
        operationId: 'FileController_downloadFile',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: '',
          },
        },
        summary: 'Download file by ID',
        tags: ['files'],
      },
    },
    '/files/{id}/url': {
      get: {
        operationId: 'FileController_getSignedUrl',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: '',
          },
        },
        summary: 'Get signed URL for file access',
        tags: ['files'],
      },
    },
    '/auth/login': {
      post: {
        description: 'Authenticate user with username and password',
        operationId: 'AuthController_login',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/LoginRequestDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'User successfully authenticated',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LoginSuccessDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized - Invalid credentials',
          },
        },
        security: [{}],
        summary: 'User login',
        tags: ['authentication'],
      },
    },
    '/auth/refresh': {
      post: {
        description: 'Get new access token using refresh token',
        operationId: 'AuthController_refreshToken',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/RefreshRequsetDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Token refreshed successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/AuthJwtDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized - Invalid or expired refresh token',
          },
        },
        security: [{}],
        summary: 'Refresh token',
        tags: ['authentication'],
      },
    },
    '/auth/privileges': {
      post: {
        description: 'Get updated user privileges',
        operationId: 'AuthController_refreshPrivilege',
        parameters: [],
        responses: {
          '201': {
            description: 'Privileges refreshed successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PrivilegRefreshDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
        },
        summary: 'Refresh privileges',
        tags: ['authentication'],
      },
    },
    '/auth/logout': {
      post: {
        description: 'Logout user and update session tracking',
        operationId: 'AuthController_logout',
        parameters: [],
        responses: {
          '200': {
            description: 'User logged out successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
        },
        summary: 'User logout',
        tags: ['authentication'],
      },
    },
    '/events': {
      post: {
        description: 'Create a new event',
        operationId: 'EventController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateEventDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Event created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create event',
        tags: ['events'],
      },
      get: {
        description: 'Retrieve all events',
        operationId: 'EventController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Events retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all events',
        tags: ['events'],
      },
    },
    '/events/paginated': {
      get: {
        description: 'Retrieve events with pagination',
        operationId: 'EventController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated events retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated events',
        tags: ['events'],
      },
    },
    '/events/course/{courseId}': {
      get: {
        description: 'Retrieve all events for a specific course',
        operationId: 'EventController_getCourseEvents',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Course events retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/EventListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course does not exist',
          },
        },
        summary: 'Get events for a specific course',
        tags: ['events'],
      },
    },
    '/events/course/{courseId}/export': {
      get: {
        description: 'Export events for a specific course as Excel file',
        operationId: 'EventController_exportCourseEvents',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Events exported successfully',
          },
        },
        summary: 'Export course events',
        tags: ['events'],
      },
    },
    '/events/student/exam-mode-status': {
      get: {
        operationId: 'EventController_getStudentExamModeStatus',
        parameters: [],
        responses: {
          '200': {
            description: 'Exam mode status retrieved',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ExamModeStatusDto',
                },
              },
            },
          },
        },
        summary: 'Get student exam mode status',
        tags: ['events'],
      },
    },
    '/events/student/schedule-ids': {
      get: {
        operationId: 'EventController_getStudentScheduleIds',
        parameters: [],
        responses: {
          '200': {
            description: 'Schedule IDs retrieved',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              },
            },
          },
        },
        summary: 'Get event schedule IDs for WebSocket listening',
        tags: ['events'],
      },
    },
    '/events/student/my-exams': {
      get: {
        operationId: 'EventController_getStudentExams',
        parameters: [],
        responses: {
          '200': {
            description: 'Student exams retrieved',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentExamDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get student exams',
        tags: ['events'],
      },
    },
    '/events/student/{scheduleId}/submit-files': {
      post: {
        operationId: 'EventController_submitFiles',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Files submitted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/FileSubmissionResponseDto',
                },
              },
            },
          },
        },
        summary: 'Submit files for exam',
        tags: ['events'],
      },
    },
    '/events/student/{scheduleId}/files': {
      get: {
        operationId: 'EventController_getStudentFiles',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Files retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentFileDto',
                  },
                },
              },
            },
          },
        },
        summary: "Get student's submitted files for an exam",
        tags: ['events'],
      },
    },
    '/events/student/{scheduleId}/files/{fileId}': {
      delete: {
        operationId: 'EventController_deleteStudentFile',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'fileId',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'File deleted successfully',
          },
        },
        summary: "Delete a student's submitted file for a specific exam schedule",
        tags: ['events'],
      },
    },
    '/events/{event_id}': {
      get: {
        description: 'Retrieve an event by its ID',
        operationId: 'EventController_getById',
        parameters: [
          {
            name: 'event_id',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Event retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Event does not exist',
          },
        },
        summary: 'Get event by ID',
        tags: ['events'],
      },
      patch: {
        description: 'Update an existing event by ID',
        operationId: 'EventController_update',
        parameters: [
          {
            name: 'event_id',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateEventDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Event updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Event does not exist',
          },
        },
        summary: 'Update event',
        tags: ['events'],
      },
    },
    '/events/{event_ids}': {
      delete: {
        description: 'Delete one or multiple events by IDs',
        operationId: 'EventController_delete',
        parameters: [
          {
            name: 'event_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated event IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Events deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more events do not exist',
          },
        },
        summary: 'Delete events',
        tags: ['events'],
      },
    },
    '/events/{id}/calculate-groups': {
      get: {
        operationId: 'EventController_calculateGroups',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Group calculation completed',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/GroupCalculationResultDto',
                },
              },
            },
          },
        },
        summary: 'Calculate optimal exam groups and lab requirements',
        tags: ['events'],
      },
    },
    '/events/{id}/create-groups': {
      post: {
        operationId: 'EventController_createGroups',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateExamGroupsDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Exam groups and schedules created successfully',
          },
        },
        summary: 'Create exam groups and schedules',
        tags: ['events'],
      },
    },
    '/events/{scheduleId}/start': {
      post: {
        operationId: 'EventController_startExam',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam started successfully',
          },
        },
        summary: 'Start exam manually',
        tags: ['events'],
      },
    },
    '/events/{scheduleId}/end': {
      post: {
        operationId: 'EventController_endExam',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam ended successfully',
          },
        },
        summary: 'End exam manually',
        tags: ['events'],
      },
    },
    '/events/{scheduleId}/download-submissions': {
      get: {
        operationId: 'EventController_downloadSubmissions',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Compressed archive file with all submissions',
          },
        },
        summary: 'Download all student submissions as compressed archive (RAR or tar.gz)',
        tags: ['events'],
      },
    },
    '/events/{scheduleId}/upload-marks': {
      post: {
        operationId: 'EventController_uploadMarks',
        parameters: [
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Marks uploaded successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MarkUploadResponseDto',
                },
              },
            },
          },
        },
        summary: 'Upload marks from Excel file',
        tags: ['events'],
      },
    },
    '/events/{courseId}/simulate-groups': {
      post: {
        operationId: 'EventController_simulateGroupCreation',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Group simulation data',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/GroupCreationSimulationDto',
                },
              },
            },
          },
        },
        summary: 'Simulate group creation for event scheduling',
        tags: ['events'],
      },
    },
    '/events/{courseId}/simulate-groups/add-group': {
      post: {
        operationId: 'EventController_addGroupToSimulation',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/AddGroupToSimulationDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Group added to simulation',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/GroupCreationSimulationDto',
                },
              },
            },
          },
        },
        summary: 'Add a group to the simulation by selecting a lab',
        tags: ['events'],
      },
    },
    '/events/{courseId}/simulate-groups/remove-group': {
      post: {
        operationId: 'EventController_removeGroupFromSimulation',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/RemoveGroupFromSimulationDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Group removed from simulation',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/GroupCreationSimulationDto',
                },
              },
            },
          },
        },
        summary: 'Remove a group from the simulation',
        tags: ['events'],
      },
    },
    '/events/create-with-groups': {
      post: {
        operationId: 'EventController_createEventWithGroups',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateEventWithGroupsDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Event created with groups',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/Event',
                },
              },
            },
          },
        },
        summary: 'Create event with complex group scheduling and exam models',
        tags: ['events'],
      },
    },
    '/events/upload-exam-model-files': {
      post: {
        operationId: 'EventController_uploadExamModelFiles',
        parameters: [],
        responses: {
          '200': {
            description: 'Files uploaded successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UploadExamModelFilesResponseDto',
                },
              },
            },
          },
        },
        summary: 'Upload exam model files and get file IDs',
        tags: ['events'],
      },
    },
    '/events/move-student-groups': {
      post: {
        operationId: 'EventController_moveStudentBetweenGroups',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/MoveStudentBetweenGroupsDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Student moved successfully',
          },
        },
        summary: 'Move student between groups',
        tags: ['events'],
      },
    },
    '/events/{courseId}/student-grades': {
      get: {
        operationId: 'EventController_getStudentGradesSummary',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Student grades summary',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentGradesSummaryDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get student grades summary for a course',
        tags: ['events'],
      },
    },
    '/events/my-grades/{studentId}': {
      get: {
        operationId: 'EventController_getMyGrades',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'My grades summary',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentGradesSummaryDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get my grades (for student dashboard)',
        tags: ['events'],
      },
    },
    '/course-groups': {
      post: {
        operationId: 'CourseGroupController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateCourseGroupDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Course group created successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseGroupDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request.',
          },
        },
        summary: 'Create a new course-group',
        tags: ['course-groups'],
      },
      get: {
        operationId: 'CourseGroupController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'courseId',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return all course groups.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseGroupPagedDto',
                },
              },
            },
          },
        },
        summary: 'Get all course-groups',
        tags: ['course-groups'],
      },
    },
    '/course-groups/schedule-table': {
      get: {
        description: 'Get course groups with scheduling information for table display',
        operationId: 'CourseGroupController_getScheduleTable',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'courseId',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'weekDay',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return course group schedule table.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseGroupScheduleTablePagedDto',
                },
              },
            },
          },
        },
        summary: 'Get course group schedule table',
        tags: ['course-groups'],
      },
    },
    '/course-groups/schedules': {
      post: {
        description: 'Create a new schedule for a course group',
        operationId: 'CourseGroupController_createSchedule',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateCourseGroupScheduleDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Schedule created successfully.',
          },
          '400': {
            description: 'Bad Request.',
          },
        },
        summary: 'Create course group schedule',
        tags: ['course-groups'],
      },
    },
    '/course-groups/schedules/{courseGroupId}/{assistantId}': {
      patch: {
        description: 'Update a course group schedule',
        operationId: 'CourseGroupController_updateSchedule',
        parameters: [
          {
            name: 'courseGroupId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateCourseGroupScheduleDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Schedule updated successfully.',
          },
          '404': {
            description: 'Schedule not found.',
          },
        },
        summary: 'Update course group schedule',
        tags: ['course-groups'],
      },
      delete: {
        description: 'Delete a course group schedule',
        operationId: 'CourseGroupController_deleteSchedule',
        parameters: [
          {
            name: 'courseGroupId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Schedule deleted successfully.',
          },
          '404': {
            description: 'Schedule not found.',
          },
        },
        summary: 'Delete course group schedule',
        tags: ['course-groups'],
      },
    },
    '/course-groups/{id}': {
      get: {
        operationId: 'CourseGroupController_getById',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return the course group.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseGroupDto',
                },
              },
            },
          },
          '404': {
            description: 'Course group not found.',
          },
        },
        summary: 'Get a course-group by ID',
        tags: ['course-groups'],
      },
      patch: {
        operationId: 'CourseGroupController_update',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateCourseGroupDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Course group updated successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseGroupDto',
                },
              },
            },
          },
          '404': {
            description: 'Course group not found.',
          },
        },
        summary: 'Update a course-group',
        tags: ['course-groups'],
      },
      delete: {
        description:
          'Delete a course group. All students enrolled in this group will be automatically moved to the default group of the same course. Default groups cannot be deleted.',
        operationId: 'CourseGroupController_delete',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Course group deleted successfully and all students moved to default group.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '400': {
            description: 'Cannot delete default groups.',
          },
          '404': {
            description: 'Course group not found.',
          },
        },
        summary: 'Delete a course-group',
        tags: ['course-groups'],
      },
    },
    '/course-groups/course/{courseId}/default-group-students': {
      get: {
        description: 'Get the count of students assigned to the default group of a course',
        operationId: 'CourseGroupController_getStudentsInDefaultGroup',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return the number of students in default group.',
          },
        },
        summary: 'Get number of students in default group',
        tags: ['course-groups'],
      },
    },
    '/course-groups/assistant/{assistantId}/course/{courseId}': {
      get: {
        description: 'Get all groups where the assistant teaches in a specific course',
        operationId: 'CourseGroupController_getAssistantGroups',
        parameters: [
          {
            name: 'assistantId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return assistant assigned groups.',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/CourseGroupScheduleTableDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get groups assigned to an assistant for a specific course',
        tags: ['course-groups'],
      },
    },
    '/course-groups/lab/{labId}/course/{courseId}/available-devices': {
      get: {
        description: 'Get the number of available devices in a lab that meet the course software requirements',
        operationId: 'CourseGroupController_getAvailableDevicesForLab',
        parameters: [
          {
            name: 'labId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return available devices information.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabCapacityDto',
                },
              },
            },
          },
        },
        summary: 'Get available devices for a lab and course',
        tags: ['course-groups'],
      },
    },
    '/course-groups/lab/{labId}/course/{courseId}/capacity': {
      get: {
        description: 'Calculate how many students can be accommodated in a lab for a specific course based on software requirements',
        operationId: 'CourseGroupController_calculateLabCapacityForCourse',
        parameters: [
          {
            name: 'labId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return lab capacity for the course.',
          },
        },
        summary: 'Calculate lab capacity for a course',
        tags: ['course-groups'],
      },
    },
    '/course-groups/{id}/reorder': {
      patch: {
        operationId: 'CourseGroupController_reorderGroups',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          description: 'Array of group IDs in the desired order',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  groupIds: {
                    type: 'array',
                    items: {
                      type: 'string',
                      format: 'uuid',
                    },
                    description: 'Array of group IDs in desired order (default groups will be moved to end automatically)',
                  },
                },
                required: ['groupIds'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Groups reordered successfully',
          },
        },
        summary: 'Reorder course groups',
        tags: ['course-groups'],
      },
    },
    '/course-groups/{groupId}/details': {
      get: {
        operationId: 'CourseGroupController_getGroupDetails',
        parameters: [
          {
            name: 'groupId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Group details retrieved successfully',
          },
        },
        summary: 'Get group details with students',
        tags: ['course-groups'],
      },
    },
    '/course-groups/{groupId}/available-groups-for-move/{studentId}': {
      get: {
        operationId: 'CourseGroupController_getAvailableGroupsForMove',
        parameters: [
          {
            name: 'groupId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Available groups retrieved successfully',
          },
        },
        summary: 'Get available groups for moving a student',
        tags: ['course-groups'],
      },
    },
    '/course-groups/move-student': {
      post: {
        operationId: 'CourseGroupController_moveStudentBetweenGroups',
        parameters: [],
        responses: {
          '200': {
            description: 'Student moved successfully',
          },
        },
        summary: 'Move student between groups',
        tags: ['course-groups'],
      },
    },
    '/exam-models/upload': {
      post: {
        operationId: 'ExamModelController_uploadExamModels',
        parameters: [],
        requestBody: {
          required: true,
          description: 'Upload exam model files',
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  name: {
                    type: 'string',
                    description: 'Name of the exam model',
                  },
                  description: {
                    type: 'string',
                    description: 'Description of the exam model',
                  },
                  eventId: {
                    type: 'string',
                    description: 'Event ID',
                  },
                  files: {
                    type: 'array',
                    items: {
                      type: 'string',
                      format: 'binary',
                    },
                    description: 'Exam model files',
                  },
                },
                required: ['name', 'eventId', 'files'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Exam models uploaded successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/ExamModelDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Upload exam models for an event',
        tags: ['exam-models'],
      },
    },
    '/exam-models/event/{eventId}': {
      get: {
        operationId: 'ExamModelController_getExamModelsForEvent',
        parameters: [
          {
            name: 'eventId',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam models retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/ExamModelDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get all exam models for an event',
        tags: ['exam-models'],
      },
    },
    '/exam-models/{modelId}/files': {
      get: {
        operationId: 'ExamModelController_getExamModelFiles',
        parameters: [
          {
            name: 'modelId',
            required: true,
            in: 'path',
            description: 'Exam Model ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam model files retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      fileName: {
                        type: 'string',
                      },
                      downloadUrl: {
                        type: 'string',
                      },
                      fileSize: {
                        type: 'number',
                      },
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Get all files for an exam model with presigned URLs',
        tags: ['exam-models'],
      },
    },
    '/exam-models/{modelId}/file/{fileId}/download': {
      get: {
        operationId: 'ExamModelController_downloadExamModelFile',
        parameters: [
          {
            name: 'modelId',
            required: true,
            in: 'path',
            description: 'Exam Model ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'fileId',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Presigned URL generated successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    downloadUrl: {
                      type: 'string',
                    },
                    fileName: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Get presigned URL for specific exam model file',
        tags: ['exam-models'],
      },
    },
    '/exam-models/student/{studentId}/schedule/{scheduleId}': {
      get: {
        operationId: 'ExamModelController_getStudentAssignedExamModel',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'scheduleId',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Student assigned exam model retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    examModel: {
                      $ref: '#/components/schemas/ExamModelDto',
                    },
                    files: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          fileName: {
                            type: 'string',
                          },
                          downloadUrl: {
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Get student assigned exam model with files',
        tags: ['exam-models'],
      },
    },
    '/exam-models/assign': {
      post: {
        operationId: 'ExamModelController_assignExamModelsToStudents',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/AssignExamModelsRequest',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Exam models assigned successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                    },
                    message: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Assign exam models to students',
        tags: ['exam-models'],
      },
    },
    '/exam-models/{modelId}': {
      delete: {
        operationId: 'ExamModelController_deleteExamModel',
        parameters: [
          {
            name: 'modelId',
            required: true,
            in: 'path',
            description: 'Exam Model ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam model deleted successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                    },
                    message: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Delete an exam model',
        tags: ['exam-models'],
      },
    },
    '/exam-models/assign/{eventId}/student/{studentId}': {
      post: {
        operationId: 'ExamModelController_assignRandomExamModel',
        parameters: [
          {
            name: 'eventId',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'studentId',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam model assigned successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ExamModelDto',
                },
              },
            },
          },
        },
        summary: 'Assign a random exam model to a student',
        tags: ['exam-models'],
      },
    },
    '/student-files/upload/{studentId}/{courseId}/{eventId}': {
      post: {
        operationId: 'StudentFilesController_uploadExamFile',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'eventId',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '201': {
            description: 'File uploaded successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentsFiles',
                },
              },
            },
          },
        },
        summary: 'Upload a file for student exam submission',
        tags: ['student-files'],
      },
    },
    '/student-files/{studentId}/{eventId}': {
      get: {
        operationId: 'StudentFilesController_getStudentExamFiles',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            description: 'Student ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'eventId',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Files retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentsFiles',
                  },
                },
              },
            },
          },
        },
        summary: 'Get all files submitted by a student for an exam',
        tags: ['student-files'],
      },
    },
    '/student-files/{fileId}': {
      delete: {
        operationId: 'StudentFilesController_deleteStudentFile',
        parameters: [
          {
            name: 'fileId',
            required: true,
            in: 'path',
            description: 'File ID',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: 'File deleted successfully',
          },
        },
        summary: "Delete a student's submitted file",
        tags: ['student-files'],
      },
    },
    '/device-login-history': {
      post: {
        description: 'Create a new device login history record',
        operationId: 'DeviceLoginHistoryController_createLoginRecord',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateLoginHistoryDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Login history record created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LoginHistoryDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid input data',
          },
          '404': {
            description: 'Not Found - Device or User does not exist',
          },
        },
        summary: 'Create login history record',
        tags: ['device-login-history'],
      },
    },
    '/device-login-history/device/{deviceId}': {
      get: {
        description: 'Retrieve login history for a specific device',
        operationId: 'DeviceLoginHistoryController_getDeviceLoginHistory',
        parameters: [
          {
            name: 'deviceId',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'userId',
            required: false,
            in: 'query',
            description: 'Filter by user ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'ipAddress',
            required: false,
            in: 'query',
            description: 'Filter by IP address',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'loginStatus',
            required: false,
            in: 'query',
            description: 'Filter by login status',
            schema: {
              enum: ['SUCCESS', 'FAILED', 'LOGOUT'],
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device login history retrieved successfully',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device login history',
        tags: ['device-login-history'],
      },
    },
    '/device-login-history/device/{deviceId}/stats': {
      get: {
        description: 'Get login statistics for a specific device',
        operationId: 'DeviceLoginHistoryController_getDeviceLoginStats',
        parameters: [
          {
            name: 'deviceId',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'days',
            required: true,
            in: 'query',
            schema: {
              type: 'number',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device login statistics retrieved successfully',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device login statistics',
        tags: ['device-login-history'],
      },
    },
    '/privileges': {
      get: {
        operationId: 'PrivilegeController_getAllPrivileges',
        parameters: [],
        responses: {
          '200': {
            description: '',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get all privileges',
        tags: ['privileges'],
      },
    },
    '/privileges/assign/user': {
      post: {
        description: 'Assign a specific privilege to a user',
        operationId: 'PrivilegeController_assignPrivilegeToUser',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UserAssignPrivilegeDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: '',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Assign privilege to user',
        tags: ['privileges'],
      },
    },
    '/privileges/assign/usertype': {
      post: {
        description: 'Assign a specific privilege to a user type',
        operationId: 'PrivilegeController_assignPrivilegeToUserType',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UserTypeAssignPrivilegeDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: '',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Assign privilege to user type',
        tags: ['privileges'],
      },
    },
    '/privileges/unassign/user': {
      post: {
        description: 'Remove a specific privilege from a user',
        operationId: 'PrivilegeController_unassignPrivilegeFromUser',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UserAssignPrivilegeDto',
              },
            },
          },
        },
        responses: {
          default: {
            description: '',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Unassign privilege from user',
        tags: ['privileges'],
      },
    },
    '/privileges/unassign/usertype': {
      post: {
        description: 'Remove a specific privilege from a user type',
        operationId: 'PrivilegeController_unassignPrivilegeFromUserType',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UserTypeAssignPrivilegeDto',
              },
            },
          },
        },
        responses: {
          default: {
            description: '',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Unassign privilege from user type',
        tags: ['privileges'],
      },
    },
    '/privileges/user/{userId}/{privilegeCode}': {
      delete: {
        description: 'Remove a specific privilege from a user',
        operationId: 'PrivilegeController_unassignPrivilegeFromUserById',
        parameters: [
          {
            name: 'userId',
            required: true,
            in: 'path',
            description: 'User ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'privilegeCode',
            required: true,
            in: 'path',
            description: 'Privilege code to unassign',
            schema: {
              enum: [
                'MANAGE_SYSTEM',
                'MANAGE_STUDENTS',
                'MANAGE_LABS',
                'LAB_ASSISTANT',
                'STUDY_COURSE',
                'TEACH_COURSE',
                'ASSIST_IN_COURSE',
                'LAB_MAINTENANCE',
                'REPORT_DEVICE',
                'MANAGE_COURSES',
              ],
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Unassign privilege from user',
        tags: ['privileges'],
      },
    },
    '/privileges/user-type/{userTypeId}/{privilegeCode}': {
      delete: {
        description: 'Remove a specific privilege from a user type',
        operationId: 'PrivilegeController_unassignPrivilegeFromUserTypeById',
        parameters: [
          {
            name: 'userTypeId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'privilegeCode',
            required: true,
            in: 'path',
            schema: {
              enum: [
                'MANAGE_SYSTEM',
                'MANAGE_STUDENTS',
                'MANAGE_LABS',
                'LAB_ASSISTANT',
                'STUDY_COURSE',
                'TEACH_COURSE',
                'ASSIST_IN_COURSE',
                'LAB_MAINTENANCE',
                'REPORT_DEVICE',
                'MANAGE_COURSES',
              ],
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Unassign privilege from user type',
        tags: ['privileges'],
      },
    },
    '/privileges/users/{privilegeCode}': {
      get: {
        operationId: 'PrivilegeController_getUsersByPrivilege',
        parameters: [
          {
            name: 'privilegeCode',
            required: true,
            in: 'path',
            schema: {
              enum: [
                'MANAGE_SYSTEM',
                'MANAGE_STUDENTS',
                'MANAGE_LABS',
                'LAB_ASSISTANT',
                'STUDY_COURSE',
                'TEACH_COURSE',
                'ASSIST_IN_COURSE',
                'LAB_MAINTENANCE',
                'REPORT_DEVICE',
                'MANAGE_COURSES',
              ],
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get users with a specific privilege',
        tags: ['privileges'],
      },
    },
    '/labs': {
      post: {
        description: 'Create a new lab',
        operationId: 'LabController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateLabDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Lab created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create lab',
        tags: ['labs'],
      },
      get: {
        description: 'Retrieve all labs',
        operationId: 'LabController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Labs retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all labs',
        tags: ['labs'],
      },
    },
    '/labs/paginated': {
      get: {
        description: 'Retrieve labs with pagination',
        operationId: 'LabController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated labs retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated labs',
        tags: ['labs'],
      },
    },
    '/labs/{lab_id}': {
      get: {
        description: 'Retrieve a lab by its ID',
        operationId: 'LabController_getById',
        parameters: [
          {
            name: 'lab_id',
            required: true,
            in: 'path',
            description: 'Lab ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Lab retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Lab does not exist',
          },
        },
        summary: 'Get lab by ID',
        tags: ['labs'],
      },
      patch: {
        description: 'Update an existing lab by ID',
        operationId: 'LabController_update',
        parameters: [
          {
            name: 'lab_id',
            required: true,
            in: 'path',
            description: 'Lab ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateLabDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Lab updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Lab does not exist',
          },
        },
        summary: 'Update lab',
        tags: ['labs'],
      },
    },
    '/labs/{lab_ids}': {
      delete: {
        description: 'Delete one or multiple labs by IDs',
        operationId: 'LabController_delete',
        parameters: [
          {
            name: 'lab_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated lab IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Labs deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more labs do not exist',
          },
        },
        summary: 'Delete labs',
        tags: ['labs'],
      },
    },
    '/event-groups/event/{eventId}': {
      get: {
        operationId: 'EventGroupController_getEventGroups',
        parameters: [
          {
            name: 'eventId',
            required: true,
            in: 'path',
            description: 'Event ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Event groups retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/EventGroupDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get all event groups for a specific event',
        tags: ['event-groups'],
      },
    },
    '/event-groups/{groupId}/students': {
      get: {
        operationId: 'EventGroupController_getEventGroupStudents',
        parameters: [
          {
            name: 'groupId',
            required: true,
            in: 'path',
            description: 'Event Group ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Event group students retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/EventGroupStudentDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get students in a specific event group',
        tags: ['event-groups'],
      },
    },
    '/event-groups/move-student': {
      post: {
        operationId: 'EventGroupController_moveStudentBetweenGroups',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/MoveStudentBetweenGroupsDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Student moved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                    },
                    message: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Move student between event groups',
        tags: ['event-groups'],
      },
    },
    '/event-groups/{groupId}/start-exam': {
      post: {
        operationId: 'EventGroupController_startExamForGroup',
        parameters: [
          {
            name: 'groupId',
            required: true,
            in: 'path',
            description: 'Event Group ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Exam started successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                    },
                    message: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Start exam for a specific group (manual start)',
        tags: ['event-groups'],
      },
    },
    '/event-groups/{groupId}/auto-start': {
      patch: {
        operationId: 'EventGroupController_updateAutoStart',
        parameters: [
          {
            name: 'groupId',
            required: true,
            in: 'path',
            description: 'Event Group ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Auto-start setting updated successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: {
                      type: 'boolean',
                    },
                    message: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
        summary: 'Update autoStart setting for a group',
        tags: ['event-groups'],
      },
    },
    '/courses': {
      post: {
        description: 'Create a new course',
        operationId: 'CourseController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateCourseDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Course created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseDetailDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create course',
        tags: ['courses'],
      },
      get: {
        description: 'Retrieve all courses',
        operationId: 'CourseController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Courses retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all courses',
        tags: ['courses'],
      },
    },
    '/courses/my-courses': {
      get: {
        description: 'Retrieve courses where the current user is one of the doctors',
        operationId: 'CourseController_getMyCourses',
        parameters: [],
        responses: {
          '200': {
            description: 'My courses retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/CourseListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get my courses',
        tags: ['courses'],
      },
    },
    '/courses/statistics': {
      get: {
        description: 'Retrieve course statistics and counts',
        operationId: 'CourseController_getStatistics',
        parameters: [],
        responses: {
          '200': {
            description: 'Course statistics retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get course statistics',
        tags: ['courses'],
      },
    },
    '/courses/validate-data': {
      get: {
        description: 'Validate course data integrity and identify inconsistencies',
        operationId: 'CourseController_validateCourseData',
        parameters: [],
        responses: {
          '200': {
            description: 'Course data validation completed successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Validate course data',
        tags: ['courses'],
      },
    },
    '/courses/paginated': {
      get: {
        description: 'Retrieve courses with pagination',
        operationId: 'CourseController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'courseType',
            required: false,
            in: 'query',
            description: 'Filter by course type',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'subjectCode',
            required: false,
            in: 'query',
            description: 'Filter by subject code',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search by course name or code',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated courses retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CoursePagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated courses',
        tags: ['courses'],
      },
    },
    '/courses/{course_id}': {
      get: {
        description: 'Retrieve a course by its ID',
        operationId: 'CourseController_getById',
        parameters: [
          {
            name: 'course_id',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Course retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseDetailDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course does not exist',
          },
        },
        summary: 'Get course by ID',
        tags: ['courses'],
      },
      patch: {
        description: 'Update an existing course by ID',
        operationId: 'CourseController_update',
        parameters: [
          {
            name: 'course_id',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateCourseDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Course updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseDetailDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course does not exist',
          },
        },
        summary: 'Update course',
        tags: ['courses'],
      },
    },
    '/courses/{course_ids}': {
      delete: {
        description: 'Delete one or multiple courses by IDs',
        operationId: 'CourseController_delete',
        parameters: [
          {
            name: 'course_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated course IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Courses deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more courses do not exist',
          },
        },
        summary: 'Delete courses',
        tags: ['courses'],
      },
    },
    '/event-schedules': {
      post: {
        description: 'Create a new event schedule',
        operationId: 'EventScheduleController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateEventScheduleDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Event schedule created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventScheduleDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create event schedule',
        tags: ['event-schedules'],
      },
      get: {
        description: 'Retrieve all event schedules',
        operationId: 'EventScheduleController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Event schedules retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventScheduleListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all event schedules',
        tags: ['event-schedules'],
      },
    },
    '/event-schedules/paginated': {
      get: {
        description: 'Retrieve event schedules with pagination',
        operationId: 'EventScheduleController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated event schedules retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventSchedulePagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated event schedules',
        tags: ['event-schedules'],
      },
    },
    '/event-schedules/{event_schedule_id}': {
      get: {
        description: 'Retrieve an event schedule by its ID',
        operationId: 'EventScheduleController_getById',
        parameters: [
          {
            name: 'event_schedule_id',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Event schedule retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventScheduleDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Event schedule does not exist',
          },
        },
        summary: 'Get event schedule by ID',
        tags: ['event-schedules'],
      },
      patch: {
        description: 'Update an existing event schedule by ID',
        operationId: 'EventScheduleController_update',
        parameters: [
          {
            name: 'event_schedule_id',
            required: true,
            in: 'path',
            description: 'Event Schedule ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateEventScheduleDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Event schedule updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/EventScheduleDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Event schedule does not exist',
          },
        },
        summary: 'Update event schedule',
        tags: ['event-schedules'],
      },
    },
    '/event-schedules/{event_schedule_ids}': {
      delete: {
        description: 'Delete one or multiple event schedules by IDs',
        operationId: 'EventScheduleController_delete',
        parameters: [
          {
            name: 'event_schedule_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated event schedule IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Event schedules deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more event schedules do not exist',
          },
        },
        summary: 'Delete event schedules',
        tags: ['event-schedules'],
      },
    },
    '/softwares': {
      post: {
        description: 'Create a new software',
        operationId: 'SoftwareController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateSoftwareDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Software created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/SoftwareDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create software',
        tags: ['softwares'],
      },
      get: {
        description: 'Retrieve all software',
        operationId: 'SoftwareController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Software list retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/SoftwareListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all software',
        tags: ['softwares'],
      },
    },
    '/softwares/paginated': {
      get: {
        description: 'Retrieve software with pagination',
        operationId: 'SoftwareController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated software list retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/SoftwarePagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated software',
        tags: ['softwares'],
      },
    },
    '/softwares/{software_id}': {
      get: {
        description: 'Retrieve a software by its ID',
        operationId: 'SoftwareController_getById',
        parameters: [
          {
            name: 'software_id',
            required: true,
            in: 'path',
            description: 'Software ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Software retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/SoftwareDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Software does not exist',
          },
        },
        summary: 'Get software by ID',
        tags: ['softwares'],
      },
      patch: {
        description: 'Update an existing software by ID',
        operationId: 'SoftwareController_update',
        parameters: [
          {
            name: 'software_id',
            required: true,
            in: 'path',
            description: 'Software ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateSoftwareDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Software updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/SoftwareDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Software does not exist',
          },
        },
        summary: 'Update software',
        tags: ['softwares'],
      },
    },
    '/softwares/{software_ids}': {
      delete: {
        description: 'Delete one or multiple software by IDs',
        operationId: 'SoftwareController_delete',
        parameters: [
          {
            name: 'software_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated software IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Software deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more software do not exist',
          },
        },
        summary: 'Delete software',
        tags: ['softwares'],
      },
    },
    '/devices': {
      post: {
        description: 'Create a new device',
        operationId: 'DeviceController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateDeviceDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Device created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create device',
        tags: ['devices'],
      },
      get: {
        description: 'Retrieve all devices',
        operationId: 'DeviceController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Devices retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all devices',
        tags: ['devices'],
      },
    },
    '/devices/my-assigned': {
      get: {
        description: 'Get devices assigned to current lab assistant',
        operationId: 'DeviceController_getMyAssignedDevices',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceName',
            required: false,
            in: 'query',
            description: 'Filter by device name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'software',
            required: false,
            in: 'query',
            description: 'Filter by software name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by device status',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: false,
            in: 'query',
            description: 'Filter by lab assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specCategory',
            required: false,
            in: 'query',
            description: 'Filter by specification category',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specValue',
            required: false,
            in: 'query',
            description: 'Filter by specification value',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'My assigned devices retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get my assigned devices',
        tags: ['devices'],
      },
    },
    '/devices/paginated': {
      get: {
        description: 'Retrieve devices with pagination',
        operationId: 'DeviceController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceName',
            required: false,
            in: 'query',
            description: 'Filter by device name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'software',
            required: false,
            in: 'query',
            description: 'Filter by software name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by device status',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: false,
            in: 'query',
            description: 'Filter by lab assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specCategory',
            required: false,
            in: 'query',
            description: 'Filter by specification category',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specValue',
            required: false,
            in: 'query',
            description: 'Filter by specification value',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated devices retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DevicePagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated devices',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}': {
      get: {
        description: 'Retrieve a device by its ID',
        operationId: 'DeviceController_getById',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device by ID',
        tags: ['devices'],
      },
      patch: {
        description: 'Update an existing device by ID',
        operationId: 'DeviceController_update',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateDeviceDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Device updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Update device',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/details': {
      get: {
        description: 'Retrieve comprehensive device information including lab, assistant, specifications, software, and statistics',
        operationId: 'DeviceController_getDeviceDetails',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device details retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDetailsDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get comprehensive device details',
        tags: ['devices'],
      },
    },
    '/devices/{device_ids}': {
      delete: {
        description: 'Delete one or multiple devices by IDs',
        operationId: 'DeviceController_delete',
        parameters: [
          {
            name: 'device_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated device IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Devices deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more devices do not exist',
          },
        },
        summary: 'Delete devices',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/softwares': {
      get: {
        description: 'Retrieve all software installed on a specific device',
        operationId: 'DeviceController_getSoftwares',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceName',
            required: false,
            in: 'query',
            description: 'Filter by device name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'software',
            required: false,
            in: 'query',
            description: 'Filter by software name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by device status',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: false,
            in: 'query',
            description: 'Filter by lab assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specCategory',
            required: false,
            in: 'query',
            description: 'Filter by specification category',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specValue',
            required: false,
            in: 'query',
            description: 'Filter by specification value',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device softwares retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/DeviceSoftwarePagedDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device softwares',
        tags: ['devices'],
      },
      post: {
        description: 'Add a new software to a specific device',
        operationId: 'DeviceController_addSoftware',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/AddDeviceSoftwareDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Software added successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Add software to device',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/reports': {
      get: {
        description: 'Retrieve all reports for a specific device',
        operationId: 'DeviceController_getDeviceReports',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceName',
            required: false,
            in: 'query',
            description: 'Filter by device name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'software',
            required: false,
            in: 'query',
            description: 'Filter by software name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by device status',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: false,
            in: 'query',
            description: 'Filter by lab assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specCategory',
            required: false,
            in: 'query',
            description: 'Filter by specification category',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specValue',
            required: false,
            in: 'query',
            description: 'Filter by specification value',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device reports retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device reports',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/maintenance-history': {
      get: {
        description: 'Retrieve maintenance history for a specific device',
        operationId: 'DeviceController_getDeviceMaintenanceHistory',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceName',
            required: false,
            in: 'query',
            description: 'Filter by device name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'software',
            required: false,
            in: 'query',
            description: 'Filter by software name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by device status',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: false,
            in: 'query',
            description: 'Filter by lab assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specCategory',
            required: false,
            in: 'query',
            description: 'Filter by specification category',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specValue',
            required: false,
            in: 'query',
            description: 'Filter by specification value',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device maintenance history retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device maintenance history',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/login-history': {
      get: {
        description: 'Retrieve login history for a specific device based on IP address',
        operationId: 'DeviceController_getDeviceLoginHistory',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceName',
            required: false,
            in: 'query',
            description: 'Filter by device name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'software',
            required: false,
            in: 'query',
            description: 'Filter by software name',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by device status',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'assistantId',
            required: false,
            in: 'query',
            description: 'Filter by lab assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specCategory',
            required: false,
            in: 'query',
            description: 'Filter by specification category',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'specValue',
            required: false,
            in: 'query',
            description: 'Filter by specification value',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device login history retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Get device login history',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/softwares/{softwareId}': {
      patch: {
        description: 'Update an existing software on a specific device',
        operationId: 'DeviceController_updateSoftware',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'softwareId',
            required: true,
            in: 'path',
            description: 'Software ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateDeviceSoftwareDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Software updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device or software does not exist',
          },
        },
        summary: 'Update software on device',
        tags: ['devices'],
      },
      delete: {
        description: 'Remove an existing software from a specific device',
        operationId: 'DeviceController_removeSoftware',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'softwareId',
            required: true,
            in: 'path',
            description: 'Software ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Software removed successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device or software does not exist',
          },
        },
        summary: 'Remove software from device',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/software-list': {
      put: {
        description: 'Update the list of software on a specific device',
        operationId: 'DeviceController_updateSoftwareList',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateDeviceSoftwareListDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Software list updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Update software list on device',
        tags: ['devices'],
      },
    },
    '/devices/{device_id}/maintenance': {
      post: {
        description: 'Create a maintenance update for a device',
        operationId: 'DeviceController_createMaintenanceUpdate',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/MaintenanceUpdateDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Maintenance update created successfully',
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device does not exist',
          },
        },
        summary: 'Create maintenance update',
        tags: ['devices'],
      },
    },
    '/device-maintenance-history': {
      post: {
        description: 'Create a new maintenance history record',
        operationId: 'MaintenanceHistoryController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateMaintenanceHistoryDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Maintenance history created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MaintenanceHistoryDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid input data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create maintenance history',
        tags: ['device-maintenance-history'],
      },
      get: {
        description: 'Retrieve all maintenance history records',
        operationId: 'MaintenanceHistoryController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Maintenance history retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/MaintenanceHistoryListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all maintenance history',
        tags: ['device-maintenance-history'],
      },
    },
    '/device-maintenance-history/paginated': {
      get: {
        description: 'Retrieve maintenance history with pagination',
        operationId: 'MaintenanceHistoryController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FAILED'],
              type: 'string',
            },
          },
          {
            name: 'maintenanceType',
            required: false,
            in: 'query',
            description: 'Filter by maintenance type',
            schema: {
              enum: ['HARDWARE_REPAIR', 'SOFTWARE_UPDATE', 'CLEANING', 'REPLACEMENT', 'INSPECTION', 'CALIBRATION', 'OTHER', 'USER_REPORT'],
              type: 'string',
            },
          },
          {
            name: 'relatedReportId',
            required: false,
            in: 'query',
            description: 'Filter by related report ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and personnel names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated maintenance history retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated maintenance history',
        tags: ['device-maintenance-history'],
      },
    },
    '/device-maintenance-history/export/xlsx': {
      get: {
        description: 'Export filtered maintenance history as Excel file',
        operationId: 'MaintenanceHistoryController_exportMaintenanceXlsx',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FAILED'],
              type: 'string',
            },
          },
          {
            name: 'maintenanceType',
            required: false,
            in: 'query',
            description: 'Filter by maintenance type',
            schema: {
              enum: ['HARDWARE_REPAIR', 'SOFTWARE_UPDATE', 'CLEANING', 'REPLACEMENT', 'INSPECTION', 'CALIBRATION', 'OTHER', 'USER_REPORT'],
              type: 'string',
            },
          },
          {
            name: 'relatedReportId',
            required: false,
            in: 'query',
            description: 'Filter by related report ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and personnel names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Excel export successful',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Export maintenance history as XLSX',
        tags: ['device-maintenance-history'],
      },
    },
    '/device-maintenance-history/{maintenance_history_id}': {
      get: {
        description: 'Retrieve a maintenance history record by its ID',
        operationId: 'MaintenanceHistoryController_getById',
        parameters: [
          {
            name: 'maintenance_history_id',
            required: true,
            in: 'path',
            description: 'Maintenance History ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Maintenance history retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MaintenanceHistoryDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Maintenance history does not exist',
          },
        },
        summary: 'Get maintenance history by ID',
        tags: ['device-maintenance-history'],
      },
      patch: {
        description: 'Update a maintenance history record',
        operationId: 'MaintenanceHistoryController_update',
        parameters: [
          {
            name: 'maintenance_history_id',
            required: true,
            in: 'path',
            description: 'Maintenance History ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateMaintenanceHistoryDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Maintenance history updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MaintenanceHistoryDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid input data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Maintenance history does not exist',
          },
        },
        summary: 'Update maintenance history',
        tags: ['device-maintenance-history'],
      },
      delete: {
        description: 'Delete a maintenance history record',
        operationId: 'MaintenanceHistoryController_delete',
        parameters: [
          {
            name: 'maintenance_history_id',
            required: true,
            in: 'path',
            description: 'Maintenance History ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Maintenance history deleted successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Maintenance history does not exist',
          },
        },
        summary: 'Delete maintenance history',
        tags: ['device-maintenance-history'],
      },
    },
    '/device-reports': {
      post: {
        description: 'Create a new device report (Students)',
        operationId: 'DeviceReportController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateDeviceReportDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Device report created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceReportDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create device report',
        tags: ['device-reports'],
      },
      get: {
        description: 'Retrieve all device reports (Admin/Management)',
        operationId: 'DeviceReportController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Device reports retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/DeviceReportListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all device reports',
        tags: ['device-reports'],
      },
    },
    '/device-reports/my-reports': {
      get: {
        description: 'Get reports created by the current user (Students)',
        operationId: 'DeviceReportController_getMyReports',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'reporterId',
            required: false,
            in: 'query',
            description: 'Filter by reporter ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
              type: 'string',
            },
          },
          {
            name: 'appId',
            required: false,
            in: 'query',
            description: 'Filter by software ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and reporter names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'My device reports retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/DeviceReportListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get my device reports',
        tags: ['device-reports'],
      },
    },
    '/device-reports/paginated': {
      get: {
        description: 'Retrieve device reports with pagination (Admin/Management)',
        operationId: 'DeviceReportController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'reporterId',
            required: false,
            in: 'query',
            description: 'Filter by reporter ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
              type: 'string',
            },
          },
          {
            name: 'appId',
            required: false,
            in: 'query',
            description: 'Filter by software ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and reporter names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated device reports retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated device reports',
        tags: ['device-reports'],
      },
    },
    '/device-reports/device/{device_id}': {
      get: {
        description: 'Get all reports for a specific device (Admin/Management)',
        operationId: 'DeviceReportController_getDeviceReports',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'reporterId',
            required: false,
            in: 'query',
            description: 'Filter by reporter ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
              type: 'string',
            },
          },
          {
            name: 'appId',
            required: false,
            in: 'query',
            description: 'Filter by software ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and reporter names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device reports retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/DeviceReportListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get device reports',
        tags: ['device-reports'],
      },
    },
    '/device-reports/export/xlsx': {
      get: {
        description: 'Export filtered device reports as Excel file (Admin/Management)',
        operationId: 'DeviceReportController_exportReportsXlsx',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'reporterId',
            required: false,
            in: 'query',
            description: 'Filter by reporter ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
              type: 'string',
            },
          },
          {
            name: 'appId',
            required: false,
            in: 'query',
            description: 'Filter by software ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and reporter names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Excel export successful',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Export device reports as XLSX',
        tags: ['device-reports'],
      },
    },
    '/device-reports/device/{device_id}/unresolved-count': {
      get: {
        description: 'Get count of unresolved reports for a specific device (Admin/Management)',
        operationId: 'DeviceReportController_getUnresolvedReportsCount',
        parameters: [
          {
            name: 'device_id',
            required: true,
            in: 'path',
            description: 'Device ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Unresolved reports count retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get unresolved reports count for device',
        tags: ['device-reports'],
      },
    },
    '/device-reports/my-assigned-reports': {
      get: {
        description: 'Get reports for devices assigned to current lab assistant',
        operationId: 'DeviceReportController_getMyAssignedReports',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'deviceId',
            required: false,
            in: 'query',
            description: 'Filter by device ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'labId',
            required: false,
            in: 'query',
            description: 'Filter by lab ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'reporterId',
            required: false,
            in: 'query',
            description: 'Filter by reporter ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'status',
            required: false,
            in: 'query',
            description: 'Filter by status',
            schema: {
              enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
              type: 'string',
            },
          },
          {
            name: 'appId',
            required: false,
            in: 'query',
            description: 'Filter by software ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'search',
            required: false,
            in: 'query',
            description: 'Search across device names, descriptions, and reporter names',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateFrom',
            required: false,
            in: 'query',
            description: 'Filter by date from (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'dateTo',
            required: false,
            in: 'query',
            description: 'Filter by date to (YYYY-MM-DD)',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'My assigned reports retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get my assigned reports',
        tags: ['device-reports'],
      },
    },
    '/device-reports/my-unresolved-count': {
      get: {
        description: 'Get count of unresolved reports for devices assigned to current lab assistant',
        operationId: 'DeviceReportController_getMyUnresolvedReportsCount',
        parameters: [],
        responses: {
          '200': {
            description: 'My unresolved reports count retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get my unresolved reports count',
        tags: ['device-reports'],
      },
    },
    '/device-reports/unresolved-count': {
      get: {
        description: 'Get total count of unresolved reports across all devices (Admin/Management)',
        operationId: 'DeviceReportController_getTotalUnresolvedReportsCount',
        parameters: [],
        responses: {
          '200': {
            description: 'Total unresolved reports count retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get total unresolved reports count',
        tags: ['device-reports'],
      },
    },
    '/device-reports/{device_report_id}': {
      get: {
        description: 'Retrieve a device report by its ID (Admin/Management)',
        operationId: 'DeviceReportController_getById',
        parameters: [
          {
            name: 'device_report_id',
            required: true,
            in: 'path',
            description: 'Device Report ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device report retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceReportDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device report does not exist',
          },
        },
        summary: 'Get device report by ID',
        tags: ['device-reports'],
      },
      patch: {
        description: 'Update an existing device report by ID (Admin/Management)',
        operationId: 'DeviceReportController_update',
        parameters: [
          {
            name: 'device_report_id',
            required: true,
            in: 'path',
            description: 'Device Report ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateDeviceReportDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Device report updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceReportDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device report does not exist',
          },
        },
        summary: 'Update device report',
        tags: ['device-reports'],
      },
    },
    '/device-reports/{device_report_ids}': {
      delete: {
        description: 'Delete one or multiple device reports by IDs (Admin/Management)',
        operationId: 'DeviceReportController_delete',
        parameters: [
          {
            name: 'device_report_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated device report IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device reports deleted successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more device reports do not exist',
          },
        },
        summary: 'Delete device reports',
        tags: ['device-reports'],
      },
    },
    '/device-reports/{reportId}/reject': {
      post: {
        description: 'Reject a device report and provide a reason (Admin/Management)',
        operationId: 'DeviceReportController_rejectReport',
        parameters: [
          {
            name: 'reportId',
            required: true,
            in: 'path',
            description: 'Device Report ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Device report rejected successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeviceReportDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Device report does not exist',
          },
        },
        summary: 'Reject device report',
        tags: ['device-reports'],
      },
    },
    '/lab-session': {
      post: {
        description: 'Create a new lab session',
        operationId: 'LabSessionController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateLabSessionDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Lab session created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabSessionDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Create lab session',
        tags: ['lab-sessions'],
      },
      get: {
        description: 'Retrieve all lab sessions',
        operationId: 'LabSessionController_getAll',
        parameters: [],
        responses: {
          '200': {
            description: 'Lab sessions retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabSessionListDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all lab sessions',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/paginated': {
      get: {
        description: 'Retrieve lab sessions with pagination',
        operationId: 'LabSessionController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Paginated lab sessions retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabSessionPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get paginated lab sessions',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/start-session': {
      post: {
        description: 'Start a new lab session for a course group',
        operationId: 'LabSessionController_startSession',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StartLabSessionDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Lab session started successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabSessionDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data or session already active',
          },
        },
        summary: 'Start lab session',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/assistant/{assistantId}/group/{courseGroupId}/active': {
      get: {
        description: 'Get details of current active session for a course group',
        operationId: 'LabSessionController_getActiveSession',
        parameters: [
          {
            name: 'assistantId',
            required: true,
            in: 'path',
            description: 'Assistant ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseGroupId',
            required: true,
            in: 'path',
            description: 'Course Group ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Active session details retrieved',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ActiveSessionDetailsDto',
                },
              },
            },
          },
          '404': {
            description: 'No active session found',
          },
        },
        summary: 'Get active session details',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/{sessionId}/attendance': {
      post: {
        description: 'Mark student as present or absent',
        operationId: 'LabSessionController_takeAttendance',
        parameters: [
          {
            name: 'sessionId',
            required: true,
            in: 'path',
            description: 'Session ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TakeAttendanceDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Attendance recorded successfully',
          },
        },
        summary: 'Take attendance',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/{sessionId}/add-student': {
      post: {
        description: 'Add a student who was not initially in the session',
        operationId: 'LabSessionController_addStudentToSession',
        parameters: [
          {
            name: 'sessionId',
            required: true,
            in: 'path',
            description: 'Session ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/AddStudentToSessionDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Student added to session successfully',
          },
        },
        summary: 'Add student to session',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/{sessionId}/award-points': {
      post: {
        description: 'Award extra points to a student',
        operationId: 'LabSessionController_awardExtraPoints',
        parameters: [
          {
            name: 'sessionId',
            required: true,
            in: 'path',
            description: 'Session ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/AwardExtraPointsDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Extra points awarded successfully',
          },
        },
        summary: 'Award extra points',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/{lab_session_id}': {
      get: {
        description: 'Retrieve a lab session by its ID',
        operationId: 'LabSessionController_getById',
        parameters: [
          {
            name: 'lab_session_id',
            required: true,
            in: 'path',
            description: 'Lab Session ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Lab session retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabSessionDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Lab session does not exist',
          },
        },
        summary: 'Get lab session by ID',
        tags: ['lab-sessions'],
      },
      patch: {
        description: 'Update an existing lab session by ID',
        operationId: 'LabSessionController_update',
        parameters: [
          {
            name: 'lab_session_id',
            required: true,
            in: 'path',
            description: 'Lab Session ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateLabSessionDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Lab session updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/LabSessionDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Lab session does not exist',
          },
        },
        summary: 'Update lab session',
        tags: ['lab-sessions'],
      },
    },
    '/lab-session/{lab_session_ids}': {
      delete: {
        description: 'Delete one or multiple lab sessions by IDs',
        operationId: 'LabSessionController_delete',
        parameters: [
          {
            name: 'lab_session_ids',
            required: true,
            in: 'path',
            description: 'Comma-separated lab session IDs',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Lab sessions deleted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/DeleteDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - One or more lab sessions do not exist',
          },
        },
        summary: 'Delete lab sessions',
        tags: ['lab-sessions'],
      },
    },
    '/staff-requests': {
      post: {
        description: 'Create a new staff request',
        operationId: 'StaffRequestController_create',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'multipart/form-data': {
              schema: {
                $ref: '#/components/schemas/CreateStaffRequestDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Staff request created successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffRequestDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
        },
        security: [{}],
        summary: 'Create staff request',
        tags: ['staff-requests'],
      },
      get: {
        description: 'Retrieve all staff requests with pagination',
        operationId: 'StaffRequestController_findAll',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Staff requests retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffRequestPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get all staff requests',
        tags: ['staff-requests'],
      },
    },
    '/staff-requests/pending': {
      get: {
        description: 'Retrieve pending staff requests with pagination',
        operationId: 'StaffRequestController_findPending',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        ],
        responses: {
          '200': {
            description: 'Pending staff requests retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffRequestPagedDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        summary: 'Get pending staff requests',
        tags: ['staff-requests'],
      },
    },
    '/staff-requests/{id}': {
      get: {
        description: 'Retrieve a staff request by its ID',
        operationId: 'StaffRequestController_findOne',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Staff request retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffRequestDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Staff request does not exist',
          },
        },
        summary: 'Get staff request by ID',
        tags: ['staff-requests'],
      },
    },
    '/staff-requests/{id}/approve': {
      put: {
        description: 'Approve a pending staff request',
        operationId: 'StaffRequestController_approve',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ApproveStaffRequestDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Staff request approved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffRequestDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Request is not pending',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Staff request does not exist',
          },
        },
        summary: 'Approve staff request',
        tags: ['staff-requests'],
      },
    },
    '/staff-requests/{id}/reject': {
      put: {
        description: 'Reject a pending staff request',
        operationId: 'StaffRequestController_reject',
        parameters: [
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/RejectStaffRequestDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Staff request rejected successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StaffRequestDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Request is not pending or no reason provided',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Staff request does not exist',
          },
        },
        summary: 'Reject staff request',
        tags: ['staff-requests'],
      },
    },
    '/student-courses/enroll': {
      post: {
        operationId: 'StudentCourseController_enrollStudent',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/EnrollStudentDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Student enrolled successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentCourseDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request.',
          },
        },
        summary: 'Enroll a student in a course with automatic group assignment',
        tags: ['student-courses'],
      },
    },
    '/student-courses': {
      get: {
        operationId: 'StudentCourseController_getPaginated',
        parameters: [
          {
            name: 'limit',
            required: false,
            in: 'query',
            schema: {
              default: 10,
              type: 'number',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            schema: {
              default: 0,
              type: 'number',
            },
          },
          {
            name: 'sortBy',
            required: false,
            in: 'query',
            schema: {
              default: 'created_at',
              type: 'string',
            },
          },
          {
            name: 'sortOrder',
            required: false,
            in: 'query',
            schema: {
              default: 'desc',
              enum: ['asc', 'desc'],
              type: 'string',
            },
          },
          {
            name: 'ids',
            required: false,
            in: 'query',
            schema: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
          {
            name: 'courseId',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'studentId',
            required: false,
            in: 'query',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return all enrollments.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentCoursePagedDto',
                },
              },
            },
          },
        },
        summary: 'Get all student-courses',
        tags: ['student-courses'],
      },
    },
    '/student-courses/student/{studentId}/course/{courseId}/group-details': {
      get: {
        operationId: 'StudentCourseController_getStudentGroupDetails',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return student group details.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentCourseListDto',
                },
              },
            },
          },
          '404': {
            description: 'Student enrollment not found.',
          },
        },
        summary: "Get student's group details in a specific course",
        tags: ['student-courses'],
      },
    },
    '/student-courses/group/{groupId}/students': {
      get: {
        operationId: 'StudentCourseController_getGroupStudents',
        parameters: [
          {
            name: 'groupId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return students in group.',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentCourseListDto',
                  },
                },
              },
            },
          },
          '404': {
            description: 'Group not found.',
          },
        },
        summary: 'Get all students in a specific group with detailed information',
        tags: ['student-courses'],
      },
    },
    '/student-courses/student/{studentId}': {
      get: {
        operationId: 'StudentCourseController_getStudentCourses',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return student enrolled courses.',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentCourseListDto',
                  },
                },
              },
            },
          },
          '404': {
            description: 'Student not found.',
          },
        },
        summary: 'Get all courses enrolled by a specific student',
        tags: ['student-courses'],
      },
    },
    '/student-courses/student/{studentId}/weekly-schedule': {
      get: {
        description: 'Get the weekly lab schedule for a specific student showing all their course group sessions',
        operationId: 'StudentCourseController_getStudentWeeklySchedule',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return student weekly schedule.',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentWeeklyScheduleDto',
                  },
                },
              },
            },
          },
          '404': {
            description: 'Student not found.',
          },
        },
        summary: 'Get student weekly schedule',
        tags: ['student-courses'],
      },
    },
    '/student-courses/{studentId}/{courseId}': {
      put: {
        operationId: 'StudentCourseController_updateEnrollment',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateEnrollmentDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Enrollment updated successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/StudentCourseDto',
                },
              },
            },
          },
          '404': {
            description: 'Enrollment not found.',
          },
        },
        summary: 'Update student enrollment details',
        tags: ['student-courses'],
      },
      delete: {
        operationId: 'StudentCourseController_removeStudentFromCourse',
        parameters: [
          {
            name: 'studentId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Student successfully removed from course.',
          },
          '404': {
            description: 'Enrollment not found.',
          },
        },
        summary: 'Remove student from a course',
        tags: ['student-courses'],
      },
    },
    '/student-courses/available-courses': {
      get: {
        operationId: 'StudentCourseController_getAvailableCourses',
        parameters: [],
        responses: {
          '200': {
            description: 'Return available courses.',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/AvailableCourseDto',
                  },
                },
              },
            },
          },
        },
        summary: 'Get available courses for enrollment',
        tags: ['student-courses'],
      },
    },
    '/student-courses/course/{courseId}': {
      get: {
        operationId: 'StudentCourseController_getCourseStudents',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Return students enrolled in course.',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/StudentCourseListDto',
                  },
                },
              },
            },
          },
          '404': {
            description: 'Course not found.',
          },
        },
        summary: 'Get all students enrolled in a specific course',
        tags: ['student-courses'],
      },
    },
    '/course-access/courses/{courseId}/summary': {
      get: {
        description: 'Get a summary of all user access permissions for a specific course',
        operationId: 'CourseAccessController_getCourseAccessSummary',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Course access summary retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseAccessSummaryDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get course access summary',
        tags: ['course-access'],
      },
    },
    '/course-access/courses/{courseId}/assistants': {
      get: {
        description: 'Get all assistants who currently have any permissions for this course',
        operationId: 'CourseAccessController_getAssistantsWithPermissions',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Assistants with permissions retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/AssistantListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get assistants with permissions',
        tags: ['course-access'],
      },
    },
    '/course-access/courses/{courseId}/available-assistants': {
      get: {
        description: 'Get all assistants who do not currently have any permissions for this course',
        operationId: 'CourseAccessController_getAvailableAssistants',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Available assistants retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/AssistantListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get available assistants',
        tags: ['course-access'],
      },
    },
    '/course-access/permissions': {
      post: {
        description: 'Grant access permission to an assistant for a specific course section',
        operationId: 'CourseAccessController_grantCourseAccess',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/CreateCourseAccessDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Access permission granted successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseAccessPermissionDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data or user does not have ASSIST_IN_COURSE privilege',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course or user does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Grant course access permission',
        tags: ['course-access'],
      },
    },
    '/course-access/permissions/{userId}/{courseId}/{section}': {
      put: {
        description: 'Update access permission for an assistant for a specific course section',
        operationId: 'CourseAccessController_updateCourseAccess',
        parameters: [
          {
            name: 'userId',
            required: true,
            in: 'path',
            description: 'User ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'section',
            required: true,
            in: 'path',
            description: 'Course section',
            schema: {
              enum: ['grades', 'events', 'content', 'groups'],
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateCourseAccessDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Access permission updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CourseAccessPermissionDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Permission does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Update course access permission',
        tags: ['course-access'],
      },
      delete: {
        description: 'Revoke access permission from an assistant for a specific course section',
        operationId: 'CourseAccessController_revokeCourseAccess',
        parameters: [
          {
            name: 'userId',
            required: true,
            in: 'path',
            description: 'User ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'section',
            required: true,
            in: 'path',
            description: 'Course section',
            schema: {
              enum: ['grades', 'events', 'content', 'groups'],
              type: 'string',
            },
          },
        ],
        responses: {
          '204': {
            description: 'Access permission revoked successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Permission does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Revoke course access permission',
        tags: ['course-access'],
      },
    },
    '/course-access/permissions/bulk': {
      post: {
        description: 'Update multiple access permissions at once',
        operationId: 'CourseAccessController_bulkUpdateCourseAccess',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkUpdateCourseAccessDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Access permissions updated successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/CourseAccessPermissionDto',
                  },
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Bulk update course access permissions',
        tags: ['course-access'],
      },
    },
    '/course-access/permissions/grant-multiple-sections': {
      post: {
        description: 'Grant access permissions to an assistant for multiple course sections at once',
        operationId: 'CourseAccessController_grantMultipleSectionsAccess',
        parameters: [],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/GrantMultipleSectionsDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Access permissions granted successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/CourseAccessPermissionDto',
                  },
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data or user does not have ASSIST_IN_COURSE privilege',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - Course or user does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Grant access to multiple sections',
        tags: ['course-access'],
      },
    },
    '/course-access/permissions/{userId}/{courseId}/all': {
      delete: {
        description: 'Revoke all access permissions from an assistant for a course',
        operationId: 'CourseAccessController_revokeAllUserAccess',
        parameters: [
          {
            name: 'userId',
            required: true,
            in: 'path',
            description: 'User ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '204': {
            description: 'All access permissions revoked successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Not Found - User or course does not exist',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Revoke all permissions for user',
        tags: ['course-access'],
      },
    },
    '/course-access/users/{userId}/courses/{courseId}': {
      get: {
        description: 'Get all access permissions for a specific user in a course',
        operationId: 'CourseAccessController_getUserCourseAccess',
        parameters: [
          {
            name: 'userId',
            required: true,
            in: 'path',
            description: 'User ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'User course access retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/CourseAccessPermissionDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get user course access',
        tags: ['course-access'],
      },
    },
    '/course-access/check/{courseId}/{section}': {
      get: {
        description: 'Check if current user has access to a specific course section',
        operationId: 'CourseAccessController_checkSectionAccess',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'section',
            required: true,
            in: 'path',
            description: 'Course section',
            schema: {
              enum: ['grades', 'events', 'content', 'groups'],
              type: 'string',
            },
          },
          {
            name: 'action',
            required: false,
            in: 'query',
            description: 'Action to check (default: view)',
            schema: {
              enum: ['view', 'edit', 'delete'],
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Access check result',
            content: {
              'application/json': {
                schema: {
                  type: 'boolean',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Check section access',
        tags: ['course-access'],
      },
    },
    '/materials/course/{courseId}': {
      get: {
        description: 'Retrieve all materials for a specific course',
        operationId: 'MaterialController_getCourseMaterials',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Course materials retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/MaterialListDto',
                  },
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get course materials',
        tags: ['materials'],
      },
      post: {
        description: 'Upload files as course materials',
        operationId: 'MaterialController_uploadMaterial',
        parameters: [
          {
            name: 'courseId',
            required: true,
            in: 'path',
            description: 'Course ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'multipart/form-data': {
              schema: {
                $ref: '#/components/schemas/CreateMaterialDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Material uploaded successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MaterialDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Upload course material',
        tags: ['materials'],
      },
    },
    '/materials/{materialId}/download': {
      get: {
        description: 'Download a specific material file',
        operationId: 'MaterialController_downloadMaterial',
        parameters: [
          {
            name: 'materialId',
            required: true,
            in: 'path',
            description: 'Material ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'File downloaded successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Material not found',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Download material',
        tags: ['materials'],
      },
    },
    '/materials/{materialId}/download-url': {
      get: {
        description: 'Get presigned URL for downloading material',
        operationId: 'MaterialController_getMaterialDownloadUrl',
        parameters: [
          {
            name: 'materialId',
            required: true,
            in: 'path',
            description: 'Material ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Download URL retrieved successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Material not found',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Get material download URL',
        tags: ['materials'],
      },
    },
    '/materials/{materialId}': {
      delete: {
        description: 'Delete a course material',
        operationId: 'MaterialController_deleteMaterial',
        parameters: [
          {
            name: 'materialId',
            required: true,
            in: 'path',
            description: 'Material ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Material deleted successfully',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Material not found',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Delete material',
        tags: ['materials'],
      },
      patch: {
        description: 'Update material information',
        operationId: 'MaterialController_updateMaterial',
        parameters: [
          {
            name: 'materialId',
            required: true,
            in: 'path',
            description: 'Material ID',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UpdateMaterialDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Material updated successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MaterialDto',
                },
              },
            },
          },
          '400': {
            description: 'Bad Request - Invalid data',
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Material not found',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Update material',
        tags: ['materials'],
      },
    },
    '/materials/{materialId}/toggle-visibility': {
      patch: {
        description: 'Toggle hide/show status of a material',
        operationId: 'MaterialController_toggleMaterialVisibility',
        parameters: [
          {
            name: 'materialId',
            required: true,
            in: 'path',
            description: 'Material ID',
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Material visibility toggled successfully',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MaterialDto',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized',
          },
          '403': {
            description: 'Forbidden - Insufficient privileges',
          },
          '404': {
            description: 'Material not found',
          },
        },
        security: [
          {
            bearer: [],
          },
        ],
        summary: 'Toggle material visibility',
        tags: ['materials'],
      },
    },
  },
  info: {
    title: 'ASU Science Management',
    description: 'API description for the management system',
    version: '1.0',
    contact: {},
  },
  tags: [
    {
      name: 'asu-sci-management',
      description: '',
    },
  ],
  servers: [],
  components: {
    securitySchemes: {
      bearer: {
        scheme: 'bearer',
        bearerFormat: 'JWT',
        type: 'http',
      },
    },
    schemas: {
      PrivilegeCode: {
        type: 'string',
        enum: [
          'MANAGE_SYSTEM',
          'MANAGE_STUDENTS',
          'MANAGE_LABS',
          'LAB_ASSISTANT',
          'STUDY_COURSE',
          'TEACH_COURSE',
          'ASSIST_IN_COURSE',
          'LAB_MAINTENANCE',
          'REPORT_DEVICE',
          'MANAGE_COURSES',
        ],
      },
      GenericAssignPrivilegeDto: {
        type: 'object',
        properties: {
          privilegeCode: {
            allOf: [
              {
                $ref: '#/components/schemas/PrivilegeCode',
              },
            ],
          },
          resourceIds: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['privilegeCode'],
      },
      CreateUserTypeDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          isDeletable: {
            type: 'boolean',
            default: true,
          },
          privilege_assignments: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/GenericAssignPrivilegeDto',
            },
          },
        },
        required: ['name', 'privilege_assignments'],
      },
      UserTypeDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          isDeletable: {
            type: 'boolean',
            default: true,
          },
          id: {
            type: 'string',
          },
        },
        required: ['name', 'id'],
      },
      UserTypePagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/UserTypeDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      PrivilegeAssignmentDto: {
        type: 'object',
        properties: {
          code: {
            type: 'string',
            enum: [
              'MANAGE_SYSTEM',
              'MANAGE_STUDENTS',
              'MANAGE_LABS',
              'LAB_ASSISTANT',
              'STUDY_COURSE',
              'TEACH_COURSE',
              'ASSIST_IN_COURSE',
              'LAB_MAINTENANCE',
              'REPORT_DEVICE',
              'MANAGE_COURSES',
            ],
          },
          friendlyName: {
            type: 'string',
          },
          group: {
            type: 'string',
          },
          requiresResource: {
            type: 'boolean',
          },
          paramKey: {
            type: 'string',
          },
          entityName: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          key: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          category: {
            type: 'string',
          },
          isActive: {
            type: 'boolean',
            default: true,
          },
          resourceIds: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['code', 'friendlyName', 'group', 'requiresResource', 'name', 'key', 'description', 'category', 'isActive'],
      },
      UpdateUserTypeDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          isDeletable: {
            type: 'boolean',
            default: true,
          },
        },
      },
      DeleteDto: {
        type: 'object',
        properties: {
          affected: {
            type: 'number',
          },
        },
      },
      DoctorDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          email: {
            type: 'string',
          },
          title: {
            type: 'string',
          },
          department: {
            type: 'string',
          },
          status: {
            type: 'boolean',
          },
          lastLogin: {
            format: 'date-time',
            type: 'string',
          },
          assignedCourses: {
            description: 'List of course codes the doctor teaches',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['id', 'name', 'username', 'email', 'title', 'department', 'status', 'lastLogin', 'assignedCourses'],
      },
      DoctorPagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/DoctorDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      CreateStudentDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
            description: 'Username has to be 4 letters or more',
          },
          password: {
            type: 'string',
            example: 'Abcd@1234',
          },
          seatNo: {
            type: 'number',
          },
          level: {
            type: 'number',
          },
          program: {
            type: 'string',
          },
          photo: {
            type: 'string',
            format: 'binary',
            description: 'Student photo',
          },
        },
        required: ['name', 'username', 'password', 'seatNo', 'level', 'program', 'photo'],
      },
      StudentDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          seatNo: {
            type: 'number',
          },
          level: {
            type: 'number',
          },
          program: {
            type: 'string',
          },
          photo: {
            type: 'string',
            description: 'Student photo ID',
          },
        },
        required: ['id', 'name', 'username', 'seatNo', 'level', 'program', 'photo'],
      },
      StudentPagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/StudentDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      UpdateStudentDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
            description: 'Username has to be 4 letters or more',
          },
          password: {
            type: 'string',
            example: 'Abcd@1234',
          },
          seatNo: {
            type: 'number',
          },
          level: {
            type: 'number',
          },
          program: {
            type: 'string',
          },
          photo: {
            type: 'string',
            format: 'binary',
            description: 'Student photo',
          },
        },
      },
      CreateStaffDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
            description: 'Username has to be 4 letters or more',
          },
          password: {
            type: 'string',
            example: 'Abcd@1234',
          },
          title: {
            type: 'string',
          },
          department: {
            type: 'string',
          },
        },
        required: ['name', 'username', 'password', 'title', 'department'],
      },
      StaffDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          title: {
            type: 'string',
          },
          department: {
            type: 'string',
          },
          userType: {
            type: 'string',
          },
          userTypeId: {
            type: 'string',
          },
          status: {
            type: 'boolean',
          },
          lastLogin: {
            format: 'date-time',
            type: 'string',
            nullable: true,
            description: 'Last login date or null if never logged in',
          },
          privileges: {
            description: 'All privileges (user type + user specific) - for compatibility',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          userTypePrivileges: {
            description: 'Privileges inherited from user type (read-only)',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          userPrivileges: {
            description: 'User-specific privileges (editable)',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: [
          'id',
          'name',
          'username',
          'title',
          'department',
          'userType',
          'userTypeId',
          'status',
          'lastLogin',
          'privileges',
          'userTypePrivileges',
          'userPrivileges',
        ],
      },
      StaffPagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/StaffDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      UpdateStaffDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          password: {
            type: 'string',
          },
          title: {
            type: 'string',
          },
          department: {
            type: 'string',
          },
          userTypeId: {
            type: 'string',
            description: 'User type ID to change staff type',
          },
        },
      },
      UpdateUserPrivilegesDto: {
        type: 'object',
        properties: {
          privileges: {
            type: 'array',
            description: 'Array of privilege codes to assign to the user',
            example: ['MANAGE_COURSES', 'TEACH_COURSE'],
            items: {
              type: 'string',
              enum: [
                'MANAGE_SYSTEM',
                'MANAGE_STUDENTS',
                'MANAGE_LABS',
                'LAB_ASSISTANT',
                'STUDY_COURSE',
                'TEACH_COURSE',
                'ASSIST_IN_COURSE',
                'LAB_MAINTENANCE',
                'REPORT_DEVICE',
                'MANAGE_COURSES',
              ],
            },
          },
        },
        required: ['privileges'],
      },
      FileResponseDto: {
        type: 'object',
        properties: {
          id: {
            type: 'number',
            description: 'File ID',
          },
          filename: {
            type: 'string',
            description: 'File name',
          },
          originalname: {
            type: 'string',
            description: 'Original file name',
          },
          mimetype: {
            type: 'string',
            description: 'File MIME type',
          },
          size: {
            type: 'number',
            description: 'File size in bytes',
          },
          objectName: {
            type: 'string',
            description: 'File object name in storage',
          },
          prefix: {
            type: 'string',
            description: 'File prefix/folder in storage',
          },
          bucket: {
            type: 'string',
            description: 'Storage bucket name',
          },
          category: {
            type: 'string',
            description: 'File category',
          },
          description: {
            type: 'string',
            description: 'File description',
          },
          isPublic: {
            type: 'boolean',
            description: 'Whether the file is publicly accessible',
          },
          createdAt: {
            format: 'date-time',
            type: 'string',
            description: 'File creation date',
          },
          updatedAt: {
            format: 'date-time',
            type: 'string',
            description: 'File last update date',
          },
          url: {
            type: 'string',
            description: 'Signed URL for accessing the file',
          },
        },
        required: ['id', 'filename', 'originalname', 'mimetype', 'size', 'objectName', 'bucket', 'isPublic', 'createdAt', 'updatedAt'],
      },
      LoginRequestDto: {
        type: 'object',
        properties: {
          username: {
            type: 'string',
            example: 'admin',
          },
          password: {
            type: 'string',
            example: 'Abcd@1234',
          },
        },
        required: ['username', 'password'],
      },
      ExamScheduleItemDto: {
        type: 'object',
        properties: {
          eventScheduleId: {
            type: 'string',
          },
          eventName: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          status: {
            type: 'string',
          },
        },
        required: ['eventScheduleId', 'eventName', 'dateTime', 'status'],
      },
      ExamModeStatusDto: {
        type: 'object',
        properties: {
          isInExamMode: {
            type: 'boolean',
          },
          examStartsIn: {
            type: 'number',
          },
          examSchedules: {
            description: 'Array of exam schedules for the student',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ExamScheduleItemDto',
            },
          },
        },
        required: ['isInExamMode', 'examSchedules'],
      },
      UserInfoDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          userType: {
            type: 'string',
          },
          isStudent: {
            type: 'boolean',
          },
          examModeStatus: {
            description: 'Exam mode status for students',
            allOf: [
              {
                $ref: '#/components/schemas/ExamModeStatusDto',
              },
            ],
          },
        },
        required: ['id', 'name', 'username', 'userType', 'isStudent'],
      },
      LoginSuccessDto: {
        type: 'object',
        properties: {
          refreshToken: {
            type: 'string',
          },
          accessToken: {
            type: 'string',
          },
          privileges: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
          user: {
            $ref: '#/components/schemas/UserInfoDto',
          },
        },
        required: ['refreshToken', 'accessToken', 'privileges', 'user'],
      },
      RefreshRequsetDto: {
        type: 'object',
        properties: {
          refreshToken: {
            type: 'string',
          },
        },
        required: ['refreshToken'],
      },
      AuthJwtDto: {
        type: 'object',
        properties: {
          refreshToken: {
            type: 'string',
          },
          accessToken: {
            type: 'string',
          },
        },
        required: ['refreshToken', 'accessToken'],
      },
      PrivilegRefreshDto: {
        type: 'object',
        properties: {
          privileges: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['privileges'],
      },
      CreateEventDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          duration: {
            type: 'number',
          },
          eventType: {
            type: 'string',
            enum: ['exam', 'quiz', 'assignment', 'lab_assignment', 'project', 'presentation', 'workshop', 'practice', 'seminar'],
            default: 'assignment',
          },
          locationType: {
            type: 'string',
            enum: ['lab_devices', 'lecture_hall', 'online', 'hybrid'],
            default: 'online',
          },
          customLocation: {
            type: 'string',
            description: 'Custom location when not using lab devices',
          },
          hasMarks: {
            type: 'boolean',
          },
          totalMarks: {
            type: 'number',
          },
          autoStart: {
            type: 'boolean',
            default: false,
          },
          examModeStartMinutes: {
            type: 'number',
            default: 30,
          },
          startDateTime: {
            format: 'date-time',
            type: 'string',
            description: 'When the event should start',
          },
          requiresModels: {
            type: 'boolean',
            default: false,
            description: 'Whether this event requires exam models',
          },
          allowRandomModelAssignment: {
            type: 'boolean',
            default: false,
            description: 'Allow random assignment of exam models to students',
          },
          isExam: {
            type: 'boolean',
            default: false,
            description: 'Whether this event should be treated as an exam',
          },
          courseId: {
            type: 'string',
          },
        },
        required: [
          'name',
          'duration',
          'eventType',
          'locationType',
          'hasMarks',
          'autoStart',
          'examModeStartMinutes',
          'requiresModels',
          'allowRandomModelAssignment',
          'isExam',
          'courseId',
        ],
      },
      EventDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          duration: {
            type: 'number',
          },
          eventType: {
            type: 'string',
            enum: ['exam', 'quiz', 'assignment', 'lab_assignment', 'project', 'presentation', 'workshop', 'practice', 'seminar'],
            default: 'assignment',
          },
          locationType: {
            type: 'string',
            enum: ['lab_devices', 'lecture_hall', 'online', 'hybrid'],
            default: 'online',
          },
          customLocation: {
            type: 'string',
            description: 'Custom location when not using lab devices',
          },
          hasMarks: {
            type: 'boolean',
          },
          totalMarks: {
            type: 'number',
          },
          autoStart: {
            type: 'boolean',
            default: false,
          },
          examModeStartMinutes: {
            type: 'number',
            default: 30,
          },
          startDateTime: {
            format: 'date-time',
            type: 'string',
            description: 'When the event should start',
          },
          requiresModels: {
            type: 'boolean',
            default: false,
            description: 'Whether this event requires exam models',
          },
          allowRandomModelAssignment: {
            type: 'boolean',
            default: false,
            description: 'Allow random assignment of exam models to students',
          },
          isExam: {
            type: 'boolean',
            default: false,
            description: 'Whether this event should be treated as an exam',
          },
          courseId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          isInLab: {
            type: 'boolean',
            description: 'Computed: Whether this event is in lab',
          },
          isOnline: {
            type: 'boolean',
            description: 'Computed: Whether this event is online',
          },
          examFiles: {
            type: 'string',
            deprecated: true,
          },
          degree: {
            type: 'number',
            deprecated: true,
            description: 'Use totalMarks instead',
          },
        },
        required: [
          'name',
          'duration',
          'eventType',
          'locationType',
          'hasMarks',
          'autoStart',
          'examModeStartMinutes',
          'requiresModels',
          'allowRandomModelAssignment',
          'isExam',
          'courseId',
          'id',
          'isInLab',
          'isOnline',
        ],
      },
      EventListDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          duration: {
            type: 'number',
          },
          eventType: {
            type: 'string',
            enum: ['exam', 'quiz', 'assignment', 'lab_assignment', 'project', 'presentation', 'workshop', 'practice', 'seminar'],
            default: 'assignment',
          },
          locationType: {
            type: 'string',
            enum: ['lab_devices', 'lecture_hall', 'online', 'hybrid'],
            default: 'online',
          },
          customLocation: {
            type: 'string',
            description: 'Custom location when not using lab devices',
          },
          hasMarks: {
            type: 'boolean',
          },
          totalMarks: {
            type: 'number',
          },
          autoStart: {
            type: 'boolean',
            default: false,
          },
          examModeStartMinutes: {
            type: 'number',
            default: 30,
          },
          startDateTime: {
            format: 'date-time',
            type: 'string',
            description: 'When the event should start',
          },
          requiresModels: {
            type: 'boolean',
            default: false,
            description: 'Whether this event requires exam models',
          },
          allowRandomModelAssignment: {
            type: 'boolean',
            default: false,
            description: 'Allow random assignment of exam models to students',
          },
          isExam: {
            type: 'boolean',
            default: false,
            description: 'Whether this event should be treated as an exam',
          },
          courseId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          isInLab: {
            type: 'boolean',
            description: 'Computed: Whether this event is in lab',
          },
          isOnline: {
            type: 'boolean',
            description: 'Computed: Whether this event is online',
          },
          examFiles: {
            type: 'string',
            deprecated: true,
          },
          degree: {
            type: 'number',
            deprecated: true,
            description: 'Use totalMarks instead',
          },
        },
        required: [
          'name',
          'duration',
          'eventType',
          'locationType',
          'hasMarks',
          'autoStart',
          'examModeStartMinutes',
          'requiresModels',
          'allowRandomModelAssignment',
          'isExam',
          'courseId',
          'id',
          'isInLab',
          'isOnline',
        ],
      },
      EventPagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/EventDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      StudentExamDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          courseName: {
            type: 'string',
          },
          courseCode: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          duration: {
            type: 'number',
          },
          location: {
            type: 'string',
          },
          status: {
            type: 'string',
          },
          hasAccess: {
            type: 'boolean',
          },
          examFiles: {
            type: 'array',
            items: {
              type: 'array',
            },
          },
          groupId: {
            type: 'string',
          },
          scheduleId: {
            type: 'string',
          },
          submittedFiles: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
          canSubmit: {
            type: 'boolean',
          },
        },
        required: ['id', 'name', 'courseName', 'courseCode', 'dateTime', 'duration', 'location', 'status', 'hasAccess'],
      },
      FileSubmissionResponseDto: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
          },
          submittedFiles: {
            type: 'array',
            items: {
              type: 'array',
            },
          },
          submittedAt: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['message', 'submittedFiles', 'submittedAt'],
      },
      StudentFileDto: {
        type: 'object',
        properties: {},
      },
      UpdateEventDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          duration: {
            type: 'number',
          },
          eventType: {
            type: 'string',
            enum: ['exam', 'quiz', 'assignment', 'lab_assignment', 'project', 'presentation', 'workshop', 'practice', 'seminar'],
            default: 'assignment',
          },
          locationType: {
            type: 'string',
            enum: ['lab_devices', 'lecture_hall', 'online', 'hybrid'],
            default: 'online',
          },
          customLocation: {
            type: 'string',
            description: 'Custom location when not using lab devices',
          },
          hasMarks: {
            type: 'boolean',
          },
          totalMarks: {
            type: 'number',
          },
          autoStart: {
            type: 'boolean',
            default: false,
          },
          examModeStartMinutes: {
            type: 'number',
            default: 30,
          },
          startDateTime: {
            format: 'date-time',
            type: 'string',
            description: 'When the event should start',
          },
          requiresModels: {
            type: 'boolean',
            default: false,
            description: 'Whether this event requires exam models',
          },
          allowRandomModelAssignment: {
            type: 'boolean',
            default: false,
            description: 'Allow random assignment of exam models to students',
          },
          isExam: {
            type: 'boolean',
            default: false,
            description: 'Whether this event should be treated as an exam',
          },
          courseId: {
            type: 'string',
          },
        },
      },
      GroupCalculationResultDto: {
        type: 'object',
        properties: {
          totalStudents: {
            type: 'number',
          },
          requiredSessions: {
            type: 'number',
          },
          groupDistribution: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                courseGroupId: {
                  type: 'string',
                },
                courseGroupName: {
                  type: 'string',
                },
                studentCount: {
                  type: 'number',
                },
                recommendedSessions: {
                  type: 'number',
                },
                maxStudentsPerSession: {
                  type: 'number',
                },
              },
            },
          },
          labAvailability: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                labId: {
                  type: 'string',
                },
                labName: {
                  type: 'string',
                },
                capacity: {
                  type: 'number',
                },
                availableSlots: {
                  type: 'number',
                },
              },
            },
          },
        },
        required: ['totalStudents', 'requiredSessions', 'groupDistribution', 'labAvailability'],
      },
      CreateScheduleDto: {
        type: 'object',
        properties: {
          courseGroupId: {
            type: 'string',
          },
          labId: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          assistantId: {
            type: 'string',
          },
          maxStudents: {
            type: 'number',
          },
        },
        required: ['courseGroupId', 'dateTime', 'assistantId', 'maxStudents'],
      },
      CreateExamGroupsDto: {
        type: 'object',
        properties: {
          schedules: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CreateScheduleDto',
            },
          },
        },
        required: ['schedules'],
      },
      MarkUploadResponseDto: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
          },
          processedStudents: {
            type: 'number',
          },
          errors: {
            type: 'array',
            items: {
              type: 'array',
            },
          },
        },
        required: ['message', 'processedStudents', 'errors'],
      },
      ProposedGroupDto: {
        type: 'object',
        properties: {
          courseGroupId: {
            type: 'string',
          },
          courseGroupName: {
            type: 'string',
          },
          currentStudentCount: {
            type: 'number',
          },
          maxCapacity: {
            type: 'number',
          },
          selectedLabId: {
            type: 'string',
          },
          selectedLabName: {
            type: 'string',
          },
          proposedCapacity: {
            type: 'number',
          },
          hasSchedule: {
            type: 'boolean',
          },
          scheduleDateTime: {
            format: 'date-time',
            type: 'string',
          },
          isOverCapacity: {
            type: 'boolean',
            description: 'Whether the proposed capacity exceeds lab capacity',
          },
        },
        required: [
          'courseGroupId',
          'courseGroupName',
          'currentStudentCount',
          'maxCapacity',
          'selectedLabId',
          'selectedLabName',
          'proposedCapacity',
          'hasSchedule',
          'scheduleDateTime',
        ],
      },
      LabAvailabilityDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          labName: {
            type: 'string',
          },
          totalCapacity: {
            type: 'number',
          },
          availableCapacity: {
            type: 'number',
          },
          requiredSoftware: {
            type: 'array',
            items: {
              type: 'array',
            },
          },
          hasRequiredSoftware: {
            type: 'boolean',
          },
        },
        required: ['labId', 'labName', 'totalCapacity', 'availableCapacity', 'requiredSoftware', 'hasRequiredSoftware'],
      },
      GroupCreationSimulationDto: {
        type: 'object',
        properties: {
          totalStudents: {
            type: 'number',
            description: 'Total number of enrolled students in the course',
          },
          requiredGroups: {
            type: 'number',
            description: 'Number of groups needed to cover all students',
          },
          proposedGroups: {
            description: 'List of proposed group distributions',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ProposedGroupDto',
            },
          },
          uncoveredStudents: {
            type: 'number',
            description: 'Number of uncovered students',
          },
          canCreateEvent: {
            type: 'boolean',
            description: 'Can create event (no uncovered students)',
          },
          availableLabs: {
            description: 'Available labs for group assignment',
            type: 'array',
            items: {
              $ref: '#/components/schemas/LabAvailabilityDto',
            },
          },
        },
        required: ['totalStudents', 'requiredGroups', 'proposedGroups', 'uncoveredStudents', 'canCreateEvent', 'availableLabs'],
      },
      AddGroupToSimulationDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          proposedCapacity: {
            type: 'number',
            description: 'Proposed capacity, defaults to lab effective capacity if not specified',
          },
        },
        required: ['labId'],
      },
      RemoveGroupFromSimulationDto: {
        type: 'object',
        properties: {
          groupIndex: {
            type: 'number',
            description: 'Index of the group to remove (0-based)',
          },
        },
        required: ['groupIndex'],
      },
      ProposedGroupSimpleDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          proposedCapacity: {
            type: 'number',
          },
          autoStart: {
            type: 'boolean',
            default: false,
            description: 'Whether this group should auto-start the exam',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
            description: 'Date and time for this group schedule',
          },
          assistantIds: {
            description: 'Assistant IDs for this group',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['labId', 'proposedCapacity', 'autoStart', 'dateTime', 'assistantIds'],
      },
      ExamModelForEventDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          fileIds: {
            description: 'Array of uploaded file IDs',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['name'],
      },
      GroupModelAssignmentDto: {
        type: 'object',
        properties: {
          groupIndex: {
            type: 'number',
            description: 'Index of the group (0-based)',
          },
          assignedModelNames: {
            description: 'Array of model names assigned to this group',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['groupIndex', 'assignedModelNames'],
      },
      CreateEventWithGroupsDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          duration: {
            type: 'number',
          },
          eventType: {
            type: 'string',
            enum: ['exam', 'quiz', 'assignment', 'lab_assignment', 'project', 'presentation', 'workshop', 'practice', 'seminar'],
            default: 'assignment',
          },
          locationType: {
            type: 'string',
            enum: ['lab_devices', 'lecture_hall', 'online', 'hybrid'],
            default: 'online',
          },
          customLocation: {
            type: 'string',
            description: 'Custom location when not using lab devices',
          },
          hasMarks: {
            type: 'boolean',
          },
          totalMarks: {
            type: 'number',
          },
          autoStart: {
            type: 'boolean',
            default: false,
          },
          requiresModels: {
            type: 'boolean',
            default: false,
            description: 'Whether this event requires exam models',
          },
          isExam: {
            type: 'boolean',
            default: false,
            description: 'Whether this event should be treated as an exam',
          },
          examModeStartMinutes: {
            type: 'number',
            default: 30,
          },
          startDateTime: {
            format: 'date-time',
            type: 'string',
            description: 'When the event should start',
          },
          courseId: {
            type: 'string',
          },
          proposedGroups: {
            description: 'Proposed groups for the event',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ProposedGroupSimpleDto',
            },
          },
          examModels: {
            description: 'Exam models for the event (only for exams)',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ExamModelForEventDto',
            },
          },
          groupModelAssignments: {
            description: 'Model assignments to groups (only for exams)',
            type: 'array',
            items: {
              $ref: '#/components/schemas/GroupModelAssignmentDto',
            },
          },
        },
        required: [
          'name',
          'duration',
          'eventType',
          'locationType',
          'hasMarks',
          'autoStart',
          'requiresModels',
          'isExam',
          'examModeStartMinutes',
          'courseId',
          'proposedGroups',
        ],
      },
      Event: {
        type: 'object',
        properties: {},
      },
      UploadedFileDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          originalName: {
            type: 'string',
          },
          size: {
            type: 'number',
          },
          mimeType: {
            type: 'string',
          },
        },
        required: ['id', 'originalName', 'size', 'mimeType'],
      },
      UploadExamModelFilesResponseDto: {
        type: 'object',
        properties: {
          uploadedFiles: {
            description: 'Array of uploaded file information',
            type: 'array',
            items: {
              $ref: '#/components/schemas/UploadedFileDto',
            },
          },
        },
        required: ['uploadedFiles'],
      },
      MoveStudentBetweenGroupsDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
          },
          fromCourseGroupId: {
            type: 'string',
          },
          toCourseGroupId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
        },
        required: ['studentId', 'fromCourseGroupId', 'toCourseGroupId', 'courseId'],
      },
      EventMarkDto: {
        type: 'object',
        properties: {
          eventId: {
            type: 'string',
          },
          eventName: {
            type: 'string',
          },
          eventScheduleId: {
            type: 'string',
          },
          mark: {
            type: 'number',
          },
          totalMarks: {
            type: 'number',
          },
          percentage: {
            type: 'number',
          },
          hasAttended: {
            type: 'boolean',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['eventId', 'eventName', 'eventScheduleId', 'mark', 'totalMarks', 'percentage', 'hasAttended', 'dateTime'],
      },
      StudentGradesSummaryDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
          },
          studentName: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          seatNo: {
            type: 'string',
          },
          totalMarks: {
            type: 'number',
          },
          earnedMarks: {
            type: 'number',
          },
          percentage: {
            type: 'number',
          },
          eventMarks: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/EventMarkDto',
            },
          },
        },
        required: ['studentId', 'studentName', 'username', 'seatNo', 'totalMarks', 'earnedMarks', 'percentage', 'eventMarks'],
      },
      CreateCourseGroupDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          order: {
            type: 'number',
            description: 'Order will be auto-calculated if not provided',
          },
          labId: {
            type: 'string',
            description: 'Lab ID - can be null if no lab assigned',
          },
          isDefault: {
            type: 'boolean',
          },
          capacity: {
            type: 'number',
          },
        },
        required: ['courseId'],
      },
      CourseGroupDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          order: {
            type: 'number',
          },
          labId: {
            type: 'string',
          },
          isDefault: {
            type: 'boolean',
          },
          capacity: {
            type: 'number',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['id', 'courseId', 'order', 'labId', 'isDefault', 'capacity', 'created_at', 'updated_at'],
      },
      CourseGroupListDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          order: {
            type: 'number',
          },
          labId: {
            type: 'string',
          },
          isDefault: {
            type: 'boolean',
          },
          capacity: {
            type: 'number',
          },
          courseName: {
            type: 'string',
          },
          labName: {
            type: 'string',
          },
          currentEnrollment: {
            type: 'number',
          },
        },
        required: ['id', 'courseId', 'order', 'labId', 'isDefault', 'capacity', 'courseName', 'labName', 'currentEnrollment'],
      },
      CourseGroupPagedDto: {
        type: 'object',
        properties: {
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CourseGroupListDto',
            },
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      CourseGroupScheduleTableDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          groupName: {
            type: 'string',
            description: 'Group name like "Group A", "Group B"',
          },
          labName: {
            type: 'string',
            description: 'Lab name and location',
          },
          weekDay: {
            type: 'string',
            description: 'Day of the week',
          },
          timeSlot: {
            type: 'string',
            description: 'Time range for the lab session',
          },
          teachingAssistants: {
            description: 'List of teaching assistant names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          currentEnrollment: {
            type: 'number',
            description: 'Current enrollment count',
          },
          totalCapacity: {
            type: 'number',
            description: 'Total capacity of the group',
          },
          labId: {
            type: 'string',
            description: 'Lab ID for filtering',
          },
          courseId: {
            type: 'string',
            description: 'Course ID for reference',
          },
          isDefault: {
            type: 'boolean',
            description: 'Whether this is the default group',
          },
        },
        required: [
          'id',
          'groupName',
          'labName',
          'weekDay',
          'timeSlot',
          'teachingAssistants',
          'currentEnrollment',
          'totalCapacity',
          'labId',
          'courseId',
          'isDefault',
        ],
      },
      CourseGroupScheduleTablePagedDto: {
        type: 'object',
        properties: {
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CourseGroupScheduleTableDto',
            },
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      CreateCourseGroupScheduleDto: {
        type: 'object',
        properties: {
          courseGroupId: {
            type: 'string',
          },
          assistantId: {
            type: 'string',
          },
          weekDay: {
            type: 'string',
          },
          startTime: {
            type: 'string',
            description: 'Start time in HH:MM format',
          },
          endTime: {
            type: 'string',
            description: 'End time in HH:MM format',
          },
        },
        required: ['courseGroupId', 'assistantId', 'weekDay', 'startTime', 'endTime'],
      },
      UpdateCourseGroupScheduleDto: {
        type: 'object',
        properties: {
          courseGroupId: {
            type: 'string',
          },
          assistantId: {
            type: 'string',
          },
          weekDay: {
            type: 'string',
          },
          startTime: {
            type: 'string',
            description: 'Start time in HH:MM format',
          },
          endTime: {
            type: 'string',
            description: 'End time in HH:MM format',
          },
        },
      },
      LabCapacityDto: {
        type: 'object',
        properties: {
          availableDevices: {
            type: 'number',
            description: 'Number of available devices that meet course requirements',
          },
          totalDevices: {
            type: 'number',
            description: 'Total number of devices in the lab',
          },
          requiredSoftware: {
            description: 'List of software required by the course',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['availableDevices', 'totalDevices', 'requiredSoftware'],
      },
      UpdateCourseGroupDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          order: {
            type: 'number',
            description: 'Order will be auto-calculated if not provided',
          },
          labId: {
            type: 'string',
            description: 'Lab ID - can be null if no lab assigned',
          },
          isDefault: {
            type: 'boolean',
          },
          capacity: {
            type: 'number',
          },
        },
      },
      ExamModelDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Exam model ID',
          },
          name: {
            type: 'string',
            description: 'Name of the exam model',
          },
          version: {
            type: 'string',
            description: 'Version of the exam model (A, B, C, D...)',
          },
          description: {
            type: 'string',
            description: 'Description of the exam model',
          },
          assignedStudentCount: {
            type: 'number',
            description: 'Number of students assigned to this model',
          },
          isActive: {
            type: 'boolean',
            description: 'Whether the model is active',
          },
          eventId: {
            type: 'string',
            description: 'Event ID',
          },
          files: {
            type: 'array',
            description: 'Array of file information',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Creation date',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Last update date',
          },
        },
        required: ['id', 'name', 'version', 'assignedStudentCount', 'isActive', 'eventId', 'files', 'created_at', 'updated_at'],
      },
      ModelAssignmentRequest: {
        type: 'object',
        properties: {
          examModelId: {
            type: 'string',
            description: 'Exam model ID',
          },
          studentIds: {
            description: 'Array of student IDs',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['examModelId', 'studentIds'],
      },
      AssignExamModelsRequest: {
        type: 'object',
        properties: {
          eventId: {
            type: 'string',
            description: 'Event ID',
          },
          assignments: {
            description: 'Model assignments',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ModelAssignmentRequest',
            },
          },
        },
        required: ['eventId', 'assignments'],
      },
      StudentsFiles: {
        type: 'object',
        properties: {},
      },
      CreateLoginHistoryDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          userId: {
            type: 'string',
            description: 'User ID',
          },
          ipAddress: {
            type: 'string',
            description: 'IP Address',
          },
          loginStatus: {
            type: 'string',
            enum: ['SUCCESS', 'FAILED', 'LOGOUT'],
            description: 'Login status',
          },
          loginTime: {
            format: 'date-time',
            type: 'string',
            description: 'Login time',
          },
          logoutTime: {
            format: 'date-time',
            type: 'string',
            description: 'Logout time',
          },
          sessionDuration: {
            type: 'number',
            description: 'Session duration in minutes',
          },
          userAgent: {
            type: 'string',
            description: 'User agent',
          },
          operatingSystem: {
            type: 'string',
            description: 'Operating system',
          },
          browser: {
            type: 'string',
            description: 'Browser',
          },
          failureReason: {
            type: 'string',
            description: 'Failure reason',
          },
        },
        required: ['deviceId', 'userId', 'ipAddress', 'loginStatus', 'loginTime'],
      },
      LoginHistoryDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          userId: {
            type: 'string',
            description: 'User ID',
          },
          ipAddress: {
            type: 'string',
            description: 'IP Address',
          },
          loginStatus: {
            type: 'string',
            enum: ['SUCCESS', 'FAILED', 'LOGOUT'],
            description: 'Login status',
          },
          loginTime: {
            format: 'date-time',
            type: 'string',
            description: 'Login time',
          },
          logoutTime: {
            format: 'date-time',
            type: 'string',
            description: 'Logout time',
          },
          sessionDuration: {
            type: 'number',
            description: 'Session duration in minutes',
          },
          userAgent: {
            type: 'string',
            description: 'User agent',
          },
          operatingSystem: {
            type: 'string',
            description: 'Operating system',
          },
          browser: {
            type: 'string',
            description: 'Browser',
          },
          failureReason: {
            type: 'string',
            description: 'Failure reason',
          },
          id: {
            type: 'string',
            description: 'Login history ID',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Created at',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Updated at',
          },
          deviceName: {
            type: 'string',
            description: 'Device name',
          },
          userName: {
            type: 'string',
            description: 'User name',
          },
        },
        required: ['deviceId', 'userId', 'ipAddress', 'loginStatus', 'loginTime', 'id', 'created_at', 'updated_at'],
      },
      UserAssignPrivilegeDto: {
        type: 'object',
        properties: {
          privilegeCode: {
            allOf: [
              {
                $ref: '#/components/schemas/PrivilegeCode',
              },
            ],
          },
          resourceIds: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
          userId: {
            type: 'string',
          },
        },
        required: ['privilegeCode', 'userId'],
      },
      UserTypeAssignPrivilegeDto: {
        type: 'object',
        properties: {
          privilegeCode: {
            allOf: [
              {
                $ref: '#/components/schemas/PrivilegeCode',
              },
            ],
          },
          resourceIds: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
          userTypeId: {
            type: 'string',
          },
        },
        required: ['privilegeCode', 'userTypeId'],
      },
      CreateLabDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          location: {
            type: 'string',
          },
          supervisorId: {
            type: 'string',
          },
        },
        required: ['name', 'location', 'supervisorId'],
      },
      UserDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
            description: 'Username has to be 4 letters or more',
          },
          userTypeId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['name', 'username', 'userTypeId', 'id'],
      },
      LabDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          location: {
            type: 'string',
          },
          supervisorId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          createdAt: {
            format: 'date-time',
            type: 'string',
          },
          updatedAt: {
            format: 'date-time',
            type: 'string',
          },
          deviceCount: {
            type: 'number',
          },
          supervisor: {
            $ref: '#/components/schemas/UserDto',
          },
        },
        required: ['name', 'location', 'supervisorId', 'id', 'createdAt', 'updatedAt', 'deviceCount', 'supervisor'],
      },
      LabListDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          location: {
            type: 'string',
          },
          supervisorId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          createdAt: {
            format: 'date-time',
            type: 'string',
          },
          updatedAt: {
            format: 'date-time',
            type: 'string',
          },
          deviceCount: {
            type: 'number',
          },
          supervisor: {
            $ref: '#/components/schemas/UserDto',
          },
          status: {
            type: 'string',
            enum: ['Available', 'In Use', 'Under Maintenance'],
          },
        },
        required: ['name', 'location', 'supervisorId', 'id', 'createdAt', 'updatedAt', 'deviceCount', 'supervisor', 'status'],
      },
      LabPagedDto: {
        type: 'object',
        properties: {
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/LabListDto',
            },
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      UpdateLabDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          location: {
            type: 'string',
          },
          supervisorId: {
            type: 'string',
          },
        },
      },
      EventGroupDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Event group ID',
          },
          eventId: {
            type: 'string',
            description: 'Event ID',
          },
          eventName: {
            type: 'string',
            description: 'Event name',
          },
          labName: {
            type: 'string',
            description: 'Lab name',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
            description: 'Date and time of the event',
          },
          maxStudents: {
            type: 'number',
            description: 'Maximum number of students',
          },
          enrolledStudents: {
            type: 'number',
            description: 'Number of enrolled students',
          },
          autoStart: {
            type: 'boolean',
            description: 'Whether auto-start is enabled',
          },
          status: {
            type: 'string',
            description: 'Current status of the event group',
          },
          actualStartTime: {
            format: 'date-time',
            type: 'string',
            description: 'Actual start time',
          },
          actualEndTime: {
            format: 'date-time',
            type: 'string',
            description: 'Actual end time',
          },
          examModeStartTime: {
            format: 'date-time',
            type: 'string',
            description: 'Exam mode start time',
          },
        },
        required: ['id', 'eventId', 'eventName', 'labName', 'dateTime', 'maxStudents', 'enrolledStudents', 'autoStart', 'status'],
      },
      EventGroupStudentDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
            description: 'Student ID',
          },
          studentName: {
            type: 'string',
            description: 'Student name',
          },
          username: {
            type: 'string',
            description: 'Student username',
          },
          seatNo: {
            type: 'string',
            description: 'Seat number',
          },
          hasAttended: {
            type: 'boolean',
            description: 'Whether student has attended',
          },
          isInExamMode: {
            type: 'boolean',
            description: 'Whether student is in exam mode',
          },
          examModeEnteredAt: {
            format: 'date-time',
            type: 'string',
            description: 'When student entered exam mode',
          },
          examStartedAt: {
            format: 'date-time',
            type: 'string',
            description: 'When exam started for student',
          },
          mark: {
            type: 'number',
            description: 'Student mark',
          },
          submittedAt: {
            format: 'date-time',
            type: 'string',
            description: 'When student submitted',
          },
          assignedExamModelUrl: {
            type: 'string',
            description: 'Assigned exam model URL',
          },
        },
        required: ['studentId', 'studentName', 'username', 'isInExamMode'],
      },
      CreateCourseDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          creditHours: {
            type: 'number',
          },
          subjectCode: {
            type: 'string',
          },
          courseNumber: {
            type: 'number',
          },
          hasLab: {
            type: 'boolean',
          },
          labDuration: {
            type: 'string',
          },
          attendanceMarks: {
            type: 'number',
          },
          doctorIds: {
            description: 'Array of doctor IDs to assign to this course',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          softwareIds: {
            description: 'Array of software IDs required for this course',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['name', 'creditHours', 'subjectCode', 'courseNumber', 'hasLab', 'labDuration', 'attendanceMarks'],
      },
      CourseDetailDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          creditHours: {
            type: 'number',
          },
          subjectCode: {
            type: 'string',
          },
          courseNumber: {
            type: 'number',
          },
          hasLab: {
            type: 'boolean',
          },
          labDuration: {
            type: 'string',
          },
          attendanceMarks: {
            type: 'number',
          },
          id: {
            type: 'string',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
          courseCode: {
            type: 'string',
            description: 'Course code (subjectCode + courseNumber)',
          },
          courseType: {
            type: 'string',
            description: 'Course type based on hasLab field',
          },
          assignedDoctors: {
            description: 'List of assigned doctor names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          requiredSoftware: {
            description: 'List of required software names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          numberOfStudents: {
            type: 'number',
            description: 'Total number of enrolled students',
          },
          hasDefaultGroup: {
            type: 'boolean',
            description: 'Indicates if course has default group created',
          },
        },
        required: [
          'name',
          'creditHours',
          'subjectCode',
          'courseNumber',
          'hasLab',
          'labDuration',
          'attendanceMarks',
          'id',
          'created_at',
          'updated_at',
          'courseCode',
          'courseType',
          'assignedDoctors',
          'requiredSoftware',
          'numberOfStudents',
          'hasDefaultGroup',
        ],
      },
      CourseListDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          creditHours: {
            type: 'number',
          },
          subjectCode: {
            type: 'string',
          },
          courseNumber: {
            type: 'number',
          },
          hasLab: {
            type: 'boolean',
          },
          labDuration: {
            type: 'string',
          },
          attendanceMarks: {
            type: 'number',
          },
          id: {
            type: 'string',
          },
          courseCode: {
            type: 'string',
            description: 'Course code (subjectCode + courseNumber)',
          },
          courseType: {
            type: 'string',
            description: 'Course type based on hasLab field',
          },
          assignedDoctors: {
            description: 'List of assigned doctor names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          requiredSoftware: {
            description: 'List of required software names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          numberOfStudents: {
            type: 'number',
            description: 'Total number of enrolled students',
          },
          hasDefaultGroup: {
            type: 'boolean',
            description: 'Indicates if course has default group created',
          },
        },
        required: [
          'name',
          'creditHours',
          'subjectCode',
          'courseNumber',
          'hasLab',
          'labDuration',
          'attendanceMarks',
          'id',
          'courseCode',
          'courseType',
          'assignedDoctors',
          'requiredSoftware',
          'numberOfStudents',
          'hasDefaultGroup',
        ],
      },
      CoursePagedDto: {
        type: 'object',
        properties: {
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CourseListDto',
            },
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      UpdateCourseDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          creditHours: {
            type: 'number',
          },
          subjectCode: {
            type: 'string',
          },
          courseNumber: {
            type: 'number',
          },
          hasLab: {
            type: 'boolean',
          },
          labDuration: {
            type: 'string',
          },
          attendanceMarks: {
            type: 'number',
          },
          doctorIds: {
            description: 'Array of doctor IDs to assign to this course',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          softwareIds: {
            description: 'Array of software IDs required for this course',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
      },
      CreateEventScheduleDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          examFiles: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
        },
        required: ['labId', 'dateTime', 'examFiles', 'assisstantId'],
      },
      EventScheduleDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          examFiles: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['labId', 'dateTime', 'examFiles', 'assisstantId', 'id'],
      },
      EventScheduleListDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          examFiles: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['labId', 'dateTime', 'examFiles', 'assisstantId', 'id'],
      },
      EventSchedulePagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/EventScheduleDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      UpdateEventScheduleDto: {
        type: 'object',
        properties: {
          labId: {
            type: 'string',
          },
          dateTime: {
            format: 'date-time',
            type: 'string',
          },
          examFiles: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
        },
      },
      CreateSoftwareDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          requiredMemory: {
            type: 'string',
          },
          requiredStorage: {
            type: 'string',
          },
        },
        required: ['name', 'requiredMemory', 'requiredStorage'],
      },
      SoftwareDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          requiredMemory: {
            type: 'string',
          },
          requiredStorage: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['name', 'requiredMemory', 'requiredStorage', 'id'],
      },
      SoftwareListDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          requiredMemory: {
            type: 'string',
          },
          requiredStorage: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['name', 'requiredMemory', 'requiredStorage', 'id'],
      },
      SoftwarePagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/SoftwareDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      UpdateSoftwareDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          requiredMemory: {
            type: 'string',
          },
          requiredStorage: {
            type: 'string',
          },
        },
      },
      DeviceSpecificationDto: {
        type: 'object',
        properties: {
          category: {
            type: 'string',
          },
          value: {
            type: 'string',
          },
        },
        required: ['category', 'value'],
      },
      CreateDeviceDto: {
        type: 'object',
        properties: {
          IPAddress: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          labId: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          specifications: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSpecificationDto',
            },
          },
        },
        required: ['IPAddress', 'name', 'labId', 'assisstantId'],
      },
      DeviceDto: {
        type: 'object',
        properties: {
          IPAddress: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          labId: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          addedSince: {
            format: 'date-time',
            type: 'string',
          },
          status: {
            type: 'string',
          },
          specDetails: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSpecificationDto',
            },
          },
        },
        required: ['IPAddress', 'name', 'labId', 'assisstantId', 'id', 'addedSince', 'status', 'specDetails'],
      },
      DeviceListDto: {
        type: 'object',
        properties: {
          IPAddress: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          labId: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          addedSince: {
            format: 'date-time',
            type: 'string',
          },
          status: {
            type: 'string',
          },
          specDetails: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSpecificationDto',
            },
          },
          labAssistant: {
            type: 'string',
          },
          labName: {
            type: 'string',
          },
          totalReports: {
            type: 'number',
            description: 'Total number of reports for this device',
          },
          openReports: {
            type: 'number',
            description: 'Number of non-closed (open) reports for this device',
          },
        },
        required: [
          'IPAddress',
          'name',
          'labId',
          'assisstantId',
          'id',
          'addedSince',
          'status',
          'specDetails',
          'labAssistant',
          'labName',
          'totalReports',
          'openReports',
        ],
      },
      DevicePagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/DeviceListDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      DeviceSoftwareDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          hasIssue: {
            type: 'boolean',
          },
          issueDescription: {
            type: 'string',
          },
        },
        required: ['id', 'name', 'hasIssue'],
      },
      DeviceDetailsDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          IPAddress: {
            type: 'string',
          },
          hasIssue: {
            type: 'boolean',
          },
          status: {
            type: 'string',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
          labId: {
            type: 'string',
          },
          labName: {
            type: 'string',
          },
          labLocation: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          assistantName: {
            type: 'string',
          },
          assistantEmail: {
            type: 'string',
          },
          specifications: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSpecificationDto',
            },
          },
          installedSoftware: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSoftwareDto',
            },
          },
          totalReports: {
            type: 'number',
          },
          totalMaintenanceRecords: {
            type: 'number',
          },
          totalLoginSessions: {
            type: 'number',
          },
          lastLoginDate: {
            format: 'date-time',
            type: 'string',
          },
          lastMaintenanceDate: {
            format: 'date-time',
            type: 'string',
          },
          lastReportDate: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: [
          'id',
          'name',
          'IPAddress',
          'hasIssue',
          'status',
          'created_at',
          'updated_at',
          'labId',
          'labName',
          'labLocation',
          'assisstantId',
          'assistantName',
          'assistantEmail',
          'specifications',
          'installedSoftware',
          'totalReports',
          'totalMaintenanceRecords',
          'totalLoginSessions',
          'lastLoginDate',
          'lastMaintenanceDate',
          'lastReportDate',
        ],
      },
      UpdateDeviceDto: {
        type: 'object',
        properties: {
          IPAddress: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          labId: {
            type: 'string',
          },
          assisstantId: {
            type: 'string',
          },
          specifications: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSpecificationDto',
            },
          },
        },
      },
      DeviceSoftwareListDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          hasIssue: {
            type: 'boolean',
          },
        },
        required: ['id', 'name', 'hasIssue'],
      },
      DeviceSoftwarePagedDto: {
        type: 'object',
        properties: {
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/DeviceSoftwareListDto',
            },
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      AddDeviceSoftwareDto: {
        type: 'object',
        properties: {
          softwareId: {
            type: 'string',
          },
          hasIssue: {
            type: 'boolean',
            description: 'Whether the software has issues',
          },
          issueDescription: {
            type: 'string',
            description: 'Description of any issues',
          },
        },
        required: ['softwareId'],
      },
      UpdateDeviceSoftwareDto: {
        type: 'object',
        properties: {
          hasIssue: {
            type: 'boolean',
            description: 'Whether the software has issues',
          },
          issueDescription: {
            type: 'string',
            description: 'Description of any issues',
          },
        },
      },
      UpdateDeviceSoftwareListDto: {
        type: 'object',
        properties: {
          softwareIds: {
            description: 'Array of software IDs to install on the device',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['softwareIds'],
      },
      MaintenanceUpdateDto: {
        type: 'object',
        properties: {
          status: {
            type: 'string',
            enum: ['available', 'not available'],
            description: 'Device availability status',
          },
          description: {
            type: 'string',
            description: 'Maintenance description',
          },
          resolutionNotes: {
            type: 'string',
            description: 'Resolution notes',
          },
          involvedPersonnel: {
            type: 'string',
            description: 'Involved personnel',
          },
        },
        required: ['status'],
      },
      CreateMaintenanceHistoryDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          relatedReportId: {
            type: 'string',
            description: 'Related report ID',
          },
          maintenanceType: {
            type: 'string',
            enum: ['HARDWARE_REPAIR', 'SOFTWARE_UPDATE', 'CLEANING', 'REPLACEMENT', 'INSPECTION', 'CALIBRATION', 'OTHER', 'USER_REPORT'],
            description: 'Type of maintenance',
          },
          status: {
            type: 'string',
            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FAILED'],
            description: 'Maintenance status',
            default: 'SCHEDULED',
          },
          description: {
            type: 'string',
            description: 'Maintenance description',
          },
          resolutionNotes: {
            type: 'string',
            description: 'Resolution notes',
          },
          completedAt: {
            format: 'date-time',
            type: 'string',
            description: 'Completion date',
          },
          involvedPersonnel: {
            type: 'string',
            description: 'Involved personnel names',
          },
          softwareId: {
            type: 'string',
            description: 'Software ID for software-related maintenance',
          },
          softwareHasIssue: {
            type: 'boolean',
            description: 'Software status after maintenance (true = has issue, false = no issue)',
          },
          deviceHasIssue: {
            type: 'boolean',
            description: 'Device status after maintenance (true = has issue, false = no issue)',
          },
        },
        required: ['deviceId', 'maintenanceType', 'status', 'description'],
      },
      MaintenanceHistoryDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          relatedReportId: {
            type: 'string',
            description: 'Related report ID',
          },
          maintenanceType: {
            type: 'string',
            enum: ['HARDWARE_REPAIR', 'SOFTWARE_UPDATE', 'CLEANING', 'REPLACEMENT', 'INSPECTION', 'CALIBRATION', 'OTHER', 'USER_REPORT'],
            description: 'Type of maintenance',
          },
          status: {
            type: 'string',
            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FAILED'],
            description: 'Maintenance status',
            default: 'SCHEDULED',
          },
          description: {
            type: 'string',
            description: 'Maintenance description',
          },
          resolutionNotes: {
            type: 'string',
            description: 'Resolution notes',
          },
          completedAt: {
            format: 'date-time',
            type: 'string',
            description: 'Completion date',
          },
          involvedPersonnel: {
            type: 'string',
            description: 'Involved personnel names',
          },
          softwareId: {
            type: 'string',
            description: 'Software ID for software-related maintenance',
          },
          softwareHasIssue: {
            type: 'boolean',
            description: 'Software status after maintenance (true = has issue, false = no issue)',
          },
          deviceHasIssue: {
            type: 'boolean',
            description: 'Device status after maintenance (true = has issue, false = no issue)',
          },
          id: {
            type: 'string',
            description: 'Maintenance history ID',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Created at',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Updated at',
          },
          deviceName: {
            type: 'string',
            description: 'Device name',
          },
          relatedReportDescription: {
            type: 'string',
            description: 'Related report description',
          },
        },
        required: ['deviceId', 'maintenanceType', 'status', 'description', 'id', 'created_at', 'updated_at'],
      },
      MaintenanceHistoryListDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          relatedReportId: {
            type: 'string',
            description: 'Related report ID',
          },
          maintenanceType: {
            type: 'string',
            enum: ['HARDWARE_REPAIR', 'SOFTWARE_UPDATE', 'CLEANING', 'REPLACEMENT', 'INSPECTION', 'CALIBRATION', 'OTHER', 'USER_REPORT'],
            description: 'Type of maintenance',
          },
          status: {
            type: 'string',
            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FAILED'],
            description: 'Maintenance status',
            default: 'SCHEDULED',
          },
          description: {
            type: 'string',
            description: 'Maintenance description',
          },
          resolutionNotes: {
            type: 'string',
            description: 'Resolution notes',
          },
          completedAt: {
            format: 'date-time',
            type: 'string',
            description: 'Completion date',
          },
          involvedPersonnel: {
            type: 'string',
            description: 'Involved personnel names',
          },
          softwareId: {
            type: 'string',
            description: 'Software ID for software-related maintenance',
          },
          softwareHasIssue: {
            type: 'boolean',
            description: 'Software status after maintenance (true = has issue, false = no issue)',
          },
          deviceHasIssue: {
            type: 'boolean',
            description: 'Device status after maintenance (true = has issue, false = no issue)',
          },
          id: {
            type: 'string',
            description: 'Maintenance history ID',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Created at',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Updated at',
          },
          deviceName: {
            type: 'string',
            description: 'Device name',
          },
          relatedReportDescription: {
            type: 'string',
            description: 'Related report description',
          },
        },
        required: ['deviceId', 'maintenanceType', 'status', 'description', 'id', 'created_at', 'updated_at'],
      },
      UpdateMaintenanceHistoryDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          relatedReportId: {
            type: 'string',
            description: 'Related report ID',
          },
          maintenanceType: {
            type: 'string',
            enum: ['HARDWARE_REPAIR', 'SOFTWARE_UPDATE', 'CLEANING', 'REPLACEMENT', 'INSPECTION', 'CALIBRATION', 'OTHER', 'USER_REPORT'],
            description: 'Type of maintenance',
          },
          status: {
            type: 'string',
            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FAILED'],
            description: 'Maintenance status',
            default: 'SCHEDULED',
          },
          description: {
            type: 'string',
            description: 'Maintenance description',
          },
          resolutionNotes: {
            type: 'string',
            description: 'Resolution notes',
          },
          completedAt: {
            format: 'date-time',
            type: 'string',
            description: 'Completion date',
          },
          involvedPersonnel: {
            type: 'string',
            description: 'Involved personnel names',
          },
          softwareId: {
            type: 'string',
            description: 'Software ID for software-related maintenance',
          },
          softwareHasIssue: {
            type: 'boolean',
            description: 'Software status after maintenance (true = has issue, false = no issue)',
          },
          deviceHasIssue: {
            type: 'boolean',
            description: 'Device status after maintenance (true = has issue, false = no issue)',
          },
        },
      },
      CreateDeviceReportDto: {
        type: 'object',
        properties: {
          description: {
            type: 'string',
            description: 'Report description',
          },
          fixMessage: {
            type: 'string',
            description: 'Fix message',
          },
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          appId: {
            type: 'string',
            description: 'Software/App ID',
          },
          reporterId: {
            type: 'string',
            description: 'Reporter ID',
          },
        },
        required: ['description', 'deviceId'],
      },
      ReportMaintenanceHistoryDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Maintenance history ID',
          },
          maintenanceType: {
            type: 'string',
            description: 'Maintenance type',
          },
          status: {
            type: 'string',
            description: 'Maintenance status',
          },
          description: {
            type: 'string',
            description: 'Maintenance description',
          },
          resolutionNotes: {
            type: 'string',
            description: 'Resolution notes',
          },
          involvedPersonnel: {
            type: 'string',
            description: 'Involved personnel',
          },
          completedAt: {
            format: 'date-time',
            type: 'string',
            description: 'Completed at',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Created at',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Updated at',
          },
        },
        required: ['id', 'maintenanceType', 'status', 'description', 'created_at', 'updated_at'],
      },
      DeviceReportDto: {
        type: 'object',
        properties: {
          description: {
            type: 'string',
            description: 'Report description',
          },
          fixMessage: {
            type: 'string',
            description: 'Fix message',
          },
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          appId: {
            type: 'string',
            description: 'Software/App ID',
          },
          reporterId: {
            type: 'string',
            description: 'Reporter ID',
          },
          id: {
            type: 'string',
            description: 'Report ID',
          },
          status: {
            type: 'string',
            enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
            description: 'Report status',
            default: 'PENDING_REVIEW',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Created at',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Updated at',
          },
          deviceName: {
            type: 'string',
            description: 'Device name',
          },
          softwareName: {
            type: 'string',
            description: 'Software name',
          },
          reporterName: {
            type: 'string',
            description: 'Reporter name',
          },
          resolutionUpdates: {
            description: 'Resolution updates/maintenance history',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ReportMaintenanceHistoryDto',
            },
          },
        },
        required: ['description', 'deviceId', 'id', 'status', 'created_at', 'updated_at'],
      },
      DeviceReportListDto: {
        type: 'object',
        properties: {
          description: {
            type: 'string',
            description: 'Report description',
          },
          fixMessage: {
            type: 'string',
            description: 'Fix message',
          },
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          appId: {
            type: 'string',
            description: 'Software/App ID',
          },
          reporterId: {
            type: 'string',
            description: 'Reporter ID',
          },
          id: {
            type: 'string',
            description: 'Report ID',
          },
          status: {
            type: 'string',
            enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
            description: 'Report status',
            default: 'PENDING_REVIEW',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
            description: 'Created at',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
            description: 'Updated at',
          },
          deviceName: {
            type: 'string',
            description: 'Device name',
          },
          softwareName: {
            type: 'string',
            description: 'Software name',
          },
          reporterName: {
            type: 'string',
            description: 'Reporter name',
          },
          resolutionUpdates: {
            description: 'Resolution updates/maintenance history',
            type: 'array',
            items: {
              $ref: '#/components/schemas/ReportMaintenanceHistoryDto',
            },
          },
        },
        required: ['description', 'deviceId', 'id', 'status', 'created_at', 'updated_at'],
      },
      UpdateDeviceReportDto: {
        type: 'object',
        properties: {
          description: {
            type: 'string',
            description: 'Report description',
          },
          fixMessage: {
            type: 'string',
            description: 'Fix message',
          },
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          appId: {
            type: 'string',
            description: 'Software/App ID',
          },
          reporterId: {
            type: 'string',
            description: 'Reporter ID',
          },
          status: {
            type: 'string',
            enum: ['PENDING_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED'],
            description: 'Report status',
            default: 'PENDING_REVIEW',
          },
        },
        required: ['status'],
      },
      CreateLabSessionDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
          date: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['courseId', 'groupNumber', 'date'],
      },
      LabSessionDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
          date: {
            format: 'date-time',
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['courseId', 'groupNumber', 'date', 'id'],
      },
      LabSessionListDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
          date: {
            format: 'date-time',
            type: 'string',
          },
          id: {
            type: 'string',
          },
        },
        required: ['courseId', 'groupNumber', 'date', 'id'],
      },
      LabSessionPagedDto: {
        type: 'object',
        properties: {
          items: {
            $ref: '#/components/schemas/LabSessionDto',
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      StartLabSessionDto: {
        type: 'object',
        properties: {
          courseGroupId: {
            type: 'string',
            description: 'Course Group ID for which to start the session',
          },
          sessionDateTime: {
            format: 'date-time',
            type: 'string',
            description: 'Session date and time',
          },
        },
        required: ['courseGroupId', 'sessionDateTime'],
      },
      SessionDeviceStatusDto: {
        type: 'object',
        properties: {
          deviceId: {
            type: 'string',
            description: 'Device ID',
          },
          deviceName: {
            type: 'string',
            description: 'Device name',
          },
          isActive: {
            type: 'boolean',
            description: 'Whether device is currently active/functional',
          },
          currentUser: {
            type: 'object',
            description: 'Student currently using the device (if any)',
          },
          loginTime: {
            format: 'date-time',
            type: 'string',
            description: 'Login time for current user',
          },
        },
        required: ['deviceId', 'deviceName', 'isActive', 'currentUser', 'loginTime'],
      },
      SessionStudentDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
            description: 'Student ID',
          },
          studentName: {
            type: 'string',
            description: 'Student name',
          },
          username: {
            type: 'string',
            description: 'Student username',
          },
          email: {
            type: 'string',
            description: 'Student email',
          },
          isPresent: {
            type: 'boolean',
            description: 'Whether student is currently present',
          },
          assignedDevice: {
            type: 'object',
            description: 'Device assigned to student (if any)',
          },
          attendancePoints: {
            type: 'number',
            description: 'Session attendance points',
          },
          extraPoints: {
            type: 'number',
            description: 'Extra points awarded',
          },
        },
        required: ['studentId', 'studentName', 'username', 'email', 'isPresent', 'assignedDevice', 'attendancePoints', 'extraPoints'],
      },
      ActiveSessionDetailsDto: {
        type: 'object',
        properties: {
          sessionId: {
            type: 'string',
            description: 'Session ID',
          },
          course: {
            type: 'object',
            description: 'Course information',
          },
          group: {
            type: 'object',
            description: 'Group information',
          },
          lab: {
            type: 'object',
            description: 'Lab information',
          },
          startTime: {
            format: 'date-time',
            type: 'string',
            description: 'Session start time',
          },
          expectedDuration: {
            type: 'number',
            description: 'Expected duration in minutes',
          },
          devices: {
            description: 'Device status list',
            type: 'array',
            items: {
              $ref: '#/components/schemas/SessionDeviceStatusDto',
            },
          },
          students: {
            description: 'Student list',
            type: 'array',
            items: {
              $ref: '#/components/schemas/SessionStudentDto',
            },
          },
        },
        required: ['sessionId', 'course', 'group', 'lab', 'startTime', 'expectedDuration', 'devices', 'students'],
      },
      TakeAttendanceDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
            description: 'Student ID',
          },
          isPresent: {
            type: 'boolean',
            description: 'Whether marking as present (true) or absent (false)',
          },
          absencePoints: {
            type: 'number',
            description: 'Points to deduct for absence (negative value)',
          },
        },
        required: ['studentId', 'isPresent'],
      },
      AddStudentToSessionDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
            description: 'Student ID to add to session',
          },
          markAsPresent: {
            type: 'boolean',
            description: 'Mark as present when adding',
          },
        },
        required: ['studentId'],
      },
      AwardExtraPointsDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
            description: 'Student ID',
          },
          extraPoints: {
            type: 'number',
            description: 'Extra points to award',
          },
          reason: {
            type: 'string',
            description: 'Reason for awarding points',
          },
        },
        required: ['studentId', 'extraPoints'],
      },
      UpdateLabSessionDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
          date: {
            format: 'date-time',
            type: 'string',
          },
        },
      },
      CreateStaffRequestDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          title: {
            type: 'string',
          },
          department: {
            type: 'string',
          },
          password: {
            type: 'string',
            example: 'Abcd@1234',
          },
          confirmPassword: {
            type: 'string',
            example: 'Abcd@1234',
          },
          idPhoto: {
            type: 'string',
            format: 'binary',
            description: 'ID photo (PNG, JPG, JPEG up to 10MB)',
          },
        },
        required: ['name', 'username', 'title', 'department', 'password', 'confirmPassword', 'idPhoto'],
      },
      StaffRequestDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          title: {
            type: 'string',
          },
          department: {
            type: 'string',
          },
          id: {
            type: 'string',
          },
          status: {
            type: 'string',
            enum: ['PENDING', 'APPROVED', 'REJECTED'],
          },
          rejectionReason: {
            type: 'string',
          },
          approvedById: {
            type: 'string',
          },
          approvedAt: {
            format: 'date-time',
            type: 'string',
          },
          createdAt: {
            format: 'date-time',
            type: 'string',
          },
          updatedAt: {
            format: 'date-time',
            type: 'string',
          },
          idPhotoUrl: {
            type: 'string',
            description: 'Presigned URL for accessing the ID photo',
          },
          userTypeId: {
            type: 'string',
          },
        },
        required: [
          'name',
          'username',
          'title',
          'department',
          'id',
          'status',
          'rejectionReason',
          'approvedById',
          'approvedAt',
          'createdAt',
          'updatedAt',
          'userTypeId',
        ],
      },
      StaffRequestPagedDto: {
        type: 'object',
        properties: {
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/StaffRequestDto',
            },
          },
          total: {
            type: 'number',
          },
        },
        required: ['items', 'total'],
      },
      ApproveStaffRequestDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            description: 'Name of the staff member',
          },
          username: {
            type: 'string',
            description: 'Username for the staff member',
          },
          title: {
            type: 'string',
            description: 'Title/Position of the staff member',
          },
          department: {
            type: 'string',
            description: 'Department of the staff member',
          },
          userTypeId: {
            type: 'string',
            description: 'User type ID to assign to the approved staff member',
          },
        },
        required: ['name', 'username', 'title', 'department', 'userTypeId'],
      },
      RejectStaffRequestDto: {
        type: 'object',
        properties: {
          reason: {
            type: 'string',
            description: 'Reason for rejecting the staff request',
          },
        },
        required: ['reason'],
      },
      EnrollStudentDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
        },
        required: ['studentId', 'courseId'],
      },
      StudentCourseDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          courseGroupId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['studentId', 'courseId', 'courseGroupId', 'groupNumber', 'created_at', 'updated_at'],
      },
      StudentCourseListDto: {
        type: 'object',
        properties: {
          studentId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          courseGroupId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
          studentName: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          email: {
            type: 'string',
          },
          courseName: {
            type: 'string',
          },
          courseCode: {
            type: 'string',
          },
          credits: {
            type: 'number',
          },
          enrolledDate: {
            format: 'date-time',
            type: 'string',
          },
          groupCapacity: {
            type: 'number',
          },
          groupOrder: {
            type: 'number',
          },
          groupName: {
            type: 'string',
          },
          courseType: {
            type: 'string',
            description: 'Course type based on hasLab field',
          },
          numberOfStudents: {
            type: 'number',
            description: 'Total number of enrolled students in course',
          },
          groupStudentsCount: {
            type: 'number',
            description: 'Number of students in the same group',
          },
          labName: {
            type: 'string',
            description: 'Lab name where the group is assigned',
          },
          labRoom: {
            type: 'string',
            description: 'Lab room/location',
          },
          assignedDoctors: {
            description: 'List of assigned doctor names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
          requiredSoftware: {
            description: 'List of required software names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: [
          'studentId',
          'courseId',
          'courseGroupId',
          'groupNumber',
          'studentName',
          'username',
          'email',
          'courseName',
          'courseCode',
          'credits',
          'enrolledDate',
          'groupCapacity',
          'groupOrder',
          'groupName',
          'courseType',
          'numberOfStudents',
          'groupStudentsCount',
          'labName',
          'labRoom',
          'assignedDoctors',
          'requiredSoftware',
        ],
      },
      StudentCoursePagedDto: {
        type: 'object',
        properties: {
          total: {
            type: 'number',
          },
          items: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/StudentCourseListDto',
            },
          },
        },
        required: ['total', 'items'],
      },
      StudentWeeklyScheduleDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
            description: 'Course ID',
          },
          courseName: {
            type: 'string',
            description: 'Course name',
          },
          courseCode: {
            type: 'string',
            description: 'Course code like "CS101"',
          },
          groupName: {
            type: 'string',
            description: 'Group name like "Group A"',
          },
          labName: {
            type: 'string',
            description: 'Lab name and location',
          },
          weekDay: {
            type: 'string',
            description: 'Day of the week',
          },
          startTime: {
            type: 'string',
            description: 'Start time in HH:MM format',
          },
          endTime: {
            type: 'string',
            description: 'End time in HH:MM format',
          },
          teachingAssistants: {
            description: 'Teaching assistant names',
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['courseId', 'courseName', 'courseCode', 'groupName', 'labName', 'weekDay', 'startTime', 'endTime', 'teachingAssistants'],
      },
      UpdateEnrollmentDto: {
        type: 'object',
        properties: {
          courseGroupId: {
            type: 'string',
          },
          groupNumber: {
            type: 'number',
          },
        },
      },
      AvailableCourseDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Course ID',
          },
          code: {
            type: 'string',
            description: 'Course code like "CS101"',
          },
          name: {
            type: 'string',
            description: 'Course name',
          },
          credits: {
            type: 'number',
            description: 'Credit hours',
          },
        },
        required: ['id', 'code', 'name', 'credits'],
      },
      CourseAccessPermissionDto: {
        type: 'object',
        properties: {
          userId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          section: {
            type: 'string',
            enum: ['grades', 'events', 'content', 'groups'],
          },
          canView: {
            type: 'boolean',
            default: false,
          },
          canEdit: {
            type: 'boolean',
            default: false,
          },
          canDelete: {
            type: 'boolean',
            default: false,
          },
          grantedBy: {
            type: 'string',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['userId', 'courseId', 'section', 'canView', 'canEdit', 'canDelete', 'created_at', 'updated_at'],
      },
      UserCourseAccessDto: {
        type: 'object',
        properties: {
          userId: {
            type: 'string',
          },
          userName: {
            type: 'string',
          },
          userEmail: {
            type: 'string',
          },
          permissions: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CourseAccessPermissionDto',
            },
          },
        },
        required: ['userId', 'userName', 'userEmail', 'permissions'],
      },
      CourseAccessSummaryDto: {
        type: 'object',
        properties: {
          courseId: {
            type: 'string',
          },
          courseName: {
            type: 'string',
          },
          courseCode: {
            type: 'string',
          },
          userAccess: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/UserCourseAccessDto',
            },
          },
        },
        required: ['courseId', 'courseName', 'courseCode', 'userAccess'],
      },
      AssistantListDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          email: {
            type: 'string',
          },
          username: {
            type: 'string',
          },
          hasAccess: {
            type: 'boolean',
            default: false,
          },
          permissions: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CourseAccessPermissionDto',
            },
          },
        },
        required: ['id', 'name', 'email', 'username', 'hasAccess', 'permissions'],
      },
      CreateCourseAccessDto: {
        type: 'object',
        properties: {
          userId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          section: {
            type: 'string',
            enum: ['grades', 'events', 'content', 'groups'],
          },
          canView: {
            type: 'boolean',
            default: false,
          },
          canEdit: {
            type: 'boolean',
            default: false,
          },
          canDelete: {
            type: 'boolean',
            default: false,
          },
        },
        required: ['userId', 'courseId', 'section', 'canView', 'canEdit', 'canDelete'],
      },
      UpdateCourseAccessDto: {
        type: 'object',
        properties: {
          canView: {
            type: 'boolean',
            default: false,
          },
          canEdit: {
            type: 'boolean',
            default: false,
          },
          canDelete: {
            type: 'boolean',
            default: false,
          },
        },
        required: ['canView', 'canEdit', 'canDelete'],
      },
      BulkUpdateCourseAccessDto: {
        type: 'object',
        properties: {
          permissions: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CreateCourseAccessDto',
            },
          },
        },
        required: ['permissions'],
      },
      GrantMultipleSectionsDto: {
        type: 'object',
        properties: {
          userId: {
            type: 'string',
          },
          courseId: {
            type: 'string',
          },
          sections: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/CreateCourseAccessDto',
            },
          },
        },
        required: ['userId', 'courseId', 'sections'],
      },
      MaterialListDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          attachments: {
            type: 'string',
          },
          isHidden: {
            type: 'boolean',
          },
          courseId: {
            type: 'string',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
          uploadedBy: {
            type: 'string',
          },
          fileSize: {
            type: 'string',
          },
          fileUrls: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
        },
        required: ['id', 'name', 'description', 'attachments', 'isHidden', 'courseId', 'created_at', 'updated_at', 'uploadedBy', 'fileSize', 'fileUrls'],
      },
      CreateMaterialDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            description: 'Material name',
          },
          description: {
            type: 'string',
            description: 'Material description',
          },
          isHidden: {
            type: 'boolean',
            description: 'Whether material is hidden from students',
            default: false,
          },
          files: {
            type: 'array',
            description: 'Files to upload',
            items: {
              type: 'string',
              format: 'binary',
            },
          },
        },
        required: ['name'],
      },
      MaterialDto: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          description: {
            type: 'string',
          },
          attachments: {
            type: 'string',
          },
          isHidden: {
            type: 'boolean',
          },
          courseId: {
            type: 'string',
          },
          created_at: {
            format: 'date-time',
            type: 'string',
          },
          updated_at: {
            format: 'date-time',
            type: 'string',
          },
        },
        required: ['id', 'name', 'description', 'attachments', 'isHidden', 'courseId', 'created_at', 'updated_at'],
      },
      UpdateMaterialDto: {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            description: 'Material name',
          },
          description: {
            type: 'string',
            description: 'Material description',
          },
          isHidden: {
            type: 'boolean',
            description: 'Whether material is hidden from students',
          },
        },
      },
    },
  },
  security: [
    {
      bearer: [],
    },
  ],
} as const

export type Oas = Infer<typeof oas>