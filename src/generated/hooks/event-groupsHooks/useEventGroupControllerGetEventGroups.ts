/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  EventGroupControllerGetEventGroupsQueryResponse,
  EventGroupControllerGetEventGroupsPathParams,
} from '../../types/event-groupsController/EventGroupControllerGetEventGroups.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const eventGroupControllerGetEventGroupsQueryKey = (eventId: EventGroupControllerGetEventGroupsPathParams['eventId']) =>
  [{ url: '/event-groups/event/:eventId', params: { eventId: eventId } }] as const

export type EventGroupControllerGetEventGroupsQueryKey = ReturnType<typeof eventGroupControllerGetEventGroupsQueryKey>

/**
 * @summary Get all event groups for a specific event
 * {@link /event-groups/event/:eventId}
 */
export async function eventGroupControllerGetEventGroups(
  eventId: EventGroupControllerGetEventGroupsPathParams['eventId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventGroupControllerGetEventGroupsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/event-groups/event/${eventId}`,
    ...requestConfig,
  })
  return res
}

export function eventGroupControllerGetEventGroupsQueryOptions(
  eventId: EventGroupControllerGetEventGroupsPathParams['eventId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventGroupControllerGetEventGroupsQueryKey(eventId)
  return queryOptions<
    ResponseConfig<EventGroupControllerGetEventGroupsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventGroupControllerGetEventGroupsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!eventId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventGroupControllerGetEventGroups(eventId, config)
    },
  })
}

/**
 * @summary Get all event groups for a specific event
 * {@link /event-groups/event/:eventId}
 */
export function useEventGroupControllerGetEventGroups<
  TData = ResponseConfig<EventGroupControllerGetEventGroupsQueryResponse>,
  TQueryData = ResponseConfig<EventGroupControllerGetEventGroupsQueryResponse>,
  TQueryKey extends QueryKey = EventGroupControllerGetEventGroupsQueryKey,
>(
  eventId: EventGroupControllerGetEventGroupsPathParams['eventId'],
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<EventGroupControllerGetEventGroupsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventGroupControllerGetEventGroupsQueryKey(eventId)

  const query = useQuery(
    {
      ...(eventGroupControllerGetEventGroupsQueryOptions(eventId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}