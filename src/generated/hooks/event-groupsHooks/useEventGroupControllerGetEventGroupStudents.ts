/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  EventGroupControllerGetEventGroupStudentsQueryResponse,
  EventGroupControllerGetEventGroupStudentsPathParams,
} from '../../types/event-groupsController/EventGroupControllerGetEventGroupStudents.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const eventGroupControllerGetEventGroupStudentsQueryKey = (groupId: EventGroupControllerGetEventGroupStudentsPathParams['groupId']) =>
  [{ url: '/event-groups/:groupId/students', params: { groupId: groupId } }] as const

export type EventGroupControllerGetEventGroupStudentsQueryKey = ReturnType<typeof eventGroupControllerGetEventGroupStudentsQueryKey>

/**
 * @summary Get students in a specific event group
 * {@link /event-groups/:groupId/students}
 */
export async function eventGroupControllerGetEventGroupStudents(
  groupId: EventGroupControllerGetEventGroupStudentsPathParams['groupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventGroupControllerGetEventGroupStudentsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/event-groups/${groupId}/students`,
    ...requestConfig,
  })
  return res
}

export function eventGroupControllerGetEventGroupStudentsQueryOptions(
  groupId: EventGroupControllerGetEventGroupStudentsPathParams['groupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventGroupControllerGetEventGroupStudentsQueryKey(groupId)
  return queryOptions<
    ResponseConfig<EventGroupControllerGetEventGroupStudentsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventGroupControllerGetEventGroupStudentsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!groupId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventGroupControllerGetEventGroupStudents(groupId, config)
    },
  })
}

/**
 * @summary Get students in a specific event group
 * {@link /event-groups/:groupId/students}
 */
export function useEventGroupControllerGetEventGroupStudents<
  TData = ResponseConfig<EventGroupControllerGetEventGroupStudentsQueryResponse>,
  TQueryData = ResponseConfig<EventGroupControllerGetEventGroupStudentsQueryResponse>,
  TQueryKey extends QueryKey = EventGroupControllerGetEventGroupStudentsQueryKey,
>(
  groupId: EventGroupControllerGetEventGroupStudentsPathParams['groupId'],
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<EventGroupControllerGetEventGroupStudentsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventGroupControllerGetEventGroupStudentsQueryKey(groupId)

  const query = useQuery(
    {
      ...(eventGroupControllerGetEventGroupStudentsQueryOptions(groupId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}