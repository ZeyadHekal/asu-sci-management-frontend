/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  StudentCourseControllerGetGroupStudentsQueryResponse,
  StudentCourseControllerGetGroupStudentsPathParams,
  StudentCourseControllerGetGroupStudents404,
} from '../../types/student-coursesController/StudentCourseControllerGetGroupStudents.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const studentCourseControllerGetGroupStudentsSuspenseQueryKey = (groupId: StudentCourseControllerGetGroupStudentsPathParams['groupId']) =>
  [{ url: '/student-courses/group/:groupId/students', params: { groupId: groupId } }] as const

export type StudentCourseControllerGetGroupStudentsSuspenseQueryKey = ReturnType<typeof studentCourseControllerGetGroupStudentsSuspenseQueryKey>

/**
 * @summary Get all students in a specific group with detailed information
 * {@link /student-courses/group/:groupId/students}
 */
export async function studentCourseControllerGetGroupStudentsSuspense(
  groupId: StudentCourseControllerGetGroupStudentsPathParams['groupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StudentCourseControllerGetGroupStudentsQueryResponse, ResponseErrorConfig<StudentCourseControllerGetGroupStudents404>, unknown>({
    method: 'GET',
    url: `/student-courses/group/${groupId}/students`,
    ...requestConfig,
  })
  return res
}

export function studentCourseControllerGetGroupStudentsSuspenseQueryOptions(
  groupId: StudentCourseControllerGetGroupStudentsPathParams['groupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentCourseControllerGetGroupStudentsSuspenseQueryKey(groupId)
  return queryOptions<
    ResponseConfig<StudentCourseControllerGetGroupStudentsQueryResponse>,
    ResponseErrorConfig<StudentCourseControllerGetGroupStudents404>,
    ResponseConfig<StudentCourseControllerGetGroupStudentsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!groupId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentCourseControllerGetGroupStudentsSuspense(groupId, config)
    },
  })
}

/**
 * @summary Get all students in a specific group with detailed information
 * {@link /student-courses/group/:groupId/students}
 */
export function useStudentCourseControllerGetGroupStudentsSuspense<
  TData = ResponseConfig<StudentCourseControllerGetGroupStudentsQueryResponse>,
  TQueryKey extends QueryKey = StudentCourseControllerGetGroupStudentsSuspenseQueryKey,
>(
  groupId: StudentCourseControllerGetGroupStudentsPathParams['groupId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<StudentCourseControllerGetGroupStudentsQueryResponse>,
        ResponseErrorConfig<StudentCourseControllerGetGroupStudents404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentCourseControllerGetGroupStudentsSuspenseQueryKey(groupId)

  const query = useSuspenseQuery(
    {
      ...(studentCourseControllerGetGroupStudentsSuspenseQueryOptions(groupId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<StudentCourseControllerGetGroupStudents404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}