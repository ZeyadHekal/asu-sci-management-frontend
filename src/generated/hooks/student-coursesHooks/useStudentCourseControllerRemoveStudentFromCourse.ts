/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  StudentCourseControllerRemoveStudentFromCourseMutationResponse,
  StudentCourseControllerRemoveStudentFromCoursePathParams,
  StudentCourseControllerRemoveStudentFromCourse404,
} from '../../types/student-coursesController/StudentCourseControllerRemoveStudentFromCourse.ts'
import { useMutation } from '@tanstack/react-query'

export const studentCourseControllerRemoveStudentFromCourseMutationKey = () => [{ url: '/student-courses/{studentId}/{courseId}' }] as const

export type StudentCourseControllerRemoveStudentFromCourseMutationKey = ReturnType<typeof studentCourseControllerRemoveStudentFromCourseMutationKey>

/**
 * @summary Remove student from a course
 * {@link /student-courses/:studentId/:courseId}
 */
export async function studentCourseControllerRemoveStudentFromCourse(
  studentId: StudentCourseControllerRemoveStudentFromCoursePathParams['studentId'],
  courseId: StudentCourseControllerRemoveStudentFromCoursePathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    StudentCourseControllerRemoveStudentFromCourseMutationResponse,
    ResponseErrorConfig<StudentCourseControllerRemoveStudentFromCourse404>,
    unknown
  >({ method: 'DELETE', url: `/student-courses/${studentId}/${courseId}`, ...requestConfig })
  return res
}

/**
 * @summary Remove student from a course
 * {@link /student-courses/:studentId/:courseId}
 */
export function useStudentCourseControllerRemoveStudentFromCourse<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<StudentCourseControllerRemoveStudentFromCourseMutationResponse>,
      ResponseErrorConfig<StudentCourseControllerRemoveStudentFromCourse404>,
      {
        studentId: StudentCourseControllerRemoveStudentFromCoursePathParams['studentId']
        courseId: StudentCourseControllerRemoveStudentFromCoursePathParams['courseId']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? studentCourseControllerRemoveStudentFromCourseMutationKey()

  return useMutation<
    ResponseConfig<StudentCourseControllerRemoveStudentFromCourseMutationResponse>,
    ResponseErrorConfig<StudentCourseControllerRemoveStudentFromCourse404>,
    {
      studentId: StudentCourseControllerRemoveStudentFromCoursePathParams['studentId']
      courseId: StudentCourseControllerRemoveStudentFromCoursePathParams['courseId']
    },
    TContext
  >(
    {
      mutationFn: async ({ studentId, courseId }) => {
        return studentCourseControllerRemoveStudentFromCourse(studentId, courseId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}