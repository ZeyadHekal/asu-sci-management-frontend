/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  StudentCourseControllerGetStudentCoursesQueryResponse,
  StudentCourseControllerGetStudentCoursesPathParams,
  StudentCourseControllerGetStudentCourses404,
} from '../../types/student-coursesController/StudentCourseControllerGetStudentCourses.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const studentCourseControllerGetStudentCoursesSuspenseQueryKey = (studentId: StudentCourseControllerGetStudentCoursesPathParams['studentId']) =>
  [{ url: '/student-courses/student/:studentId', params: { studentId: studentId } }] as const

export type StudentCourseControllerGetStudentCoursesSuspenseQueryKey = ReturnType<typeof studentCourseControllerGetStudentCoursesSuspenseQueryKey>

/**
 * @summary Get all courses enrolled by a specific student
 * {@link /student-courses/student/:studentId}
 */
export async function studentCourseControllerGetStudentCoursesSuspense(
  studentId: StudentCourseControllerGetStudentCoursesPathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StudentCourseControllerGetStudentCoursesQueryResponse, ResponseErrorConfig<StudentCourseControllerGetStudentCourses404>, unknown>({
    method: 'GET',
    url: `/student-courses/student/${studentId}`,
    ...requestConfig,
  })
  return res
}

export function studentCourseControllerGetStudentCoursesSuspenseQueryOptions(
  studentId: StudentCourseControllerGetStudentCoursesPathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentCourseControllerGetStudentCoursesSuspenseQueryKey(studentId)
  return queryOptions<
    ResponseConfig<StudentCourseControllerGetStudentCoursesQueryResponse>,
    ResponseErrorConfig<StudentCourseControllerGetStudentCourses404>,
    ResponseConfig<StudentCourseControllerGetStudentCoursesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!studentId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentCourseControllerGetStudentCoursesSuspense(studentId, config)
    },
  })
}

/**
 * @summary Get all courses enrolled by a specific student
 * {@link /student-courses/student/:studentId}
 */
export function useStudentCourseControllerGetStudentCoursesSuspense<
  TData = ResponseConfig<StudentCourseControllerGetStudentCoursesQueryResponse>,
  TQueryKey extends QueryKey = StudentCourseControllerGetStudentCoursesSuspenseQueryKey,
>(
  studentId: StudentCourseControllerGetStudentCoursesPathParams['studentId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<StudentCourseControllerGetStudentCoursesQueryResponse>,
        ResponseErrorConfig<StudentCourseControllerGetStudentCourses404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentCourseControllerGetStudentCoursesSuspenseQueryKey(studentId)

  const query = useSuspenseQuery(
    {
      ...(studentCourseControllerGetStudentCoursesSuspenseQueryOptions(studentId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<StudentCourseControllerGetStudentCourses404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}