/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  StudentCourseControllerGetCourseStudentsQueryResponse,
  StudentCourseControllerGetCourseStudentsPathParams,
  StudentCourseControllerGetCourseStudents404,
} from '../../types/student-coursesController/StudentCourseControllerGetCourseStudents.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const studentCourseControllerGetCourseStudentsSuspenseQueryKey = (courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId']) =>
  [{ url: '/student-courses/course/:courseId', params: { courseId: courseId } }] as const

export type StudentCourseControllerGetCourseStudentsSuspenseQueryKey = ReturnType<typeof studentCourseControllerGetCourseStudentsSuspenseQueryKey>

/**
 * @summary Get all students enrolled in a specific course
 * {@link /student-courses/course/:courseId}
 */
export async function studentCourseControllerGetCourseStudentsSuspense(
  courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StudentCourseControllerGetCourseStudentsQueryResponse, ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>, unknown>({
    method: 'GET',
    url: `/student-courses/course/${courseId}`,
    ...requestConfig,
  })
  return res
}

export function studentCourseControllerGetCourseStudentsSuspenseQueryOptions(
  courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentCourseControllerGetCourseStudentsSuspenseQueryKey(courseId)
  return queryOptions<
    ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
    ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>,
    ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentCourseControllerGetCourseStudentsSuspense(courseId, config)
    },
  })
}

/**
 * @summary Get all students enrolled in a specific course
 * {@link /student-courses/course/:courseId}
 */
export function useStudentCourseControllerGetCourseStudentsSuspense<
  TData = ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
  TQueryKey extends QueryKey = StudentCourseControllerGetCourseStudentsSuspenseQueryKey,
>(
  courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
        ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentCourseControllerGetCourseStudentsSuspenseQueryKey(courseId)

  const query = useSuspenseQuery(
    {
      ...(studentCourseControllerGetCourseStudentsSuspenseQueryOptions(courseId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}