/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  StudentCourseControllerUpdateEnrollmentMutationRequest,
  StudentCourseControllerUpdateEnrollmentMutationResponse,
  StudentCourseControllerUpdateEnrollmentPathParams,
  StudentCourseControllerUpdateEnrollment404,
} from '../../types/student-coursesController/StudentCourseControllerUpdateEnrollment.ts'
import { useMutation } from '@tanstack/react-query'

export const studentCourseControllerUpdateEnrollmentMutationKey = () => [{ url: '/student-courses/{studentId}/{courseId}' }] as const

export type StudentCourseControllerUpdateEnrollmentMutationKey = ReturnType<typeof studentCourseControllerUpdateEnrollmentMutationKey>

/**
 * @summary Update student enrollment details
 * {@link /student-courses/:studentId/:courseId}
 */
export async function studentCourseControllerUpdateEnrollment(
  studentId: StudentCourseControllerUpdateEnrollmentPathParams['studentId'],
  courseId: StudentCourseControllerUpdateEnrollmentPathParams['courseId'],
  data?: StudentCourseControllerUpdateEnrollmentMutationRequest,
  config: Partial<RequestConfig<StudentCourseControllerUpdateEnrollmentMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    StudentCourseControllerUpdateEnrollmentMutationResponse,
    ResponseErrorConfig<StudentCourseControllerUpdateEnrollment404>,
    StudentCourseControllerUpdateEnrollmentMutationRequest
  >({ method: 'PUT', url: `/student-courses/${studentId}/${courseId}`, data, ...requestConfig })
  return res
}

/**
 * @summary Update student enrollment details
 * {@link /student-courses/:studentId/:courseId}
 */
export function useStudentCourseControllerUpdateEnrollment<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<StudentCourseControllerUpdateEnrollmentMutationResponse>,
      ResponseErrorConfig<StudentCourseControllerUpdateEnrollment404>,
      {
        studentId: StudentCourseControllerUpdateEnrollmentPathParams['studentId']
        courseId: StudentCourseControllerUpdateEnrollmentPathParams['courseId']
        data?: StudentCourseControllerUpdateEnrollmentMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<StudentCourseControllerUpdateEnrollmentMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? studentCourseControllerUpdateEnrollmentMutationKey()

  return useMutation<
    ResponseConfig<StudentCourseControllerUpdateEnrollmentMutationResponse>,
    ResponseErrorConfig<StudentCourseControllerUpdateEnrollment404>,
    {
      studentId: StudentCourseControllerUpdateEnrollmentPathParams['studentId']
      courseId: StudentCourseControllerUpdateEnrollmentPathParams['courseId']
      data?: StudentCourseControllerUpdateEnrollmentMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ studentId, courseId, data }) => {
        return studentCourseControllerUpdateEnrollment(studentId, courseId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}