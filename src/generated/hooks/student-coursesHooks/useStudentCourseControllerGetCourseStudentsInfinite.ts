/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  StudentCourseControllerGetCourseStudentsQueryResponse,
  StudentCourseControllerGetCourseStudentsPathParams,
  StudentCourseControllerGetCourseStudents404,
} from '../../types/student-coursesController/StudentCourseControllerGetCourseStudents.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const studentCourseControllerGetCourseStudentsInfiniteQueryKey = (courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId']) =>
  [{ url: '/student-courses/course/:courseId', params: { courseId: courseId } }] as const

export type StudentCourseControllerGetCourseStudentsInfiniteQueryKey = ReturnType<typeof studentCourseControllerGetCourseStudentsInfiniteQueryKey>

/**
 * @summary Get all students enrolled in a specific course
 * {@link /student-courses/course/:courseId}
 */
export async function studentCourseControllerGetCourseStudentsInfinite(
  courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StudentCourseControllerGetCourseStudentsQueryResponse, ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>, unknown>({
    method: 'GET',
    url: `/student-courses/course/${courseId}`,
    ...requestConfig,
  })
  return res
}

export function studentCourseControllerGetCourseStudentsInfiniteQueryOptions(
  courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentCourseControllerGetCourseStudentsInfiniteQueryKey(courseId)
  return infiniteQueryOptions<
    ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
    ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>,
    ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentCourseControllerGetCourseStudentsInfinite(courseId, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @summary Get all students enrolled in a specific course
 * {@link /student-courses/course/:courseId}
 */
export function useStudentCourseControllerGetCourseStudentsInfinite<
  TData = InfiniteData<ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>>,
  TQueryData = ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
  TQueryKey extends QueryKey = StudentCourseControllerGetCourseStudentsInfiniteQueryKey,
>(
  courseId: StudentCourseControllerGetCourseStudentsPathParams['courseId'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<StudentCourseControllerGetCourseStudentsQueryResponse>,
        ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentCourseControllerGetCourseStudentsInfiniteQueryKey(courseId)

  const query = useInfiniteQuery(
    {
      ...(studentCourseControllerGetCourseStudentsInfiniteQueryOptions(courseId, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<StudentCourseControllerGetCourseStudents404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}