/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  StudentCourseControllerGetStudentWeeklyScheduleQueryResponse,
  StudentCourseControllerGetStudentWeeklySchedulePathParams,
  StudentCourseControllerGetStudentWeeklySchedule404,
} from '../../types/student-coursesController/StudentCourseControllerGetStudentWeeklySchedule.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const studentCourseControllerGetStudentWeeklyScheduleQueryKey = (studentId: StudentCourseControllerGetStudentWeeklySchedulePathParams['studentId']) =>
  [{ url: '/student-courses/student/:studentId/weekly-schedule', params: { studentId: studentId } }] as const

export type StudentCourseControllerGetStudentWeeklyScheduleQueryKey = ReturnType<typeof studentCourseControllerGetStudentWeeklyScheduleQueryKey>

/**
 * @description Get the weekly lab schedule for a specific student showing all their course group sessions
 * @summary Get student weekly schedule
 * {@link /student-courses/student/:studentId/weekly-schedule}
 */
export async function studentCourseControllerGetStudentWeeklySchedule(
  studentId: StudentCourseControllerGetStudentWeeklySchedulePathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    StudentCourseControllerGetStudentWeeklyScheduleQueryResponse,
    ResponseErrorConfig<StudentCourseControllerGetStudentWeeklySchedule404>,
    unknown
  >({ method: 'GET', url: `/student-courses/student/${studentId}/weekly-schedule`, ...requestConfig })
  return res
}

export function studentCourseControllerGetStudentWeeklyScheduleQueryOptions(
  studentId: StudentCourseControllerGetStudentWeeklySchedulePathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentCourseControllerGetStudentWeeklyScheduleQueryKey(studentId)
  return queryOptions<
    ResponseConfig<StudentCourseControllerGetStudentWeeklyScheduleQueryResponse>,
    ResponseErrorConfig<StudentCourseControllerGetStudentWeeklySchedule404>,
    ResponseConfig<StudentCourseControllerGetStudentWeeklyScheduleQueryResponse>,
    typeof queryKey
  >({
    enabled: !!studentId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentCourseControllerGetStudentWeeklySchedule(studentId, config)
    },
  })
}

/**
 * @description Get the weekly lab schedule for a specific student showing all their course group sessions
 * @summary Get student weekly schedule
 * {@link /student-courses/student/:studentId/weekly-schedule}
 */
export function useStudentCourseControllerGetStudentWeeklySchedule<
  TData = ResponseConfig<StudentCourseControllerGetStudentWeeklyScheduleQueryResponse>,
  TQueryData = ResponseConfig<StudentCourseControllerGetStudentWeeklyScheduleQueryResponse>,
  TQueryKey extends QueryKey = StudentCourseControllerGetStudentWeeklyScheduleQueryKey,
>(
  studentId: StudentCourseControllerGetStudentWeeklySchedulePathParams['studentId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<StudentCourseControllerGetStudentWeeklyScheduleQueryResponse>,
        ResponseErrorConfig<StudentCourseControllerGetStudentWeeklySchedule404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentCourseControllerGetStudentWeeklyScheduleQueryKey(studentId)

  const query = useQuery(
    {
      ...(studentCourseControllerGetStudentWeeklyScheduleQueryOptions(studentId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<StudentCourseControllerGetStudentWeeklySchedule404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}