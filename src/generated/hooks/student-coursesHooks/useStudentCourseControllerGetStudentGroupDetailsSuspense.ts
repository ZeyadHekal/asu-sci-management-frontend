/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  StudentCourseControllerGetStudentGroupDetailsQueryResponse,
  StudentCourseControllerGetStudentGroupDetailsPathParams,
  StudentCourseControllerGetStudentGroupDetails404,
} from '../../types/student-coursesController/StudentCourseControllerGetStudentGroupDetails.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const studentCourseControllerGetStudentGroupDetailsSuspenseQueryKey = (
  studentId: StudentCourseControllerGetStudentGroupDetailsPathParams['studentId'],
  courseId: StudentCourseControllerGetStudentGroupDetailsPathParams['courseId'],
) => [{ url: '/student-courses/student/:studentId/course/:courseId/group-details', params: { studentId: studentId, courseId: courseId } }] as const

export type StudentCourseControllerGetStudentGroupDetailsSuspenseQueryKey = ReturnType<typeof studentCourseControllerGetStudentGroupDetailsSuspenseQueryKey>

/**
 * @summary Get student's group details in a specific course
 * {@link /student-courses/student/:studentId/course/:courseId/group-details}
 */
export async function studentCourseControllerGetStudentGroupDetailsSuspense(
  studentId: StudentCourseControllerGetStudentGroupDetailsPathParams['studentId'],
  courseId: StudentCourseControllerGetStudentGroupDetailsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    StudentCourseControllerGetStudentGroupDetailsQueryResponse,
    ResponseErrorConfig<StudentCourseControllerGetStudentGroupDetails404>,
    unknown
  >({ method: 'GET', url: `/student-courses/student/${studentId}/course/${courseId}/group-details`, ...requestConfig })
  return res
}

export function studentCourseControllerGetStudentGroupDetailsSuspenseQueryOptions(
  studentId: StudentCourseControllerGetStudentGroupDetailsPathParams['studentId'],
  courseId: StudentCourseControllerGetStudentGroupDetailsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentCourseControllerGetStudentGroupDetailsSuspenseQueryKey(studentId, courseId)
  return queryOptions<
    ResponseConfig<StudentCourseControllerGetStudentGroupDetailsQueryResponse>,
    ResponseErrorConfig<StudentCourseControllerGetStudentGroupDetails404>,
    ResponseConfig<StudentCourseControllerGetStudentGroupDetailsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(studentId && courseId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentCourseControllerGetStudentGroupDetailsSuspense(studentId, courseId, config)
    },
  })
}

/**
 * @summary Get student's group details in a specific course
 * {@link /student-courses/student/:studentId/course/:courseId/group-details}
 */
export function useStudentCourseControllerGetStudentGroupDetailsSuspense<
  TData = ResponseConfig<StudentCourseControllerGetStudentGroupDetailsQueryResponse>,
  TQueryKey extends QueryKey = StudentCourseControllerGetStudentGroupDetailsSuspenseQueryKey,
>(
  studentId: StudentCourseControllerGetStudentGroupDetailsPathParams['studentId'],
  courseId: StudentCourseControllerGetStudentGroupDetailsPathParams['courseId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<StudentCourseControllerGetStudentGroupDetailsQueryResponse>,
        ResponseErrorConfig<StudentCourseControllerGetStudentGroupDetails404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentCourseControllerGetStudentGroupDetailsSuspenseQueryKey(studentId, courseId)

  const query = useSuspenseQuery(
    {
      ...(studentCourseControllerGetStudentGroupDetailsSuspenseQueryOptions(studentId, courseId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<StudentCourseControllerGetStudentGroupDetails404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}