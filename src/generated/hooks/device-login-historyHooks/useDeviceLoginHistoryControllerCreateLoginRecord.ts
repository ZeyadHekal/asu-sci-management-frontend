/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceLoginHistoryControllerCreateLoginRecordMutationRequest,
  DeviceLoginHistoryControllerCreateLoginRecordMutationResponse,
  DeviceLoginHistoryControllerCreateLoginRecord400,
  DeviceLoginHistoryControllerCreateLoginRecord404,
} from '../../types/device-login-historyController/DeviceLoginHistoryControllerCreateLoginRecord.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceLoginHistoryControllerCreateLoginRecordMutationKey = () => [{ url: '/device-login-history' }] as const

export type DeviceLoginHistoryControllerCreateLoginRecordMutationKey = ReturnType<typeof deviceLoginHistoryControllerCreateLoginRecordMutationKey>

/**
 * @description Create a new device login history record
 * @summary Create login history record
 * {@link /device-login-history}
 */
export async function deviceLoginHistoryControllerCreateLoginRecord(
  data: DeviceLoginHistoryControllerCreateLoginRecordMutationRequest,
  config: Partial<RequestConfig<DeviceLoginHistoryControllerCreateLoginRecordMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceLoginHistoryControllerCreateLoginRecordMutationResponse,
    ResponseErrorConfig<DeviceLoginHistoryControllerCreateLoginRecord400 | DeviceLoginHistoryControllerCreateLoginRecord404>,
    DeviceLoginHistoryControllerCreateLoginRecordMutationRequest
  >({ method: 'POST', url: `/device-login-history`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new device login history record
 * @summary Create login history record
 * {@link /device-login-history}
 */
export function useDeviceLoginHistoryControllerCreateLoginRecord<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceLoginHistoryControllerCreateLoginRecordMutationResponse>,
      ResponseErrorConfig<DeviceLoginHistoryControllerCreateLoginRecord400 | DeviceLoginHistoryControllerCreateLoginRecord404>,
      { data: DeviceLoginHistoryControllerCreateLoginRecordMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceLoginHistoryControllerCreateLoginRecordMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceLoginHistoryControllerCreateLoginRecordMutationKey()

  return useMutation<
    ResponseConfig<DeviceLoginHistoryControllerCreateLoginRecordMutationResponse>,
    ResponseErrorConfig<DeviceLoginHistoryControllerCreateLoginRecord400 | DeviceLoginHistoryControllerCreateLoginRecord404>,
    { data: DeviceLoginHistoryControllerCreateLoginRecordMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return deviceLoginHistoryControllerCreateLoginRecord(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}