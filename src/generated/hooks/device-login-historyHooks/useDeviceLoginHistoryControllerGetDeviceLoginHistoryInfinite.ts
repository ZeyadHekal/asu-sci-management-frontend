/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse,
  DeviceLoginHistoryControllerGetDeviceLoginHistoryPathParams,
  DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryParams,
  DeviceLoginHistoryControllerGetDeviceLoginHistory404,
} from '../../types/device-login-historyController/DeviceLoginHistoryControllerGetDeviceLoginHistory.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const deviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryKey = (
  deviceId: DeviceLoginHistoryControllerGetDeviceLoginHistoryPathParams['deviceId'],
  params?: DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryParams,
) => [{ url: '/device-login-history/device/:deviceId', params: { deviceId: deviceId } }, ...(params ? [params] : [])] as const

export type DeviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryKey = ReturnType<
  typeof deviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryKey
>

/**
 * @description Retrieve login history for a specific device
 * @summary Get device login history
 * {@link /device-login-history/device/:deviceId}
 */
export async function deviceLoginHistoryControllerGetDeviceLoginHistoryInfinite(
  deviceId: DeviceLoginHistoryControllerGetDeviceLoginHistoryPathParams['deviceId'],
  params?: DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse,
    ResponseErrorConfig<DeviceLoginHistoryControllerGetDeviceLoginHistory404>,
    unknown
  >({ method: 'GET', url: `/device-login-history/device/${deviceId}`, params, ...requestConfig })
  return res
}

export function deviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryOptions(
  deviceId: DeviceLoginHistoryControllerGetDeviceLoginHistoryPathParams['deviceId'],
  params?: DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryKey(deviceId, params)
  return infiniteQueryOptions<
    ResponseConfig<DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse>,
    ResponseErrorConfig<DeviceLoginHistoryControllerGetDeviceLoginHistory404>,
    ResponseConfig<DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse>,
    typeof queryKey,
    number
  >({
    enabled: !!deviceId,
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['limit'] = pageParam as unknown as DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryParams['limit']
      }
      return deviceLoginHistoryControllerGetDeviceLoginHistoryInfinite(deviceId, params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve login history for a specific device
 * @summary Get device login history
 * {@link /device-login-history/device/:deviceId}
 */
export function useDeviceLoginHistoryControllerGetDeviceLoginHistoryInfinite<
  TData = InfiniteData<ResponseConfig<DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse>>,
  TQueryData = ResponseConfig<DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse>,
  TQueryKey extends QueryKey = DeviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryKey,
>(
  deviceId: DeviceLoginHistoryControllerGetDeviceLoginHistoryPathParams['deviceId'],
  params?: DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<DeviceLoginHistoryControllerGetDeviceLoginHistoryQueryResponse>,
        ResponseErrorConfig<DeviceLoginHistoryControllerGetDeviceLoginHistory404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryKey(deviceId, params)

  const query = useInfiniteQuery(
    {
      ...(deviceLoginHistoryControllerGetDeviceLoginHistoryInfiniteQueryOptions(deviceId, params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<DeviceLoginHistoryControllerGetDeviceLoginHistory404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}