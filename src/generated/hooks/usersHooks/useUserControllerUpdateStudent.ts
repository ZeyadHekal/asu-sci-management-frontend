/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerUpdateStudentMutationRequest,
  UserControllerUpdateStudentMutationResponse,
  UserControllerUpdateStudentPathParams,
  UserControllerUpdateStudent400,
  UserControllerUpdateStudent401,
  UserControllerUpdateStudent403,
  UserControllerUpdateStudent404,
} from '../../types/usersController/UserControllerUpdateStudent.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerUpdateStudentMutationKey = () => [{ url: '/users/students/{id}' }] as const

export type UserControllerUpdateStudentMutationKey = ReturnType<typeof userControllerUpdateStudentMutationKey>

/**
 * @description Update an existing student by ID
 * @summary Update student
 * {@link /users/students/:id}
 */
export async function userControllerUpdateStudent(
  id: UserControllerUpdateStudentPathParams['id'],
  data?: UserControllerUpdateStudentMutationRequest,
  config: Partial<RequestConfig<UserControllerUpdateStudentMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerUpdateStudentMutationResponse,
    ResponseErrorConfig<UserControllerUpdateStudent400 | UserControllerUpdateStudent401 | UserControllerUpdateStudent403 | UserControllerUpdateStudent404>,
    UserControllerUpdateStudentMutationRequest
  >({ method: 'PATCH', url: `/users/students/${id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing student by ID
 * @summary Update student
 * {@link /users/students/:id}
 */
export function useUserControllerUpdateStudent<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerUpdateStudentMutationResponse>,
      ResponseErrorConfig<UserControllerUpdateStudent400 | UserControllerUpdateStudent401 | UserControllerUpdateStudent403 | UserControllerUpdateStudent404>,
      { id: UserControllerUpdateStudentPathParams['id']; data?: UserControllerUpdateStudentMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserControllerUpdateStudentMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerUpdateStudentMutationKey()

  return useMutation<
    ResponseConfig<UserControllerUpdateStudentMutationResponse>,
    ResponseErrorConfig<UserControllerUpdateStudent400 | UserControllerUpdateStudent401 | UserControllerUpdateStudent403 | UserControllerUpdateStudent404>,
    { id: UserControllerUpdateStudentPathParams['id']; data?: UserControllerUpdateStudentMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return userControllerUpdateStudent(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}