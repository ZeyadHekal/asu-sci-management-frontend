/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  UserControllerGetPaginatedStaffQueryResponse,
  UserControllerGetPaginatedStaffQueryParams,
  UserControllerGetPaginatedStaff401,
  UserControllerGetPaginatedStaff403,
} from '../../types/usersController/UserControllerGetPaginatedStaff.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const userControllerGetPaginatedStaffInfiniteQueryKey = (params?: UserControllerGetPaginatedStaffQueryParams) =>
  [{ url: '/users/staff/paginated' }, ...(params ? [params] : [])] as const

export type UserControllerGetPaginatedStaffInfiniteQueryKey = ReturnType<typeof userControllerGetPaginatedStaffInfiniteQueryKey>

/**
 * @description Retrieve staff with pagination and filtering. Available filters: department (string), userType (string), status (boolean). Example: ?page=0&limit=10&department=Computer%20Science&userType=Doctor&status=true
 * @summary Get paginated staff
 * {@link /users/staff/paginated}
 */
export async function userControllerGetPaginatedStaffInfinite(
  params?: UserControllerGetPaginatedStaffQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerGetPaginatedStaffQueryResponse,
    ResponseErrorConfig<UserControllerGetPaginatedStaff401 | UserControllerGetPaginatedStaff403>,
    unknown
  >({ method: 'GET', url: `/users/staff/paginated`, params, ...requestConfig })
  return res
}

export function userControllerGetPaginatedStaffInfiniteQueryOptions(
  params?: UserControllerGetPaginatedStaffQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = userControllerGetPaginatedStaffInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<UserControllerGetPaginatedStaffQueryResponse>,
    ResponseErrorConfig<UserControllerGetPaginatedStaff401 | UserControllerGetPaginatedStaff403>,
    ResponseConfig<UserControllerGetPaginatedStaffQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['limit'] = pageParam as unknown as UserControllerGetPaginatedStaffQueryParams['limit']
      }
      return userControllerGetPaginatedStaffInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve staff with pagination and filtering. Available filters: department (string), userType (string), status (boolean). Example: ?page=0&limit=10&department=Computer%20Science&userType=Doctor&status=true
 * @summary Get paginated staff
 * {@link /users/staff/paginated}
 */
export function useUserControllerGetPaginatedStaffInfinite<
  TData = InfiniteData<ResponseConfig<UserControllerGetPaginatedStaffQueryResponse>>,
  TQueryData = ResponseConfig<UserControllerGetPaginatedStaffQueryResponse>,
  TQueryKey extends QueryKey = UserControllerGetPaginatedStaffInfiniteQueryKey,
>(
  params?: UserControllerGetPaginatedStaffQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<UserControllerGetPaginatedStaffQueryResponse>,
        ResponseErrorConfig<UserControllerGetPaginatedStaff401 | UserControllerGetPaginatedStaff403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userControllerGetPaginatedStaffInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(userControllerGetPaginatedStaffInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<UserControllerGetPaginatedStaff401 | UserControllerGetPaginatedStaff403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}