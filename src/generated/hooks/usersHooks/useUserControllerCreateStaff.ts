/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerCreateStaffMutationRequest,
  UserControllerCreateStaffMutationResponse,
  UserControllerCreateStaffPathParams,
  UserControllerCreateStaff400,
  UserControllerCreateStaff401,
  UserControllerCreateStaff403,
} from '../../types/usersController/UserControllerCreateStaff.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerCreateStaffMutationKey = () => [{ url: '/users/staff/{userTypeId}' }] as const

export type UserControllerCreateStaffMutationKey = ReturnType<typeof userControllerCreateStaffMutationKey>

/**
 * @description Create a new staff user with specific user type
 * @summary Create staff
 * {@link /users/staff/:userTypeId}
 */
export async function userControllerCreateStaff(
  userTypeId: UserControllerCreateStaffPathParams['userTypeId'],
  data: UserControllerCreateStaffMutationRequest,
  config: Partial<RequestConfig<UserControllerCreateStaffMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerCreateStaffMutationResponse,
    ResponseErrorConfig<UserControllerCreateStaff400 | UserControllerCreateStaff401 | UserControllerCreateStaff403>,
    UserControllerCreateStaffMutationRequest
  >({ method: 'POST', url: `/users/staff/${userTypeId}`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new staff user with specific user type
 * @summary Create staff
 * {@link /users/staff/:userTypeId}
 */
export function useUserControllerCreateStaff<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerCreateStaffMutationResponse>,
      ResponseErrorConfig<UserControllerCreateStaff400 | UserControllerCreateStaff401 | UserControllerCreateStaff403>,
      { userTypeId: UserControllerCreateStaffPathParams['userTypeId']; data: UserControllerCreateStaffMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserControllerCreateStaffMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerCreateStaffMutationKey()

  return useMutation<
    ResponseConfig<UserControllerCreateStaffMutationResponse>,
    ResponseErrorConfig<UserControllerCreateStaff400 | UserControllerCreateStaff401 | UserControllerCreateStaff403>,
    { userTypeId: UserControllerCreateStaffPathParams['userTypeId']; data: UserControllerCreateStaffMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ userTypeId, data }) => {
        return userControllerCreateStaff(userTypeId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}