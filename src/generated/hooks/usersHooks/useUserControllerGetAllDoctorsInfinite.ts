/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  UserControllerGetAllDoctorsQueryResponse,
  UserControllerGetAllDoctors401,
  UserControllerGetAllDoctors403,
} from '../../types/usersController/UserControllerGetAllDoctors.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const userControllerGetAllDoctorsInfiniteQueryKey = () => [{ url: '/users/doctors' }] as const

export type UserControllerGetAllDoctorsInfiniteQueryKey = ReturnType<typeof userControllerGetAllDoctorsInfiniteQueryKey>

/**
 * @description Retrieve all users with TEACH_COURSE privilege
 * @summary Get all doctors
 * {@link /users/doctors}
 */
export async function userControllerGetAllDoctorsInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerGetAllDoctorsQueryResponse,
    ResponseErrorConfig<UserControllerGetAllDoctors401 | UserControllerGetAllDoctors403>,
    unknown
  >({ method: 'GET', url: `/users/doctors`, ...requestConfig })
  return res
}

export function userControllerGetAllDoctorsInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = userControllerGetAllDoctorsInfiniteQueryKey()
  return infiniteQueryOptions<
    ResponseConfig<UserControllerGetAllDoctorsQueryResponse>,
    ResponseErrorConfig<UserControllerGetAllDoctors401 | UserControllerGetAllDoctors403>,
    ResponseConfig<UserControllerGetAllDoctorsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userControllerGetAllDoctorsInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve all users with TEACH_COURSE privilege
 * @summary Get all doctors
 * {@link /users/doctors}
 */
export function useUserControllerGetAllDoctorsInfinite<
  TData = InfiniteData<ResponseConfig<UserControllerGetAllDoctorsQueryResponse>>,
  TQueryData = ResponseConfig<UserControllerGetAllDoctorsQueryResponse>,
  TQueryKey extends QueryKey = UserControllerGetAllDoctorsInfiniteQueryKey,
>(
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<UserControllerGetAllDoctorsQueryResponse>,
        ResponseErrorConfig<UserControllerGetAllDoctors401 | UserControllerGetAllDoctors403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userControllerGetAllDoctorsInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(userControllerGetAllDoctorsInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<UserControllerGetAllDoctors401 | UserControllerGetAllDoctors403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}