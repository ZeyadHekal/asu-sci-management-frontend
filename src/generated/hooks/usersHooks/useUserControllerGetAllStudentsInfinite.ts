/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  UserControllerGetAllStudentsQueryResponse,
  UserControllerGetAllStudents401,
  UserControllerGetAllStudents403,
} from '../../types/usersController/UserControllerGetAllStudents.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const userControllerGetAllStudentsInfiniteQueryKey = () => [{ url: '/users/students' }] as const

export type UserControllerGetAllStudentsInfiniteQueryKey = ReturnType<typeof userControllerGetAllStudentsInfiniteQueryKey>

/**
 * @description Retrieve all student users
 * @summary Get all students
 * {@link /users/students}
 */
export async function userControllerGetAllStudentsInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerGetAllStudentsQueryResponse,
    ResponseErrorConfig<UserControllerGetAllStudents401 | UserControllerGetAllStudents403>,
    unknown
  >({ method: 'GET', url: `/users/students`, ...requestConfig })
  return res
}

export function userControllerGetAllStudentsInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = userControllerGetAllStudentsInfiniteQueryKey()
  return infiniteQueryOptions<
    ResponseConfig<UserControllerGetAllStudentsQueryResponse>,
    ResponseErrorConfig<UserControllerGetAllStudents401 | UserControllerGetAllStudents403>,
    ResponseConfig<UserControllerGetAllStudentsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userControllerGetAllStudentsInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve all student users
 * @summary Get all students
 * {@link /users/students}
 */
export function useUserControllerGetAllStudentsInfinite<
  TData = InfiniteData<ResponseConfig<UserControllerGetAllStudentsQueryResponse>>,
  TQueryData = ResponseConfig<UserControllerGetAllStudentsQueryResponse>,
  TQueryKey extends QueryKey = UserControllerGetAllStudentsInfiniteQueryKey,
>(
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<UserControllerGetAllStudentsQueryResponse>,
        ResponseErrorConfig<UserControllerGetAllStudents401 | UserControllerGetAllStudents403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userControllerGetAllStudentsInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(userControllerGetAllStudentsInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<UserControllerGetAllStudents401 | UserControllerGetAllStudents403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}