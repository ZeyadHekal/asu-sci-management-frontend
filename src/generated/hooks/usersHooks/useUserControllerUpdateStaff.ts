/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerUpdateStaffMutationRequest,
  UserControllerUpdateStaffMutationResponse,
  UserControllerUpdateStaffPathParams,
  UserControllerUpdateStaff400,
  UserControllerUpdateStaff401,
  UserControllerUpdateStaff403,
  UserControllerUpdateStaff404,
} from '../../types/usersController/UserControllerUpdateStaff.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerUpdateStaffMutationKey = () => [{ url: '/users/staff/{id}' }] as const

export type UserControllerUpdateStaffMutationKey = ReturnType<typeof userControllerUpdateStaffMutationKey>

/**
 * @description Update an existing staff member by ID. Username can be updated but must be unique. UserType can also be updated.
 * @summary Update staff
 * {@link /users/staff/:id}
 */
export async function userControllerUpdateStaff(
  id: UserControllerUpdateStaffPathParams['id'],
  data?: UserControllerUpdateStaffMutationRequest,
  config: Partial<RequestConfig<UserControllerUpdateStaffMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerUpdateStaffMutationResponse,
    ResponseErrorConfig<UserControllerUpdateStaff400 | UserControllerUpdateStaff401 | UserControllerUpdateStaff403 | UserControllerUpdateStaff404>,
    UserControllerUpdateStaffMutationRequest
  >({ method: 'PATCH', url: `/users/staff/${id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing staff member by ID. Username can be updated but must be unique. UserType can also be updated.
 * @summary Update staff
 * {@link /users/staff/:id}
 */
export function useUserControllerUpdateStaff<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerUpdateStaffMutationResponse>,
      ResponseErrorConfig<UserControllerUpdateStaff400 | UserControllerUpdateStaff401 | UserControllerUpdateStaff403 | UserControllerUpdateStaff404>,
      { id: UserControllerUpdateStaffPathParams['id']; data?: UserControllerUpdateStaffMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserControllerUpdateStaffMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerUpdateStaffMutationKey()

  return useMutation<
    ResponseConfig<UserControllerUpdateStaffMutationResponse>,
    ResponseErrorConfig<UserControllerUpdateStaff400 | UserControllerUpdateStaff401 | UserControllerUpdateStaff403 | UserControllerUpdateStaff404>,
    { id: UserControllerUpdateStaffPathParams['id']; data?: UserControllerUpdateStaffMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return userControllerUpdateStaff(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}