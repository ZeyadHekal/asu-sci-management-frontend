/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerDeleteStaffMutationResponse,
  UserControllerDeleteStaffPathParams,
  UserControllerDeleteStaff400,
  UserControllerDeleteStaff401,
  UserControllerDeleteStaff403,
  UserControllerDeleteStaff404,
} from '../../types/usersController/UserControllerDeleteStaff.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerDeleteStaffMutationKey = () => [{ url: '/users/staff/{id}' }] as const

export type UserControllerDeleteStaffMutationKey = ReturnType<typeof userControllerDeleteStaffMutationKey>

/**
 * @description Delete an existing staff member by ID
 * @summary Delete staff
 * {@link /users/staff/:id}
 */
export async function userControllerDeleteStaff(
  id: UserControllerDeleteStaffPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerDeleteStaffMutationResponse,
    ResponseErrorConfig<UserControllerDeleteStaff400 | UserControllerDeleteStaff401 | UserControllerDeleteStaff403 | UserControllerDeleteStaff404>,
    unknown
  >({ method: 'DELETE', url: `/users/staff/${id}`, ...requestConfig })
  return res
}

/**
 * @description Delete an existing staff member by ID
 * @summary Delete staff
 * {@link /users/staff/:id}
 */
export function useUserControllerDeleteStaff<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerDeleteStaffMutationResponse>,
      ResponseErrorConfig<UserControllerDeleteStaff400 | UserControllerDeleteStaff401 | UserControllerDeleteStaff403 | UserControllerDeleteStaff404>,
      { id: UserControllerDeleteStaffPathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerDeleteStaffMutationKey()

  return useMutation<
    ResponseConfig<UserControllerDeleteStaffMutationResponse>,
    ResponseErrorConfig<UserControllerDeleteStaff400 | UserControllerDeleteStaff401 | UserControllerDeleteStaff403 | UserControllerDeleteStaff404>,
    { id: UserControllerDeleteStaffPathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return userControllerDeleteStaff(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}