/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerDeleteStudentMutationResponse,
  UserControllerDeleteStudentPathParams,
  UserControllerDeleteStudent400,
  UserControllerDeleteStudent401,
  UserControllerDeleteStudent403,
  UserControllerDeleteStudent404,
} from '../../types/usersController/UserControllerDeleteStudent.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerDeleteStudentMutationKey = () => [{ url: '/users/students/{id}' }] as const

export type UserControllerDeleteStudentMutationKey = ReturnType<typeof userControllerDeleteStudentMutationKey>

/**
 * @description Delete an existing student by ID
 * @summary Delete student
 * {@link /users/students/:id}
 */
export async function userControllerDeleteStudent(
  id: UserControllerDeleteStudentPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerDeleteStudentMutationResponse,
    ResponseErrorConfig<UserControllerDeleteStudent400 | UserControllerDeleteStudent401 | UserControllerDeleteStudent403 | UserControllerDeleteStudent404>,
    unknown
  >({ method: 'DELETE', url: `/users/students/${id}`, ...requestConfig })
  return res
}

/**
 * @description Delete an existing student by ID
 * @summary Delete student
 * {@link /users/students/:id}
 */
export function useUserControllerDeleteStudent<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerDeleteStudentMutationResponse>,
      ResponseErrorConfig<UserControllerDeleteStudent400 | UserControllerDeleteStudent401 | UserControllerDeleteStudent403 | UserControllerDeleteStudent404>,
      { id: UserControllerDeleteStudentPathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerDeleteStudentMutationKey()

  return useMutation<
    ResponseConfig<UserControllerDeleteStudentMutationResponse>,
    ResponseErrorConfig<UserControllerDeleteStudent400 | UserControllerDeleteStudent401 | UserControllerDeleteStudent403 | UserControllerDeleteStudent404>,
    { id: UserControllerDeleteStudentPathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return userControllerDeleteStudent(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}