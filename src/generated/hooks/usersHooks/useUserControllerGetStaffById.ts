/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  UserControllerGetStaffByIdQueryResponse,
  UserControllerGetStaffByIdPathParams,
  UserControllerGetStaffById401,
  UserControllerGetStaffById403,
  UserControllerGetStaffById404,
} from '../../types/usersController/UserControllerGetStaffById.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const userControllerGetStaffByIdQueryKey = (id: UserControllerGetStaffByIdPathParams['id']) => [{ url: '/users/staff/:id', params: { id: id } }] as const

export type UserControllerGetStaffByIdQueryKey = ReturnType<typeof userControllerGetStaffByIdQueryKey>

/**
 * @description Retrieve a staff member by their ID
 * @summary Get staff by ID
 * {@link /users/staff/:id}
 */
export async function userControllerGetStaffById(
  id: UserControllerGetStaffByIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerGetStaffByIdQueryResponse,
    ResponseErrorConfig<UserControllerGetStaffById401 | UserControllerGetStaffById403 | UserControllerGetStaffById404>,
    unknown
  >({ method: 'GET', url: `/users/staff/${id}`, ...requestConfig })
  return res
}

export function userControllerGetStaffByIdQueryOptions(
  id: UserControllerGetStaffByIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = userControllerGetStaffByIdQueryKey(id)
  return queryOptions<
    ResponseConfig<UserControllerGetStaffByIdQueryResponse>,
    ResponseErrorConfig<UserControllerGetStaffById401 | UserControllerGetStaffById403 | UserControllerGetStaffById404>,
    ResponseConfig<UserControllerGetStaffByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userControllerGetStaffById(id, config)
    },
  })
}

/**
 * @description Retrieve a staff member by their ID
 * @summary Get staff by ID
 * {@link /users/staff/:id}
 */
export function useUserControllerGetStaffById<
  TData = ResponseConfig<UserControllerGetStaffByIdQueryResponse>,
  TQueryData = ResponseConfig<UserControllerGetStaffByIdQueryResponse>,
  TQueryKey extends QueryKey = UserControllerGetStaffByIdQueryKey,
>(
  id: UserControllerGetStaffByIdPathParams['id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<UserControllerGetStaffByIdQueryResponse>,
        ResponseErrorConfig<UserControllerGetStaffById401 | UserControllerGetStaffById403 | UserControllerGetStaffById404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userControllerGetStaffByIdQueryKey(id)

  const query = useQuery(
    {
      ...(userControllerGetStaffByIdQueryOptions(id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<UserControllerGetStaffById401 | UserControllerGetStaffById403 | UserControllerGetStaffById404>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}