/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  UserControllerGetAllStaffQueryResponse,
  UserControllerGetAllStaff401,
  UserControllerGetAllStaff403,
} from '../../types/usersController/UserControllerGetAllStaff.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const userControllerGetAllStaffSuspenseQueryKey = () => [{ url: '/users/staff' }] as const

export type UserControllerGetAllStaffSuspenseQueryKey = ReturnType<typeof userControllerGetAllStaffSuspenseQueryKey>

/**
 * @description Retrieve all staff users
 * @summary Get all staff
 * {@link /users/staff}
 */
export async function userControllerGetAllStaffSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<UserControllerGetAllStaffQueryResponse, ResponseErrorConfig<UserControllerGetAllStaff401 | UserControllerGetAllStaff403>, unknown>({
    method: 'GET',
    url: `/users/staff`,
    ...requestConfig,
  })
  return res
}

export function userControllerGetAllStaffSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = userControllerGetAllStaffSuspenseQueryKey()
  return queryOptions<
    ResponseConfig<UserControllerGetAllStaffQueryResponse>,
    ResponseErrorConfig<UserControllerGetAllStaff401 | UserControllerGetAllStaff403>,
    ResponseConfig<UserControllerGetAllStaffQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userControllerGetAllStaffSuspense(config)
    },
  })
}

/**
 * @description Retrieve all staff users
 * @summary Get all staff
 * {@link /users/staff}
 */
export function useUserControllerGetAllStaffSuspense<
  TData = ResponseConfig<UserControllerGetAllStaffQueryResponse>,
  TQueryKey extends QueryKey = UserControllerGetAllStaffSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<UserControllerGetAllStaffQueryResponse>,
        ResponseErrorConfig<UserControllerGetAllStaff401 | UserControllerGetAllStaff403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userControllerGetAllStaffSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(userControllerGetAllStaffSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<UserControllerGetAllStaff401 | UserControllerGetAllStaff403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}