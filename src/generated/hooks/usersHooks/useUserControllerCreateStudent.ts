/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerCreateStudentMutationRequest,
  UserControllerCreateStudentMutationResponse,
  UserControllerCreateStudent400,
  UserControllerCreateStudent401,
  UserControllerCreateStudent403,
} from '../../types/usersController/UserControllerCreateStudent.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerCreateStudentMutationKey = () => [{ url: '/users/students' }] as const

export type UserControllerCreateStudentMutationKey = ReturnType<typeof userControllerCreateStudentMutationKey>

/**
 * @description Create a new student user
 * @summary Create student
 * {@link /users/students}
 */
export async function userControllerCreateStudent(
  data: UserControllerCreateStudentMutationRequest,
  config: Partial<RequestConfig<UserControllerCreateStudentMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof key === 'string' && (typeof value === 'string' || (value as Blob) instanceof Blob)) {
        formData.append(key, value as unknown as string)
      }
    })
  }
  const res = await request<
    UserControllerCreateStudentMutationResponse,
    ResponseErrorConfig<UserControllerCreateStudent400 | UserControllerCreateStudent401 | UserControllerCreateStudent403>,
    UserControllerCreateStudentMutationRequest
  >({ method: 'POST', url: `/users/students`, data: formData, ...requestConfig, headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers } })
  return res
}

/**
 * @description Create a new student user
 * @summary Create student
 * {@link /users/students}
 */
export function useUserControllerCreateStudent<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerCreateStudentMutationResponse>,
      ResponseErrorConfig<UserControllerCreateStudent400 | UserControllerCreateStudent401 | UserControllerCreateStudent403>,
      { data: UserControllerCreateStudentMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserControllerCreateStudentMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerCreateStudentMutationKey()

  return useMutation<
    ResponseConfig<UserControllerCreateStudentMutationResponse>,
    ResponseErrorConfig<UserControllerCreateStudent400 | UserControllerCreateStudent401 | UserControllerCreateStudent403>,
    { data: UserControllerCreateStudentMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return userControllerCreateStudent(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}