/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserControllerUpdateUserPrivilegesMutationRequest,
  UserControllerUpdateUserPrivilegesMutationResponse,
  UserControllerUpdateUserPrivilegesPathParams,
  UserControllerUpdateUserPrivileges400,
  UserControllerUpdateUserPrivileges401,
  UserControllerUpdateUserPrivileges403,
  UserControllerUpdateUserPrivileges404,
} from '../../types/usersController/UserControllerUpdateUserPrivileges.ts'
import { useMutation } from '@tanstack/react-query'

export const userControllerUpdateUserPrivilegesMutationKey = () => [{ url: '/users/{id}/privileges' }] as const

export type UserControllerUpdateUserPrivilegesMutationKey = ReturnType<typeof userControllerUpdateUserPrivilegesMutationKey>

/**
 * @description Update a user's specific privileges by providing an array of privilege codes. This will replace all user-specific privileges (user type privileges remain unchanged).
 * @summary Update user privileges
 * {@link /users/:id/privileges}
 */
export async function userControllerUpdateUserPrivileges(
  id: UserControllerUpdateUserPrivilegesPathParams['id'],
  data: UserControllerUpdateUserPrivilegesMutationRequest,
  config: Partial<RequestConfig<UserControllerUpdateUserPrivilegesMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserControllerUpdateUserPrivilegesMutationResponse,
    ResponseErrorConfig<
      | UserControllerUpdateUserPrivileges400
      | UserControllerUpdateUserPrivileges401
      | UserControllerUpdateUserPrivileges403
      | UserControllerUpdateUserPrivileges404
    >,
    UserControllerUpdateUserPrivilegesMutationRequest
  >({ method: 'PATCH', url: `/users/${id}/privileges`, data, ...requestConfig })
  return res
}

/**
 * @description Update a user's specific privileges by providing an array of privilege codes. This will replace all user-specific privileges (user type privileges remain unchanged).
 * @summary Update user privileges
 * {@link /users/:id/privileges}
 */
export function useUserControllerUpdateUserPrivileges<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserControllerUpdateUserPrivilegesMutationResponse>,
      ResponseErrorConfig<
        | UserControllerUpdateUserPrivileges400
        | UserControllerUpdateUserPrivileges401
        | UserControllerUpdateUserPrivileges403
        | UserControllerUpdateUserPrivileges404
      >,
      { id: UserControllerUpdateUserPrivilegesPathParams['id']; data: UserControllerUpdateUserPrivilegesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserControllerUpdateUserPrivilegesMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userControllerUpdateUserPrivilegesMutationKey()

  return useMutation<
    ResponseConfig<UserControllerUpdateUserPrivilegesMutationResponse>,
    ResponseErrorConfig<
      | UserControllerUpdateUserPrivileges400
      | UserControllerUpdateUserPrivileges401
      | UserControllerUpdateUserPrivileges403
      | UserControllerUpdateUserPrivileges404
    >,
    { id: UserControllerUpdateUserPrivilegesPathParams['id']; data: UserControllerUpdateUserPrivilegesMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return userControllerUpdateUserPrivileges(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}