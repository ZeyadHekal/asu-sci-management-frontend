/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseGroupControllerGetAvailableGroupsForMoveQueryResponse,
  CourseGroupControllerGetAvailableGroupsForMovePathParams,
} from '../../types/course-groupsController/CourseGroupControllerGetAvailableGroupsForMove.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseGroupControllerGetAvailableGroupsForMoveSuspenseQueryKey = (
  groupId: CourseGroupControllerGetAvailableGroupsForMovePathParams['groupId'],
  studentId: CourseGroupControllerGetAvailableGroupsForMovePathParams['studentId'],
) => [{ url: '/course-groups/:groupId/available-groups-for-move/:studentId', params: { groupId: groupId, studentId: studentId } }] as const

export type CourseGroupControllerGetAvailableGroupsForMoveSuspenseQueryKey = ReturnType<typeof courseGroupControllerGetAvailableGroupsForMoveSuspenseQueryKey>

/**
 * @summary Get available groups for moving a student
 * {@link /course-groups/:groupId/available-groups-for-move/:studentId}
 */
export async function courseGroupControllerGetAvailableGroupsForMoveSuspense(
  groupId: CourseGroupControllerGetAvailableGroupsForMovePathParams['groupId'],
  studentId: CourseGroupControllerGetAvailableGroupsForMovePathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerGetAvailableGroupsForMoveQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/course-groups/${groupId}/available-groups-for-move/${studentId}`,
    ...requestConfig,
  })
  return res
}

export function courseGroupControllerGetAvailableGroupsForMoveSuspenseQueryOptions(
  groupId: CourseGroupControllerGetAvailableGroupsForMovePathParams['groupId'],
  studentId: CourseGroupControllerGetAvailableGroupsForMovePathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseGroupControllerGetAvailableGroupsForMoveSuspenseQueryKey(groupId, studentId)
  return queryOptions<
    ResponseConfig<CourseGroupControllerGetAvailableGroupsForMoveQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<CourseGroupControllerGetAvailableGroupsForMoveQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(groupId && studentId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseGroupControllerGetAvailableGroupsForMoveSuspense(groupId, studentId, config)
    },
  })
}

/**
 * @summary Get available groups for moving a student
 * {@link /course-groups/:groupId/available-groups-for-move/:studentId}
 */
export function useCourseGroupControllerGetAvailableGroupsForMoveSuspense<
  TData = ResponseConfig<CourseGroupControllerGetAvailableGroupsForMoveQueryResponse>,
  TQueryKey extends QueryKey = CourseGroupControllerGetAvailableGroupsForMoveSuspenseQueryKey,
>(
  groupId: CourseGroupControllerGetAvailableGroupsForMovePathParams['groupId'],
  studentId: CourseGroupControllerGetAvailableGroupsForMovePathParams['studentId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<ResponseConfig<CourseGroupControllerGetAvailableGroupsForMoveQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseGroupControllerGetAvailableGroupsForMoveSuspenseQueryKey(groupId, studentId)

  const query = useSuspenseQuery(
    {
      ...(courseGroupControllerGetAvailableGroupsForMoveSuspenseQueryOptions(groupId, studentId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}