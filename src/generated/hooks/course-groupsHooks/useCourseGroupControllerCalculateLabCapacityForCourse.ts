/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  CourseGroupControllerCalculateLabCapacityForCourseQueryResponse,
  CourseGroupControllerCalculateLabCapacityForCoursePathParams,
} from '../../types/course-groupsController/CourseGroupControllerCalculateLabCapacityForCourse.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const courseGroupControllerCalculateLabCapacityForCourseQueryKey = (
  labId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['labId'],
  courseId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['courseId'],
) => [{ url: '/course-groups/lab/:labId/course/:courseId/capacity', params: { labId: labId, courseId: courseId } }] as const

export type CourseGroupControllerCalculateLabCapacityForCourseQueryKey = ReturnType<typeof courseGroupControllerCalculateLabCapacityForCourseQueryKey>

/**
 * @description Calculate how many students can be accommodated in a lab for a specific course based on software requirements
 * @summary Calculate lab capacity for a course
 * {@link /course-groups/lab/:labId/course/:courseId/capacity}
 */
export async function courseGroupControllerCalculateLabCapacityForCourse(
  labId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['labId'],
  courseId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerCalculateLabCapacityForCourseQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/course-groups/lab/${labId}/course/${courseId}/capacity`,
    ...requestConfig,
  })
  return res
}

export function courseGroupControllerCalculateLabCapacityForCourseQueryOptions(
  labId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['labId'],
  courseId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseGroupControllerCalculateLabCapacityForCourseQueryKey(labId, courseId)
  return queryOptions<
    ResponseConfig<CourseGroupControllerCalculateLabCapacityForCourseQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<CourseGroupControllerCalculateLabCapacityForCourseQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(labId && courseId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseGroupControllerCalculateLabCapacityForCourse(labId, courseId, config)
    },
  })
}

/**
 * @description Calculate how many students can be accommodated in a lab for a specific course based on software requirements
 * @summary Calculate lab capacity for a course
 * {@link /course-groups/lab/:labId/course/:courseId/capacity}
 */
export function useCourseGroupControllerCalculateLabCapacityForCourse<
  TData = ResponseConfig<CourseGroupControllerCalculateLabCapacityForCourseQueryResponse>,
  TQueryData = ResponseConfig<CourseGroupControllerCalculateLabCapacityForCourseQueryResponse>,
  TQueryKey extends QueryKey = CourseGroupControllerCalculateLabCapacityForCourseQueryKey,
>(
  labId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['labId'],
  courseId: CourseGroupControllerCalculateLabCapacityForCoursePathParams['courseId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<CourseGroupControllerCalculateLabCapacityForCourseQueryResponse>,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseGroupControllerCalculateLabCapacityForCourseQueryKey(labId, courseId)

  const query = useQuery(
    {
      ...(courseGroupControllerCalculateLabCapacityForCourseQueryOptions(labId, courseId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}