/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseGroupControllerUpdateScheduleMutationRequest,
  CourseGroupControllerUpdateScheduleMutationResponse,
  CourseGroupControllerUpdateSchedulePathParams,
  CourseGroupControllerUpdateSchedule404,
} from '../../types/course-groupsController/CourseGroupControllerUpdateSchedule.ts'
import { useMutation } from '@tanstack/react-query'

export const courseGroupControllerUpdateScheduleMutationKey = () => [{ url: '/course-groups/schedules/{courseGroupId}/{assistantId}' }] as const

export type CourseGroupControllerUpdateScheduleMutationKey = ReturnType<typeof courseGroupControllerUpdateScheduleMutationKey>

/**
 * @description Update a course group schedule
 * @summary Update course group schedule
 * {@link /course-groups/schedules/:courseGroupId/:assistantId}
 */
export async function courseGroupControllerUpdateSchedule(
  courseGroupId: CourseGroupControllerUpdateSchedulePathParams['courseGroupId'],
  assistantId: CourseGroupControllerUpdateSchedulePathParams['assistantId'],
  data?: CourseGroupControllerUpdateScheduleMutationRequest,
  config: Partial<RequestConfig<CourseGroupControllerUpdateScheduleMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseGroupControllerUpdateScheduleMutationResponse,
    ResponseErrorConfig<CourseGroupControllerUpdateSchedule404>,
    CourseGroupControllerUpdateScheduleMutationRequest
  >({ method: 'PATCH', url: `/course-groups/schedules/${courseGroupId}/${assistantId}`, data, ...requestConfig })
  return res
}

/**
 * @description Update a course group schedule
 * @summary Update course group schedule
 * {@link /course-groups/schedules/:courseGroupId/:assistantId}
 */
export function useCourseGroupControllerUpdateSchedule<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseGroupControllerUpdateScheduleMutationResponse>,
      ResponseErrorConfig<CourseGroupControllerUpdateSchedule404>,
      {
        courseGroupId: CourseGroupControllerUpdateSchedulePathParams['courseGroupId']
        assistantId: CourseGroupControllerUpdateSchedulePathParams['assistantId']
        data?: CourseGroupControllerUpdateScheduleMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseGroupControllerUpdateScheduleMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseGroupControllerUpdateScheduleMutationKey()

  return useMutation<
    ResponseConfig<CourseGroupControllerUpdateScheduleMutationResponse>,
    ResponseErrorConfig<CourseGroupControllerUpdateSchedule404>,
    {
      courseGroupId: CourseGroupControllerUpdateSchedulePathParams['courseGroupId']
      assistantId: CourseGroupControllerUpdateSchedulePathParams['assistantId']
      data?: CourseGroupControllerUpdateScheduleMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ courseGroupId, assistantId, data }) => {
        return courseGroupControllerUpdateSchedule(courseGroupId, assistantId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}