/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseGroupControllerCreateScheduleMutationRequest,
  CourseGroupControllerCreateScheduleMutationResponse,
  CourseGroupControllerCreateSchedule400,
} from '../../types/course-groupsController/CourseGroupControllerCreateSchedule.ts'
import { useMutation } from '@tanstack/react-query'

export const courseGroupControllerCreateScheduleMutationKey = () => [{ url: '/course-groups/schedules' }] as const

export type CourseGroupControllerCreateScheduleMutationKey = ReturnType<typeof courseGroupControllerCreateScheduleMutationKey>

/**
 * @description Create a new schedule for a course group
 * @summary Create course group schedule
 * {@link /course-groups/schedules}
 */
export async function courseGroupControllerCreateSchedule(
  data: CourseGroupControllerCreateScheduleMutationRequest,
  config: Partial<RequestConfig<CourseGroupControllerCreateScheduleMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseGroupControllerCreateScheduleMutationResponse,
    ResponseErrorConfig<CourseGroupControllerCreateSchedule400>,
    CourseGroupControllerCreateScheduleMutationRequest
  >({ method: 'POST', url: `/course-groups/schedules`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new schedule for a course group
 * @summary Create course group schedule
 * {@link /course-groups/schedules}
 */
export function useCourseGroupControllerCreateSchedule<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseGroupControllerCreateScheduleMutationResponse>,
      ResponseErrorConfig<CourseGroupControllerCreateSchedule400>,
      { data: CourseGroupControllerCreateScheduleMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseGroupControllerCreateScheduleMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseGroupControllerCreateScheduleMutationKey()

  return useMutation<
    ResponseConfig<CourseGroupControllerCreateScheduleMutationResponse>,
    ResponseErrorConfig<CourseGroupControllerCreateSchedule400>,
    { data: CourseGroupControllerCreateScheduleMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return courseGroupControllerCreateSchedule(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}