/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseGroupControllerGetAssistantGroupsQueryResponse,
  CourseGroupControllerGetAssistantGroupsPathParams,
} from '../../types/course-groupsController/CourseGroupControllerGetAssistantGroups.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseGroupControllerGetAssistantGroupsSuspenseQueryKey = (
  assistantId: CourseGroupControllerGetAssistantGroupsPathParams['assistantId'],
  courseId: CourseGroupControllerGetAssistantGroupsPathParams['courseId'],
) => [{ url: '/course-groups/assistant/:assistantId/course/:courseId', params: { assistantId: assistantId, courseId: courseId } }] as const

export type CourseGroupControllerGetAssistantGroupsSuspenseQueryKey = ReturnType<typeof courseGroupControllerGetAssistantGroupsSuspenseQueryKey>

/**
 * @description Get all groups where the assistant teaches in a specific course
 * @summary Get groups assigned to an assistant for a specific course
 * {@link /course-groups/assistant/:assistantId/course/:courseId}
 */
export async function courseGroupControllerGetAssistantGroupsSuspense(
  assistantId: CourseGroupControllerGetAssistantGroupsPathParams['assistantId'],
  courseId: CourseGroupControllerGetAssistantGroupsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerGetAssistantGroupsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/course-groups/assistant/${assistantId}/course/${courseId}`,
    ...requestConfig,
  })
  return res
}

export function courseGroupControllerGetAssistantGroupsSuspenseQueryOptions(
  assistantId: CourseGroupControllerGetAssistantGroupsPathParams['assistantId'],
  courseId: CourseGroupControllerGetAssistantGroupsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseGroupControllerGetAssistantGroupsSuspenseQueryKey(assistantId, courseId)
  return queryOptions<
    ResponseConfig<CourseGroupControllerGetAssistantGroupsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<CourseGroupControllerGetAssistantGroupsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(assistantId && courseId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseGroupControllerGetAssistantGroupsSuspense(assistantId, courseId, config)
    },
  })
}

/**
 * @description Get all groups where the assistant teaches in a specific course
 * @summary Get groups assigned to an assistant for a specific course
 * {@link /course-groups/assistant/:assistantId/course/:courseId}
 */
export function useCourseGroupControllerGetAssistantGroupsSuspense<
  TData = ResponseConfig<CourseGroupControllerGetAssistantGroupsQueryResponse>,
  TQueryKey extends QueryKey = CourseGroupControllerGetAssistantGroupsSuspenseQueryKey,
>(
  assistantId: CourseGroupControllerGetAssistantGroupsPathParams['assistantId'],
  courseId: CourseGroupControllerGetAssistantGroupsPathParams['courseId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<ResponseConfig<CourseGroupControllerGetAssistantGroupsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseGroupControllerGetAssistantGroupsSuspenseQueryKey(assistantId, courseId)

  const query = useSuspenseQuery(
    {
      ...(courseGroupControllerGetAssistantGroupsSuspenseQueryOptions(assistantId, courseId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}