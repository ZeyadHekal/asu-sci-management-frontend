/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseGroupControllerGetPaginatedQueryResponse,
  CourseGroupControllerGetPaginatedQueryParams,
} from '../../types/course-groupsController/CourseGroupControllerGetPaginated.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseGroupControllerGetPaginatedSuspenseQueryKey = (params?: CourseGroupControllerGetPaginatedQueryParams) =>
  [{ url: '/course-groups' }, ...(params ? [params] : [])] as const

export type CourseGroupControllerGetPaginatedSuspenseQueryKey = ReturnType<typeof courseGroupControllerGetPaginatedSuspenseQueryKey>

/**
 * @summary Get all course-groups
 * {@link /course-groups}
 */
export async function courseGroupControllerGetPaginatedSuspense(
  params?: CourseGroupControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerGetPaginatedQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/course-groups`,
    params,
    ...requestConfig,
  })
  return res
}

export function courseGroupControllerGetPaginatedSuspenseQueryOptions(
  params?: CourseGroupControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseGroupControllerGetPaginatedSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<CourseGroupControllerGetPaginatedQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<CourseGroupControllerGetPaginatedQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseGroupControllerGetPaginatedSuspense(params, config)
    },
  })
}

/**
 * @summary Get all course-groups
 * {@link /course-groups}
 */
export function useCourseGroupControllerGetPaginatedSuspense<
  TData = ResponseConfig<CourseGroupControllerGetPaginatedQueryResponse>,
  TQueryKey extends QueryKey = CourseGroupControllerGetPaginatedSuspenseQueryKey,
>(
  params?: CourseGroupControllerGetPaginatedQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<CourseGroupControllerGetPaginatedQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseGroupControllerGetPaginatedSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(courseGroupControllerGetPaginatedSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}