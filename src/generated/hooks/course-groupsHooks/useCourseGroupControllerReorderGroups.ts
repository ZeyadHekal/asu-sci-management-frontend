/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseGroupControllerReorderGroupsMutationRequest,
  CourseGroupControllerReorderGroupsMutationResponse,
  CourseGroupControllerReorderGroupsPathParams,
} from '../../types/course-groupsController/CourseGroupControllerReorderGroups.ts'
import { useMutation } from '@tanstack/react-query'

export const courseGroupControllerReorderGroupsMutationKey = () => [{ url: '/course-groups/{id}/reorder' }] as const

export type CourseGroupControllerReorderGroupsMutationKey = ReturnType<typeof courseGroupControllerReorderGroupsMutationKey>

/**
 * @summary Reorder course groups
 * {@link /course-groups/:id/reorder}
 */
export async function courseGroupControllerReorderGroups(
  id: CourseGroupControllerReorderGroupsPathParams['id'],
  data: CourseGroupControllerReorderGroupsMutationRequest,
  config: Partial<RequestConfig<CourseGroupControllerReorderGroupsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerReorderGroupsMutationResponse, ResponseErrorConfig<Error>, CourseGroupControllerReorderGroupsMutationRequest>({
    method: 'PATCH',
    url: `/course-groups/${id}/reorder`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Reorder course groups
 * {@link /course-groups/:id/reorder}
 */
export function useCourseGroupControllerReorderGroups<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseGroupControllerReorderGroupsMutationResponse>,
      ResponseErrorConfig<Error>,
      { id: CourseGroupControllerReorderGroupsPathParams['id']; data: CourseGroupControllerReorderGroupsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseGroupControllerReorderGroupsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseGroupControllerReorderGroupsMutationKey()

  return useMutation<
    ResponseConfig<CourseGroupControllerReorderGroupsMutationResponse>,
    ResponseErrorConfig<Error>,
    { id: CourseGroupControllerReorderGroupsPathParams['id']; data: CourseGroupControllerReorderGroupsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return courseGroupControllerReorderGroups(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}