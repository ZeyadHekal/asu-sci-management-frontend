/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { CourseGroupControllerMoveStudentBetweenGroupsMutationResponse } from '../../types/course-groupsController/CourseGroupControllerMoveStudentBetweenGroups.ts'
import { useMutation } from '@tanstack/react-query'

export const courseGroupControllerMoveStudentBetweenGroupsMutationKey = () => [{ url: '/course-groups/move-student' }] as const

export type CourseGroupControllerMoveStudentBetweenGroupsMutationKey = ReturnType<typeof courseGroupControllerMoveStudentBetweenGroupsMutationKey>

/**
 * @summary Move student between groups
 * {@link /course-groups/move-student}
 */
export async function courseGroupControllerMoveStudentBetweenGroups(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerMoveStudentBetweenGroupsMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/course-groups/move-student`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Move student between groups
 * {@link /course-groups/move-student}
 */
export function useCourseGroupControllerMoveStudentBetweenGroups<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<CourseGroupControllerMoveStudentBetweenGroupsMutationResponse>, ResponseErrorConfig<Error>, void, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseGroupControllerMoveStudentBetweenGroupsMutationKey()

  return useMutation<ResponseConfig<CourseGroupControllerMoveStudentBetweenGroupsMutationResponse>, ResponseErrorConfig<Error>, void, TContext>(
    {
      mutationFn: async () => {
        return courseGroupControllerMoveStudentBetweenGroups(config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}