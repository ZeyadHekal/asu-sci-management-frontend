/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseGroupControllerDeleteMutationResponse,
  CourseGroupControllerDeletePathParams,
  CourseGroupControllerDelete400,
  CourseGroupControllerDelete404,
} from '../../types/course-groupsController/CourseGroupControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const courseGroupControllerDeleteMutationKey = () => [{ url: '/course-groups/{id}' }] as const

export type CourseGroupControllerDeleteMutationKey = ReturnType<typeof courseGroupControllerDeleteMutationKey>

/**
 * @description Delete a course group. All students enrolled in this group will be automatically moved to the default group of the same course. Default groups cannot be deleted.
 * @summary Delete a course-group
 * {@link /course-groups/:id}
 */
export async function courseGroupControllerDelete(
  id: CourseGroupControllerDeletePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseGroupControllerDeleteMutationResponse,
    ResponseErrorConfig<CourseGroupControllerDelete400 | CourseGroupControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/course-groups/${id}`, ...requestConfig })
  return res
}

/**
 * @description Delete a course group. All students enrolled in this group will be automatically moved to the default group of the same course. Default groups cannot be deleted.
 * @summary Delete a course-group
 * {@link /course-groups/:id}
 */
export function useCourseGroupControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseGroupControllerDeleteMutationResponse>,
      ResponseErrorConfig<CourseGroupControllerDelete400 | CourseGroupControllerDelete404>,
      { id: CourseGroupControllerDeletePathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseGroupControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<CourseGroupControllerDeleteMutationResponse>,
    ResponseErrorConfig<CourseGroupControllerDelete400 | CourseGroupControllerDelete404>,
    { id: CourseGroupControllerDeletePathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return courseGroupControllerDelete(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}