/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  CourseGroupControllerGetAvailableDevicesForLabQueryResponse,
  CourseGroupControllerGetAvailableDevicesForLabPathParams,
} from '../../types/course-groupsController/CourseGroupControllerGetAvailableDevicesForLab.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const courseGroupControllerGetAvailableDevicesForLabInfiniteQueryKey = (
  labId: CourseGroupControllerGetAvailableDevicesForLabPathParams['labId'],
  courseId: CourseGroupControllerGetAvailableDevicesForLabPathParams['courseId'],
) => [{ url: '/course-groups/lab/:labId/course/:courseId/available-devices', params: { labId: labId, courseId: courseId } }] as const

export type CourseGroupControllerGetAvailableDevicesForLabInfiniteQueryKey = ReturnType<typeof courseGroupControllerGetAvailableDevicesForLabInfiniteQueryKey>

/**
 * @description Get the number of available devices in a lab that meet the course software requirements
 * @summary Get available devices for a lab and course
 * {@link /course-groups/lab/:labId/course/:courseId/available-devices}
 */
export async function courseGroupControllerGetAvailableDevicesForLabInfinite(
  labId: CourseGroupControllerGetAvailableDevicesForLabPathParams['labId'],
  courseId: CourseGroupControllerGetAvailableDevicesForLabPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerGetAvailableDevicesForLabQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/course-groups/lab/${labId}/course/${courseId}/available-devices`,
    ...requestConfig,
  })
  return res
}

export function courseGroupControllerGetAvailableDevicesForLabInfiniteQueryOptions(
  labId: CourseGroupControllerGetAvailableDevicesForLabPathParams['labId'],
  courseId: CourseGroupControllerGetAvailableDevicesForLabPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseGroupControllerGetAvailableDevicesForLabInfiniteQueryKey(labId, courseId)
  return infiniteQueryOptions<
    ResponseConfig<CourseGroupControllerGetAvailableDevicesForLabQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<CourseGroupControllerGetAvailableDevicesForLabQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(labId && courseId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseGroupControllerGetAvailableDevicesForLabInfinite(labId, courseId, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Get the number of available devices in a lab that meet the course software requirements
 * @summary Get available devices for a lab and course
 * {@link /course-groups/lab/:labId/course/:courseId/available-devices}
 */
export function useCourseGroupControllerGetAvailableDevicesForLabInfinite<
  TData = InfiniteData<ResponseConfig<CourseGroupControllerGetAvailableDevicesForLabQueryResponse>>,
  TQueryData = ResponseConfig<CourseGroupControllerGetAvailableDevicesForLabQueryResponse>,
  TQueryKey extends QueryKey = CourseGroupControllerGetAvailableDevicesForLabInfiniteQueryKey,
>(
  labId: CourseGroupControllerGetAvailableDevicesForLabPathParams['labId'],
  courseId: CourseGroupControllerGetAvailableDevicesForLabPathParams['courseId'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<CourseGroupControllerGetAvailableDevicesForLabQueryResponse>,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseGroupControllerGetAvailableDevicesForLabInfiniteQueryKey(labId, courseId)

  const query = useInfiniteQuery(
    {
      ...(courseGroupControllerGetAvailableDevicesForLabInfiniteQueryOptions(labId, courseId, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}