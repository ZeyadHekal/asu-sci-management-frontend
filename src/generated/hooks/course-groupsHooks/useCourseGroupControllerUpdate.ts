/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseGroupControllerUpdateMutationRequest,
  CourseGroupControllerUpdateMutationResponse,
  CourseGroupControllerUpdatePathParams,
  CourseGroupControllerUpdate404,
} from '../../types/course-groupsController/CourseGroupControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const courseGroupControllerUpdateMutationKey = () => [{ url: '/course-groups/{id}' }] as const

export type CourseGroupControllerUpdateMutationKey = ReturnType<typeof courseGroupControllerUpdateMutationKey>

/**
 * @summary Update a course-group
 * {@link /course-groups/:id}
 */
export async function courseGroupControllerUpdate(
  id: CourseGroupControllerUpdatePathParams['id'],
  data?: CourseGroupControllerUpdateMutationRequest,
  config: Partial<RequestConfig<CourseGroupControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseGroupControllerUpdateMutationResponse,
    ResponseErrorConfig<CourseGroupControllerUpdate404>,
    CourseGroupControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/course-groups/${id}`, data, ...requestConfig })
  return res
}

/**
 * @summary Update a course-group
 * {@link /course-groups/:id}
 */
export function useCourseGroupControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseGroupControllerUpdateMutationResponse>,
      ResponseErrorConfig<CourseGroupControllerUpdate404>,
      { id: CourseGroupControllerUpdatePathParams['id']; data?: CourseGroupControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseGroupControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseGroupControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<CourseGroupControllerUpdateMutationResponse>,
    ResponseErrorConfig<CourseGroupControllerUpdate404>,
    { id: CourseGroupControllerUpdatePathParams['id']; data?: CourseGroupControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return courseGroupControllerUpdate(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}