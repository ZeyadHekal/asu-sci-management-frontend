/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseGroupControllerGetGroupDetailsQueryResponse,
  CourseGroupControllerGetGroupDetailsPathParams,
} from '../../types/course-groupsController/CourseGroupControllerGetGroupDetails.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseGroupControllerGetGroupDetailsSuspenseQueryKey = (groupId: CourseGroupControllerGetGroupDetailsPathParams['groupId']) =>
  [{ url: '/course-groups/:groupId/details', params: { groupId: groupId } }] as const

export type CourseGroupControllerGetGroupDetailsSuspenseQueryKey = ReturnType<typeof courseGroupControllerGetGroupDetailsSuspenseQueryKey>

/**
 * @summary Get group details with students
 * {@link /course-groups/:groupId/details}
 */
export async function courseGroupControllerGetGroupDetailsSuspense(
  groupId: CourseGroupControllerGetGroupDetailsPathParams['groupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseGroupControllerGetGroupDetailsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/course-groups/${groupId}/details`,
    ...requestConfig,
  })
  return res
}

export function courseGroupControllerGetGroupDetailsSuspenseQueryOptions(
  groupId: CourseGroupControllerGetGroupDetailsPathParams['groupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseGroupControllerGetGroupDetailsSuspenseQueryKey(groupId)
  return queryOptions<
    ResponseConfig<CourseGroupControllerGetGroupDetailsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<CourseGroupControllerGetGroupDetailsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!groupId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseGroupControllerGetGroupDetailsSuspense(groupId, config)
    },
  })
}

/**
 * @summary Get group details with students
 * {@link /course-groups/:groupId/details}
 */
export function useCourseGroupControllerGetGroupDetailsSuspense<
  TData = ResponseConfig<CourseGroupControllerGetGroupDetailsQueryResponse>,
  TQueryKey extends QueryKey = CourseGroupControllerGetGroupDetailsSuspenseQueryKey,
>(
  groupId: CourseGroupControllerGetGroupDetailsPathParams['groupId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<ResponseConfig<CourseGroupControllerGetGroupDetailsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseGroupControllerGetGroupDetailsSuspenseQueryKey(groupId)

  const query = useSuspenseQuery(
    {
      ...(courseGroupControllerGetGroupDetailsSuspenseQueryOptions(groupId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}