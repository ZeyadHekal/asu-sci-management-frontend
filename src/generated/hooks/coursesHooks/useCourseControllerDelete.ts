/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseControllerDeleteMutationResponse,
  CourseControllerDeletePathParams,
  CourseControllerDelete401,
  CourseControllerDelete403,
  CourseControllerDelete404,
} from '../../types/coursesController/CourseControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const courseControllerDeleteMutationKey = () => [{ url: '/courses/{course_ids}' }] as const

export type CourseControllerDeleteMutationKey = ReturnType<typeof courseControllerDeleteMutationKey>

/**
 * @description Delete one or multiple courses by IDs
 * @summary Delete courses
 * {@link /courses/:course_ids}
 */
export async function courseControllerDelete(
  course_ids: CourseControllerDeletePathParams['course_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseControllerDeleteMutationResponse,
    ResponseErrorConfig<CourseControllerDelete401 | CourseControllerDelete403 | CourseControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/courses/${course_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple courses by IDs
 * @summary Delete courses
 * {@link /courses/:course_ids}
 */
export function useCourseControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseControllerDeleteMutationResponse>,
      ResponseErrorConfig<CourseControllerDelete401 | CourseControllerDelete403 | CourseControllerDelete404>,
      { course_ids: CourseControllerDeletePathParams['course_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<CourseControllerDeleteMutationResponse>,
    ResponseErrorConfig<CourseControllerDelete401 | CourseControllerDelete403 | CourseControllerDelete404>,
    { course_ids: CourseControllerDeletePathParams['course_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ course_ids }) => {
        return courseControllerDelete(course_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}