/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseControllerGetByIdQueryResponse,
  CourseControllerGetByIdPathParams,
  CourseControllerGetById401,
  CourseControllerGetById403,
  CourseControllerGetById404,
} from '../../types/coursesController/CourseControllerGetById.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseControllerGetByIdSuspenseQueryKey = (course_id: CourseControllerGetByIdPathParams['course_id']) =>
  [{ url: '/courses/:course_id', params: { course_id: course_id } }] as const

export type CourseControllerGetByIdSuspenseQueryKey = ReturnType<typeof courseControllerGetByIdSuspenseQueryKey>

/**
 * @description Retrieve a course by its ID
 * @summary Get course by ID
 * {@link /courses/:course_id}
 */
export async function courseControllerGetByIdSuspense(
  course_id: CourseControllerGetByIdPathParams['course_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseControllerGetByIdQueryResponse,
    ResponseErrorConfig<CourseControllerGetById401 | CourseControllerGetById403 | CourseControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/courses/${course_id}`, ...requestConfig })
  return res
}

export function courseControllerGetByIdSuspenseQueryOptions(
  course_id: CourseControllerGetByIdPathParams['course_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseControllerGetByIdSuspenseQueryKey(course_id)
  return queryOptions<
    ResponseConfig<CourseControllerGetByIdQueryResponse>,
    ResponseErrorConfig<CourseControllerGetById401 | CourseControllerGetById403 | CourseControllerGetById404>,
    ResponseConfig<CourseControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!course_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseControllerGetByIdSuspense(course_id, config)
    },
  })
}

/**
 * @description Retrieve a course by its ID
 * @summary Get course by ID
 * {@link /courses/:course_id}
 */
export function useCourseControllerGetByIdSuspense<
  TData = ResponseConfig<CourseControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = CourseControllerGetByIdSuspenseQueryKey,
>(
  course_id: CourseControllerGetByIdPathParams['course_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<CourseControllerGetByIdQueryResponse>,
        ResponseErrorConfig<CourseControllerGetById401 | CourseControllerGetById403 | CourseControllerGetById404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseControllerGetByIdSuspenseQueryKey(course_id)

  const query = useSuspenseQuery(
    {
      ...(courseControllerGetByIdSuspenseQueryOptions(course_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<CourseControllerGetById401 | CourseControllerGetById403 | CourseControllerGetById404>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}