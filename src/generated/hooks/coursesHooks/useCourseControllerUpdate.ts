/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseControllerUpdateMutationRequest,
  CourseControllerUpdateMutationResponse,
  CourseControllerUpdatePathParams,
  CourseControllerUpdate400,
  CourseControllerUpdate401,
  CourseControllerUpdate403,
  CourseControllerUpdate404,
} from '../../types/coursesController/CourseControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const courseControllerUpdateMutationKey = () => [{ url: '/courses/{course_id}' }] as const

export type CourseControllerUpdateMutationKey = ReturnType<typeof courseControllerUpdateMutationKey>

/**
 * @description Update an existing course by ID
 * @summary Update course
 * {@link /courses/:course_id}
 */
export async function courseControllerUpdate(
  course_id: CourseControllerUpdatePathParams['course_id'],
  data?: CourseControllerUpdateMutationRequest,
  config: Partial<RequestConfig<CourseControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseControllerUpdateMutationResponse,
    ResponseErrorConfig<CourseControllerUpdate400 | CourseControllerUpdate401 | CourseControllerUpdate403 | CourseControllerUpdate404>,
    CourseControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/courses/${course_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing course by ID
 * @summary Update course
 * {@link /courses/:course_id}
 */
export function useCourseControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseControllerUpdateMutationResponse>,
      ResponseErrorConfig<CourseControllerUpdate400 | CourseControllerUpdate401 | CourseControllerUpdate403 | CourseControllerUpdate404>,
      { course_id: CourseControllerUpdatePathParams['course_id']; data?: CourseControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<CourseControllerUpdateMutationResponse>,
    ResponseErrorConfig<CourseControllerUpdate400 | CourseControllerUpdate401 | CourseControllerUpdate403 | CourseControllerUpdate404>,
    { course_id: CourseControllerUpdatePathParams['course_id']; data?: CourseControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ course_id, data }) => {
        return courseControllerUpdate(course_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}