/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseControllerCreateMutationRequest,
  CourseControllerCreateMutationResponse,
  CourseControllerCreate400,
  CourseControllerCreate401,
  CourseControllerCreate403,
} from '../../types/coursesController/CourseControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const courseControllerCreateMutationKey = () => [{ url: '/courses' }] as const

export type CourseControllerCreateMutationKey = ReturnType<typeof courseControllerCreateMutationKey>

/**
 * @description Create a new course
 * @summary Create course
 * {@link /courses}
 */
export async function courseControllerCreate(
  data: CourseControllerCreateMutationRequest,
  config: Partial<RequestConfig<CourseControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseControllerCreateMutationResponse,
    ResponseErrorConfig<CourseControllerCreate400 | CourseControllerCreate401 | CourseControllerCreate403>,
    CourseControllerCreateMutationRequest
  >({ method: 'POST', url: `/courses`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new course
 * @summary Create course
 * {@link /courses}
 */
export function useCourseControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseControllerCreateMutationResponse>,
      ResponseErrorConfig<CourseControllerCreate400 | CourseControllerCreate401 | CourseControllerCreate403>,
      { data: CourseControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<CourseControllerCreateMutationResponse>,
    ResponseErrorConfig<CourseControllerCreate400 | CourseControllerCreate401 | CourseControllerCreate403>,
    { data: CourseControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return courseControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}