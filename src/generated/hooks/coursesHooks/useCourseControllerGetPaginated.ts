/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  CourseControllerGetPaginatedQueryResponse,
  CourseControllerGetPaginatedQueryParams,
  CourseControllerGetPaginated401,
  CourseControllerGetPaginated403,
} from '../../types/coursesController/CourseControllerGetPaginated.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const courseControllerGetPaginatedQueryKey = (params?: CourseControllerGetPaginatedQueryParams) =>
  [{ url: '/courses/paginated' }, ...(params ? [params] : [])] as const

export type CourseControllerGetPaginatedQueryKey = ReturnType<typeof courseControllerGetPaginatedQueryKey>

/**
 * @description Retrieve courses with pagination
 * @summary Get paginated courses
 * {@link /courses/paginated}
 */
export async function courseControllerGetPaginated(
  params?: CourseControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseControllerGetPaginatedQueryResponse,
    ResponseErrorConfig<CourseControllerGetPaginated401 | CourseControllerGetPaginated403>,
    unknown
  >({ method: 'GET', url: `/courses/paginated`, params, ...requestConfig })
  return res
}

export function courseControllerGetPaginatedQueryOptions(
  params?: CourseControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseControllerGetPaginatedQueryKey(params)
  return queryOptions<
    ResponseConfig<CourseControllerGetPaginatedQueryResponse>,
    ResponseErrorConfig<CourseControllerGetPaginated401 | CourseControllerGetPaginated403>,
    ResponseConfig<CourseControllerGetPaginatedQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseControllerGetPaginated(params, config)
    },
  })
}

/**
 * @description Retrieve courses with pagination
 * @summary Get paginated courses
 * {@link /courses/paginated}
 */
export function useCourseControllerGetPaginated<
  TData = ResponseConfig<CourseControllerGetPaginatedQueryResponse>,
  TQueryData = ResponseConfig<CourseControllerGetPaginatedQueryResponse>,
  TQueryKey extends QueryKey = CourseControllerGetPaginatedQueryKey,
>(
  params?: CourseControllerGetPaginatedQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<CourseControllerGetPaginatedQueryResponse>,
        ResponseErrorConfig<CourseControllerGetPaginated401 | CourseControllerGetPaginated403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseControllerGetPaginatedQueryKey(params)

  const query = useQuery(
    {
      ...(courseControllerGetPaginatedQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<CourseControllerGetPaginated401 | CourseControllerGetPaginated403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}