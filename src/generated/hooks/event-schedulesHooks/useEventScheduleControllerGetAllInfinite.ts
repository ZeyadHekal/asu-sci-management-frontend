/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  EventScheduleControllerGetAllQueryResponse,
  EventScheduleControllerGetAll401,
  EventScheduleControllerGetAll403,
} from '../../types/event-schedulesController/EventScheduleControllerGetAll.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const eventScheduleControllerGetAllInfiniteQueryKey = () => [{ url: '/event-schedules' }] as const

export type EventScheduleControllerGetAllInfiniteQueryKey = ReturnType<typeof eventScheduleControllerGetAllInfiniteQueryKey>

/**
 * @description Retrieve all event schedules
 * @summary Get all event schedules
 * {@link /event-schedules}
 */
export async function eventScheduleControllerGetAllInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventScheduleControllerGetAllQueryResponse,
    ResponseErrorConfig<EventScheduleControllerGetAll401 | EventScheduleControllerGetAll403>,
    unknown
  >({ method: 'GET', url: `/event-schedules`, ...requestConfig })
  return res
}

export function eventScheduleControllerGetAllInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = eventScheduleControllerGetAllInfiniteQueryKey()
  return infiniteQueryOptions<
    ResponseConfig<EventScheduleControllerGetAllQueryResponse>,
    ResponseErrorConfig<EventScheduleControllerGetAll401 | EventScheduleControllerGetAll403>,
    ResponseConfig<EventScheduleControllerGetAllQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventScheduleControllerGetAllInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve all event schedules
 * @summary Get all event schedules
 * {@link /event-schedules}
 */
export function useEventScheduleControllerGetAllInfinite<
  TData = InfiniteData<ResponseConfig<EventScheduleControllerGetAllQueryResponse>>,
  TQueryData = ResponseConfig<EventScheduleControllerGetAllQueryResponse>,
  TQueryKey extends QueryKey = EventScheduleControllerGetAllInfiniteQueryKey,
>(
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<EventScheduleControllerGetAllQueryResponse>,
        ResponseErrorConfig<EventScheduleControllerGetAll401 | EventScheduleControllerGetAll403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventScheduleControllerGetAllInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(eventScheduleControllerGetAllInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<EventScheduleControllerGetAll401 | EventScheduleControllerGetAll403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}