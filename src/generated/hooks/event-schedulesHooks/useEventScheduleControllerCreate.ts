/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventScheduleControllerCreateMutationRequest,
  EventScheduleControllerCreateMutationResponse,
  EventScheduleControllerCreate400,
  EventScheduleControllerCreate401,
  EventScheduleControllerCreate403,
} from '../../types/event-schedulesController/EventScheduleControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const eventScheduleControllerCreateMutationKey = () => [{ url: '/event-schedules' }] as const

export type EventScheduleControllerCreateMutationKey = ReturnType<typeof eventScheduleControllerCreateMutationKey>

/**
 * @description Create a new event schedule
 * @summary Create event schedule
 * {@link /event-schedules}
 */
export async function eventScheduleControllerCreate(
  data: EventScheduleControllerCreateMutationRequest,
  config: Partial<RequestConfig<EventScheduleControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventScheduleControllerCreateMutationResponse,
    ResponseErrorConfig<EventScheduleControllerCreate400 | EventScheduleControllerCreate401 | EventScheduleControllerCreate403>,
    EventScheduleControllerCreateMutationRequest
  >({ method: 'POST', url: `/event-schedules`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new event schedule
 * @summary Create event schedule
 * {@link /event-schedules}
 */
export function useEventScheduleControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventScheduleControllerCreateMutationResponse>,
      ResponseErrorConfig<EventScheduleControllerCreate400 | EventScheduleControllerCreate401 | EventScheduleControllerCreate403>,
      { data: EventScheduleControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventScheduleControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventScheduleControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<EventScheduleControllerCreateMutationResponse>,
    ResponseErrorConfig<EventScheduleControllerCreate400 | EventScheduleControllerCreate401 | EventScheduleControllerCreate403>,
    { data: EventScheduleControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return eventScheduleControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}