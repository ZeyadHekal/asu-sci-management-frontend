/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  EventScheduleControllerGetByIdQueryResponse,
  EventScheduleControllerGetByIdPathParams,
  EventScheduleControllerGetById401,
  EventScheduleControllerGetById403,
  EventScheduleControllerGetById404,
} from '../../types/event-schedulesController/EventScheduleControllerGetById.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventScheduleControllerGetByIdSuspenseQueryKey = (event_schedule_id: EventScheduleControllerGetByIdPathParams['event_schedule_id']) =>
  [{ url: '/event-schedules/:event_schedule_id', params: { event_schedule_id: event_schedule_id } }] as const

export type EventScheduleControllerGetByIdSuspenseQueryKey = ReturnType<typeof eventScheduleControllerGetByIdSuspenseQueryKey>

/**
 * @description Retrieve an event schedule by its ID
 * @summary Get event schedule by ID
 * {@link /event-schedules/:event_schedule_id}
 */
export async function eventScheduleControllerGetByIdSuspense(
  event_schedule_id: EventScheduleControllerGetByIdPathParams['event_schedule_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventScheduleControllerGetByIdQueryResponse,
    ResponseErrorConfig<EventScheduleControllerGetById401 | EventScheduleControllerGetById403 | EventScheduleControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/event-schedules/${event_schedule_id}`, ...requestConfig })
  return res
}

export function eventScheduleControllerGetByIdSuspenseQueryOptions(
  event_schedule_id: EventScheduleControllerGetByIdPathParams['event_schedule_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventScheduleControllerGetByIdSuspenseQueryKey(event_schedule_id)
  return queryOptions<
    ResponseConfig<EventScheduleControllerGetByIdQueryResponse>,
    ResponseErrorConfig<EventScheduleControllerGetById401 | EventScheduleControllerGetById403 | EventScheduleControllerGetById404>,
    ResponseConfig<EventScheduleControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!event_schedule_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventScheduleControllerGetByIdSuspense(event_schedule_id, config)
    },
  })
}

/**
 * @description Retrieve an event schedule by its ID
 * @summary Get event schedule by ID
 * {@link /event-schedules/:event_schedule_id}
 */
export function useEventScheduleControllerGetByIdSuspense<
  TData = ResponseConfig<EventScheduleControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = EventScheduleControllerGetByIdSuspenseQueryKey,
>(
  event_schedule_id: EventScheduleControllerGetByIdPathParams['event_schedule_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<EventScheduleControllerGetByIdQueryResponse>,
        ResponseErrorConfig<EventScheduleControllerGetById401 | EventScheduleControllerGetById403 | EventScheduleControllerGetById404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventScheduleControllerGetByIdSuspenseQueryKey(event_schedule_id)

  const query = useSuspenseQuery(
    {
      ...(eventScheduleControllerGetByIdSuspenseQueryOptions(event_schedule_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<EventScheduleControllerGetById401 | EventScheduleControllerGetById403 | EventScheduleControllerGetById404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}