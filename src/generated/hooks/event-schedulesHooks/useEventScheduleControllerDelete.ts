/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventScheduleControllerDeleteMutationResponse,
  EventScheduleControllerDeletePathParams,
  EventScheduleControllerDelete401,
  EventScheduleControllerDelete403,
  EventScheduleControllerDelete404,
} from '../../types/event-schedulesController/EventScheduleControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const eventScheduleControllerDeleteMutationKey = () => [{ url: '/event-schedules/{event_schedule_ids}' }] as const

export type EventScheduleControllerDeleteMutationKey = ReturnType<typeof eventScheduleControllerDeleteMutationKey>

/**
 * @description Delete one or multiple event schedules by IDs
 * @summary Delete event schedules
 * {@link /event-schedules/:event_schedule_ids}
 */
export async function eventScheduleControllerDelete(
  event_schedule_ids: EventScheduleControllerDeletePathParams['event_schedule_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventScheduleControllerDeleteMutationResponse,
    ResponseErrorConfig<EventScheduleControllerDelete401 | EventScheduleControllerDelete403 | EventScheduleControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/event-schedules/${event_schedule_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple event schedules by IDs
 * @summary Delete event schedules
 * {@link /event-schedules/:event_schedule_ids}
 */
export function useEventScheduleControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventScheduleControllerDeleteMutationResponse>,
      ResponseErrorConfig<EventScheduleControllerDelete401 | EventScheduleControllerDelete403 | EventScheduleControllerDelete404>,
      { event_schedule_ids: EventScheduleControllerDeletePathParams['event_schedule_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventScheduleControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<EventScheduleControllerDeleteMutationResponse>,
    ResponseErrorConfig<EventScheduleControllerDelete401 | EventScheduleControllerDelete403 | EventScheduleControllerDelete404>,
    { event_schedule_ids: EventScheduleControllerDeletePathParams['event_schedule_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ event_schedule_ids }) => {
        return eventScheduleControllerDelete(event_schedule_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}