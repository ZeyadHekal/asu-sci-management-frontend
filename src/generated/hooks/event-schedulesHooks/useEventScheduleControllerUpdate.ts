/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventScheduleControllerUpdateMutationRequest,
  EventScheduleControllerUpdateMutationResponse,
  EventScheduleControllerUpdatePathParams,
  EventScheduleControllerUpdate400,
  EventScheduleControllerUpdate401,
  EventScheduleControllerUpdate403,
  EventScheduleControllerUpdate404,
} from '../../types/event-schedulesController/EventScheduleControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const eventScheduleControllerUpdateMutationKey = () => [{ url: '/event-schedules/{event_schedule_id}' }] as const

export type EventScheduleControllerUpdateMutationKey = ReturnType<typeof eventScheduleControllerUpdateMutationKey>

/**
 * @description Update an existing event schedule by ID
 * @summary Update event schedule
 * {@link /event-schedules/:event_schedule_id}
 */
export async function eventScheduleControllerUpdate(
  event_schedule_id: EventScheduleControllerUpdatePathParams['event_schedule_id'],
  data?: EventScheduleControllerUpdateMutationRequest,
  config: Partial<RequestConfig<EventScheduleControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventScheduleControllerUpdateMutationResponse,
    ResponseErrorConfig<
      EventScheduleControllerUpdate400 | EventScheduleControllerUpdate401 | EventScheduleControllerUpdate403 | EventScheduleControllerUpdate404
    >,
    EventScheduleControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/event-schedules/${event_schedule_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing event schedule by ID
 * @summary Update event schedule
 * {@link /event-schedules/:event_schedule_id}
 */
export function useEventScheduleControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventScheduleControllerUpdateMutationResponse>,
      ResponseErrorConfig<
        EventScheduleControllerUpdate400 | EventScheduleControllerUpdate401 | EventScheduleControllerUpdate403 | EventScheduleControllerUpdate404
      >,
      { event_schedule_id: EventScheduleControllerUpdatePathParams['event_schedule_id']; data?: EventScheduleControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventScheduleControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventScheduleControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<EventScheduleControllerUpdateMutationResponse>,
    ResponseErrorConfig<
      EventScheduleControllerUpdate400 | EventScheduleControllerUpdate401 | EventScheduleControllerUpdate403 | EventScheduleControllerUpdate404
    >,
    { event_schedule_id: EventScheduleControllerUpdatePathParams['event_schedule_id']; data?: EventScheduleControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ event_schedule_id, data }) => {
        return eventScheduleControllerUpdate(event_schedule_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}