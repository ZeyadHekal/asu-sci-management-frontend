/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  StudentFilesControllerUploadExamFileMutationResponse,
  StudentFilesControllerUploadExamFilePathParams,
} from '../../types/student-filesController/StudentFilesControllerUploadExamFile.ts'
import { useMutation } from '@tanstack/react-query'

export const studentFilesControllerUploadExamFileMutationKey = () => [{ url: '/student-files/upload/{studentId}/{courseId}/{eventId}' }] as const

export type StudentFilesControllerUploadExamFileMutationKey = ReturnType<typeof studentFilesControllerUploadExamFileMutationKey>

/**
 * @summary Upload a file for student exam submission
 * {@link /student-files/upload/:studentId/:courseId/:eventId}
 */
export async function studentFilesControllerUploadExamFile(
  studentId: StudentFilesControllerUploadExamFilePathParams['studentId'],
  courseId: StudentFilesControllerUploadExamFilePathParams['courseId'],
  eventId: StudentFilesControllerUploadExamFilePathParams['eventId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StudentFilesControllerUploadExamFileMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/student-files/upload/${studentId}/${courseId}/${eventId}`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Upload a file for student exam submission
 * {@link /student-files/upload/:studentId/:courseId/:eventId}
 */
export function useStudentFilesControllerUploadExamFile<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<StudentFilesControllerUploadExamFileMutationResponse>,
      ResponseErrorConfig<Error>,
      {
        studentId: StudentFilesControllerUploadExamFilePathParams['studentId']
        courseId: StudentFilesControllerUploadExamFilePathParams['courseId']
        eventId: StudentFilesControllerUploadExamFilePathParams['eventId']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? studentFilesControllerUploadExamFileMutationKey()

  return useMutation<
    ResponseConfig<StudentFilesControllerUploadExamFileMutationResponse>,
    ResponseErrorConfig<Error>,
    {
      studentId: StudentFilesControllerUploadExamFilePathParams['studentId']
      courseId: StudentFilesControllerUploadExamFilePathParams['courseId']
      eventId: StudentFilesControllerUploadExamFilePathParams['eventId']
    },
    TContext
  >(
    {
      mutationFn: async ({ studentId, courseId, eventId }) => {
        return studentFilesControllerUploadExamFile(studentId, courseId, eventId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}