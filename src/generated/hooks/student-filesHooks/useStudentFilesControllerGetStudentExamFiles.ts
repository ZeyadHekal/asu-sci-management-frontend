/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  StudentFilesControllerGetStudentExamFilesQueryResponse,
  StudentFilesControllerGetStudentExamFilesPathParams,
} from '../../types/student-filesController/StudentFilesControllerGetStudentExamFiles.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const studentFilesControllerGetStudentExamFilesQueryKey = (
  studentId: StudentFilesControllerGetStudentExamFilesPathParams['studentId'],
  eventId: StudentFilesControllerGetStudentExamFilesPathParams['eventId'],
) => [{ url: '/student-files/:studentId/:eventId', params: { studentId: studentId, eventId: eventId } }] as const

export type StudentFilesControllerGetStudentExamFilesQueryKey = ReturnType<typeof studentFilesControllerGetStudentExamFilesQueryKey>

/**
 * @summary Get all files submitted by a student for an exam
 * {@link /student-files/:studentId/:eventId}
 */
export async function studentFilesControllerGetStudentExamFiles(
  studentId: StudentFilesControllerGetStudentExamFilesPathParams['studentId'],
  eventId: StudentFilesControllerGetStudentExamFilesPathParams['eventId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StudentFilesControllerGetStudentExamFilesQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/student-files/${studentId}/${eventId}`,
    ...requestConfig,
  })
  return res
}

export function studentFilesControllerGetStudentExamFilesQueryOptions(
  studentId: StudentFilesControllerGetStudentExamFilesPathParams['studentId'],
  eventId: StudentFilesControllerGetStudentExamFilesPathParams['eventId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = studentFilesControllerGetStudentExamFilesQueryKey(studentId, eventId)
  return queryOptions<
    ResponseConfig<StudentFilesControllerGetStudentExamFilesQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<StudentFilesControllerGetStudentExamFilesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(studentId && eventId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return studentFilesControllerGetStudentExamFiles(studentId, eventId, config)
    },
  })
}

/**
 * @summary Get all files submitted by a student for an exam
 * {@link /student-files/:studentId/:eventId}
 */
export function useStudentFilesControllerGetStudentExamFiles<
  TData = ResponseConfig<StudentFilesControllerGetStudentExamFilesQueryResponse>,
  TQueryData = ResponseConfig<StudentFilesControllerGetStudentExamFilesQueryResponse>,
  TQueryKey extends QueryKey = StudentFilesControllerGetStudentExamFilesQueryKey,
>(
  studentId: StudentFilesControllerGetStudentExamFilesPathParams['studentId'],
  eventId: StudentFilesControllerGetStudentExamFilesPathParams['eventId'],
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<StudentFilesControllerGetStudentExamFilesQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? studentFilesControllerGetStudentExamFilesQueryKey(studentId, eventId)

  const query = useQuery(
    {
      ...(studentFilesControllerGetStudentExamFilesQueryOptions(studentId, eventId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}