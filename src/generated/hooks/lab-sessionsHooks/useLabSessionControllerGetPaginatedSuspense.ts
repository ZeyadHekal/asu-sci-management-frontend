/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  LabSessionControllerGetPaginatedQueryResponse,
  LabSessionControllerGetPaginatedQueryParams,
  LabSessionControllerGetPaginated401,
  LabSessionControllerGetPaginated403,
} from '../../types/lab-sessionsController/LabSessionControllerGetPaginated.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const labSessionControllerGetPaginatedSuspenseQueryKey = (params?: LabSessionControllerGetPaginatedQueryParams) =>
  [{ url: '/lab-session/paginated' }, ...(params ? [params] : [])] as const

export type LabSessionControllerGetPaginatedSuspenseQueryKey = ReturnType<typeof labSessionControllerGetPaginatedSuspenseQueryKey>

/**
 * @description Retrieve lab sessions with pagination
 * @summary Get paginated lab sessions
 * {@link /lab-session/paginated}
 */
export async function labSessionControllerGetPaginatedSuspense(
  params?: LabSessionControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabSessionControllerGetPaginatedQueryResponse,
    ResponseErrorConfig<LabSessionControllerGetPaginated401 | LabSessionControllerGetPaginated403>,
    unknown
  >({ method: 'GET', url: `/lab-session/paginated`, params, ...requestConfig })
  return res
}

export function labSessionControllerGetPaginatedSuspenseQueryOptions(
  params?: LabSessionControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = labSessionControllerGetPaginatedSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<LabSessionControllerGetPaginatedQueryResponse>,
    ResponseErrorConfig<LabSessionControllerGetPaginated401 | LabSessionControllerGetPaginated403>,
    ResponseConfig<LabSessionControllerGetPaginatedQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return labSessionControllerGetPaginatedSuspense(params, config)
    },
  })
}

/**
 * @description Retrieve lab sessions with pagination
 * @summary Get paginated lab sessions
 * {@link /lab-session/paginated}
 */
export function useLabSessionControllerGetPaginatedSuspense<
  TData = ResponseConfig<LabSessionControllerGetPaginatedQueryResponse>,
  TQueryKey extends QueryKey = LabSessionControllerGetPaginatedSuspenseQueryKey,
>(
  params?: LabSessionControllerGetPaginatedQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<LabSessionControllerGetPaginatedQueryResponse>,
        ResponseErrorConfig<LabSessionControllerGetPaginated401 | LabSessionControllerGetPaginated403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? labSessionControllerGetPaginatedSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(labSessionControllerGetPaginatedSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<LabSessionControllerGetPaginated401 | LabSessionControllerGetPaginated403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}