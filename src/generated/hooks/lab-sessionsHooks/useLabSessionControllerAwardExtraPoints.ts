/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabSessionControllerAwardExtraPointsMutationRequest,
  LabSessionControllerAwardExtraPointsMutationResponse,
  LabSessionControllerAwardExtraPointsPathParams,
} from '../../types/lab-sessionsController/LabSessionControllerAwardExtraPoints.ts'
import { useMutation } from '@tanstack/react-query'

export const labSessionControllerAwardExtraPointsMutationKey = () => [{ url: '/lab-session/{sessionId}/award-points' }] as const

export type LabSessionControllerAwardExtraPointsMutationKey = ReturnType<typeof labSessionControllerAwardExtraPointsMutationKey>

/**
 * @description Award extra points to a student
 * @summary Award extra points
 * {@link /lab-session/:sessionId/award-points}
 */
export async function labSessionControllerAwardExtraPoints(
  sessionId: LabSessionControllerAwardExtraPointsPathParams['sessionId'],
  data: LabSessionControllerAwardExtraPointsMutationRequest,
  config: Partial<RequestConfig<LabSessionControllerAwardExtraPointsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabSessionControllerAwardExtraPointsMutationResponse,
    ResponseErrorConfig<Error>,
    LabSessionControllerAwardExtraPointsMutationRequest
  >({ method: 'POST', url: `/lab-session/${sessionId}/award-points`, data, ...requestConfig })
  return res
}

/**
 * @description Award extra points to a student
 * @summary Award extra points
 * {@link /lab-session/:sessionId/award-points}
 */
export function useLabSessionControllerAwardExtraPoints<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabSessionControllerAwardExtraPointsMutationResponse>,
      ResponseErrorConfig<Error>,
      { sessionId: LabSessionControllerAwardExtraPointsPathParams['sessionId']; data: LabSessionControllerAwardExtraPointsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LabSessionControllerAwardExtraPointsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labSessionControllerAwardExtraPointsMutationKey()

  return useMutation<
    ResponseConfig<LabSessionControllerAwardExtraPointsMutationResponse>,
    ResponseErrorConfig<Error>,
    { sessionId: LabSessionControllerAwardExtraPointsPathParams['sessionId']; data: LabSessionControllerAwardExtraPointsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ sessionId, data }) => {
        return labSessionControllerAwardExtraPoints(sessionId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}