/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabSessionControllerAddStudentToSessionMutationRequest,
  LabSessionControllerAddStudentToSessionMutationResponse,
  LabSessionControllerAddStudentToSessionPathParams,
} from '../../types/lab-sessionsController/LabSessionControllerAddStudentToSession.ts'
import { useMutation } from '@tanstack/react-query'

export const labSessionControllerAddStudentToSessionMutationKey = () => [{ url: '/lab-session/{sessionId}/add-student' }] as const

export type LabSessionControllerAddStudentToSessionMutationKey = ReturnType<typeof labSessionControllerAddStudentToSessionMutationKey>

/**
 * @description Add a student who was not initially in the session
 * @summary Add student to session
 * {@link /lab-session/:sessionId/add-student}
 */
export async function labSessionControllerAddStudentToSession(
  sessionId: LabSessionControllerAddStudentToSessionPathParams['sessionId'],
  data: LabSessionControllerAddStudentToSessionMutationRequest,
  config: Partial<RequestConfig<LabSessionControllerAddStudentToSessionMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabSessionControllerAddStudentToSessionMutationResponse,
    ResponseErrorConfig<Error>,
    LabSessionControllerAddStudentToSessionMutationRequest
  >({ method: 'POST', url: `/lab-session/${sessionId}/add-student`, data, ...requestConfig })
  return res
}

/**
 * @description Add a student who was not initially in the session
 * @summary Add student to session
 * {@link /lab-session/:sessionId/add-student}
 */
export function useLabSessionControllerAddStudentToSession<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabSessionControllerAddStudentToSessionMutationResponse>,
      ResponseErrorConfig<Error>,
      { sessionId: LabSessionControllerAddStudentToSessionPathParams['sessionId']; data: LabSessionControllerAddStudentToSessionMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LabSessionControllerAddStudentToSessionMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labSessionControllerAddStudentToSessionMutationKey()

  return useMutation<
    ResponseConfig<LabSessionControllerAddStudentToSessionMutationResponse>,
    ResponseErrorConfig<Error>,
    { sessionId: LabSessionControllerAddStudentToSessionPathParams['sessionId']; data: LabSessionControllerAddStudentToSessionMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ sessionId, data }) => {
        return labSessionControllerAddStudentToSession(sessionId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}