/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  LabSessionControllerGetActiveSessionQueryResponse,
  LabSessionControllerGetActiveSessionPathParams,
  LabSessionControllerGetActiveSession404,
} from '../../types/lab-sessionsController/LabSessionControllerGetActiveSession.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const labSessionControllerGetActiveSessionInfiniteQueryKey = (
  assistantId: LabSessionControllerGetActiveSessionPathParams['assistantId'],
  courseGroupId: LabSessionControllerGetActiveSessionPathParams['courseGroupId'],
) => [{ url: '/lab-session/assistant/:assistantId/group/:courseGroupId/active', params: { assistantId: assistantId, courseGroupId: courseGroupId } }] as const

export type LabSessionControllerGetActiveSessionInfiniteQueryKey = ReturnType<typeof labSessionControllerGetActiveSessionInfiniteQueryKey>

/**
 * @description Get details of current active session for a course group
 * @summary Get active session details
 * {@link /lab-session/assistant/:assistantId/group/:courseGroupId/active}
 */
export async function labSessionControllerGetActiveSessionInfinite(
  assistantId: LabSessionControllerGetActiveSessionPathParams['assistantId'],
  courseGroupId: LabSessionControllerGetActiveSessionPathParams['courseGroupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<LabSessionControllerGetActiveSessionQueryResponse, ResponseErrorConfig<LabSessionControllerGetActiveSession404>, unknown>({
    method: 'GET',
    url: `/lab-session/assistant/${assistantId}/group/${courseGroupId}/active`,
    ...requestConfig,
  })
  return res
}

export function labSessionControllerGetActiveSessionInfiniteQueryOptions(
  assistantId: LabSessionControllerGetActiveSessionPathParams['assistantId'],
  courseGroupId: LabSessionControllerGetActiveSessionPathParams['courseGroupId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = labSessionControllerGetActiveSessionInfiniteQueryKey(assistantId, courseGroupId)
  return infiniteQueryOptions<
    ResponseConfig<LabSessionControllerGetActiveSessionQueryResponse>,
    ResponseErrorConfig<LabSessionControllerGetActiveSession404>,
    ResponseConfig<LabSessionControllerGetActiveSessionQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(assistantId && courseGroupId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return labSessionControllerGetActiveSessionInfinite(assistantId, courseGroupId, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Get details of current active session for a course group
 * @summary Get active session details
 * {@link /lab-session/assistant/:assistantId/group/:courseGroupId/active}
 */
export function useLabSessionControllerGetActiveSessionInfinite<
  TData = InfiniteData<ResponseConfig<LabSessionControllerGetActiveSessionQueryResponse>>,
  TQueryData = ResponseConfig<LabSessionControllerGetActiveSessionQueryResponse>,
  TQueryKey extends QueryKey = LabSessionControllerGetActiveSessionInfiniteQueryKey,
>(
  assistantId: LabSessionControllerGetActiveSessionPathParams['assistantId'],
  courseGroupId: LabSessionControllerGetActiveSessionPathParams['courseGroupId'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<LabSessionControllerGetActiveSessionQueryResponse>,
        ResponseErrorConfig<LabSessionControllerGetActiveSession404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? labSessionControllerGetActiveSessionInfiniteQueryKey(assistantId, courseGroupId)

  const query = useInfiniteQuery(
    {
      ...(labSessionControllerGetActiveSessionInfiniteQueryOptions(assistantId, courseGroupId, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<LabSessionControllerGetActiveSession404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}