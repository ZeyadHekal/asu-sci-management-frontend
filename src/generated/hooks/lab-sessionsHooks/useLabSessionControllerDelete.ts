/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabSessionControllerDeleteMutationResponse,
  LabSessionControllerDeletePathParams,
  LabSessionControllerDelete401,
  LabSessionControllerDelete403,
  LabSessionControllerDelete404,
} from '../../types/lab-sessionsController/LabSessionControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const labSessionControllerDeleteMutationKey = () => [{ url: '/lab-session/{lab_session_ids}' }] as const

export type LabSessionControllerDeleteMutationKey = ReturnType<typeof labSessionControllerDeleteMutationKey>

/**
 * @description Delete one or multiple lab sessions by IDs
 * @summary Delete lab sessions
 * {@link /lab-session/:lab_session_ids}
 */
export async function labSessionControllerDelete(
  lab_session_ids: LabSessionControllerDeletePathParams['lab_session_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabSessionControllerDeleteMutationResponse,
    ResponseErrorConfig<LabSessionControllerDelete401 | LabSessionControllerDelete403 | LabSessionControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/lab-session/${lab_session_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple lab sessions by IDs
 * @summary Delete lab sessions
 * {@link /lab-session/:lab_session_ids}
 */
export function useLabSessionControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabSessionControllerDeleteMutationResponse>,
      ResponseErrorConfig<LabSessionControllerDelete401 | LabSessionControllerDelete403 | LabSessionControllerDelete404>,
      { lab_session_ids: LabSessionControllerDeletePathParams['lab_session_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labSessionControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<LabSessionControllerDeleteMutationResponse>,
    ResponseErrorConfig<LabSessionControllerDelete401 | LabSessionControllerDelete403 | LabSessionControllerDelete404>,
    { lab_session_ids: LabSessionControllerDeletePathParams['lab_session_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ lab_session_ids }) => {
        return labSessionControllerDelete(lab_session_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}