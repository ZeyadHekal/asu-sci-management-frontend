/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabSessionControllerStartSessionMutationRequest,
  LabSessionControllerStartSessionMutationResponse,
  LabSessionControllerStartSession400,
} from '../../types/lab-sessionsController/LabSessionControllerStartSession.ts'
import { useMutation } from '@tanstack/react-query'

export const labSessionControllerStartSessionMutationKey = () => [{ url: '/lab-session/start-session' }] as const

export type LabSessionControllerStartSessionMutationKey = ReturnType<typeof labSessionControllerStartSessionMutationKey>

/**
 * @description Start a new lab session for a course group
 * @summary Start lab session
 * {@link /lab-session/start-session}
 */
export async function labSessionControllerStartSession(
  data: LabSessionControllerStartSessionMutationRequest,
  config: Partial<RequestConfig<LabSessionControllerStartSessionMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabSessionControllerStartSessionMutationResponse,
    ResponseErrorConfig<LabSessionControllerStartSession400>,
    LabSessionControllerStartSessionMutationRequest
  >({ method: 'POST', url: `/lab-session/start-session`, data, ...requestConfig })
  return res
}

/**
 * @description Start a new lab session for a course group
 * @summary Start lab session
 * {@link /lab-session/start-session}
 */
export function useLabSessionControllerStartSession<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabSessionControllerStartSessionMutationResponse>,
      ResponseErrorConfig<LabSessionControllerStartSession400>,
      { data: LabSessionControllerStartSessionMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LabSessionControllerStartSessionMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labSessionControllerStartSessionMutationKey()

  return useMutation<
    ResponseConfig<LabSessionControllerStartSessionMutationResponse>,
    ResponseErrorConfig<LabSessionControllerStartSession400>,
    { data: LabSessionControllerStartSessionMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return labSessionControllerStartSession(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}