/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabSessionControllerTakeAttendanceMutationRequest,
  LabSessionControllerTakeAttendanceMutationResponse,
  LabSessionControllerTakeAttendancePathParams,
} from '../../types/lab-sessionsController/LabSessionControllerTakeAttendance.ts'
import { useMutation } from '@tanstack/react-query'

export const labSessionControllerTakeAttendanceMutationKey = () => [{ url: '/lab-session/{sessionId}/attendance' }] as const

export type LabSessionControllerTakeAttendanceMutationKey = ReturnType<typeof labSessionControllerTakeAttendanceMutationKey>

/**
 * @description Mark student as present or absent
 * @summary Take attendance
 * {@link /lab-session/:sessionId/attendance}
 */
export async function labSessionControllerTakeAttendance(
  sessionId: LabSessionControllerTakeAttendancePathParams['sessionId'],
  data: LabSessionControllerTakeAttendanceMutationRequest,
  config: Partial<RequestConfig<LabSessionControllerTakeAttendanceMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<LabSessionControllerTakeAttendanceMutationResponse, ResponseErrorConfig<Error>, LabSessionControllerTakeAttendanceMutationRequest>({
    method: 'POST',
    url: `/lab-session/${sessionId}/attendance`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @description Mark student as present or absent
 * @summary Take attendance
 * {@link /lab-session/:sessionId/attendance}
 */
export function useLabSessionControllerTakeAttendance<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabSessionControllerTakeAttendanceMutationResponse>,
      ResponseErrorConfig<Error>,
      { sessionId: LabSessionControllerTakeAttendancePathParams['sessionId']; data: LabSessionControllerTakeAttendanceMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LabSessionControllerTakeAttendanceMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labSessionControllerTakeAttendanceMutationKey()

  return useMutation<
    ResponseConfig<LabSessionControllerTakeAttendanceMutationResponse>,
    ResponseErrorConfig<Error>,
    { sessionId: LabSessionControllerTakeAttendancePathParams['sessionId']; data: LabSessionControllerTakeAttendanceMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ sessionId, data }) => {
        return labSessionControllerTakeAttendance(sessionId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}