/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  DeviceReportControllerGetMyReportsQueryResponse,
  DeviceReportControllerGetMyReportsQueryParams,
  DeviceReportControllerGetMyReports401,
  DeviceReportControllerGetMyReports403,
} from '../../types/device-reportsController/DeviceReportControllerGetMyReports.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const deviceReportControllerGetMyReportsQueryKey = (params?: DeviceReportControllerGetMyReportsQueryParams) =>
  [{ url: '/device-reports/my-reports' }, ...(params ? [params] : [])] as const

export type DeviceReportControllerGetMyReportsQueryKey = ReturnType<typeof deviceReportControllerGetMyReportsQueryKey>

/**
 * @description Get reports created by the current user (Students)
 * @summary Get my device reports
 * {@link /device-reports/my-reports}
 */
export async function deviceReportControllerGetMyReports(
  params?: DeviceReportControllerGetMyReportsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerGetMyReportsQueryResponse,
    ResponseErrorConfig<DeviceReportControllerGetMyReports401 | DeviceReportControllerGetMyReports403>,
    unknown
  >({ method: 'GET', url: `/device-reports/my-reports`, params, ...requestConfig })
  return res
}

export function deviceReportControllerGetMyReportsQueryOptions(
  params?: DeviceReportControllerGetMyReportsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceReportControllerGetMyReportsQueryKey(params)
  return queryOptions<
    ResponseConfig<DeviceReportControllerGetMyReportsQueryResponse>,
    ResponseErrorConfig<DeviceReportControllerGetMyReports401 | DeviceReportControllerGetMyReports403>,
    ResponseConfig<DeviceReportControllerGetMyReportsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceReportControllerGetMyReports(params, config)
    },
  })
}

/**
 * @description Get reports created by the current user (Students)
 * @summary Get my device reports
 * {@link /device-reports/my-reports}
 */
export function useDeviceReportControllerGetMyReports<
  TData = ResponseConfig<DeviceReportControllerGetMyReportsQueryResponse>,
  TQueryData = ResponseConfig<DeviceReportControllerGetMyReportsQueryResponse>,
  TQueryKey extends QueryKey = DeviceReportControllerGetMyReportsQueryKey,
>(
  params?: DeviceReportControllerGetMyReportsQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<DeviceReportControllerGetMyReportsQueryResponse>,
        ResponseErrorConfig<DeviceReportControllerGetMyReports401 | DeviceReportControllerGetMyReports403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceReportControllerGetMyReportsQueryKey(params)

  const query = useQuery(
    {
      ...(deviceReportControllerGetMyReportsQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<DeviceReportControllerGetMyReports401 | DeviceReportControllerGetMyReports403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}