/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  DeviceReportControllerGetDeviceReportsQueryResponse,
  DeviceReportControllerGetDeviceReportsPathParams,
  DeviceReportControllerGetDeviceReportsQueryParams,
  DeviceReportControllerGetDeviceReports401,
  DeviceReportControllerGetDeviceReports403,
} from '../../types/device-reportsController/DeviceReportControllerGetDeviceReports.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const deviceReportControllerGetDeviceReportsSuspenseQueryKey = (
  device_id: DeviceReportControllerGetDeviceReportsPathParams['device_id'],
  params?: DeviceReportControllerGetDeviceReportsQueryParams,
) => [{ url: '/device-reports/device/:device_id', params: { device_id: device_id } }, ...(params ? [params] : [])] as const

export type DeviceReportControllerGetDeviceReportsSuspenseQueryKey = ReturnType<typeof deviceReportControllerGetDeviceReportsSuspenseQueryKey>

/**
 * @description Get all reports for a specific device (Admin/Management)
 * @summary Get device reports
 * {@link /device-reports/device/:device_id}
 */
export async function deviceReportControllerGetDeviceReportsSuspense(
  device_id: DeviceReportControllerGetDeviceReportsPathParams['device_id'],
  params?: DeviceReportControllerGetDeviceReportsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerGetDeviceReportsQueryResponse,
    ResponseErrorConfig<DeviceReportControllerGetDeviceReports401 | DeviceReportControllerGetDeviceReports403>,
    unknown
  >({ method: 'GET', url: `/device-reports/device/${device_id}`, params, ...requestConfig })
  return res
}

export function deviceReportControllerGetDeviceReportsSuspenseQueryOptions(
  device_id: DeviceReportControllerGetDeviceReportsPathParams['device_id'],
  params?: DeviceReportControllerGetDeviceReportsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceReportControllerGetDeviceReportsSuspenseQueryKey(device_id, params)
  return queryOptions<
    ResponseConfig<DeviceReportControllerGetDeviceReportsQueryResponse>,
    ResponseErrorConfig<DeviceReportControllerGetDeviceReports401 | DeviceReportControllerGetDeviceReports403>,
    ResponseConfig<DeviceReportControllerGetDeviceReportsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceReportControllerGetDeviceReportsSuspense(device_id, params, config)
    },
  })
}

/**
 * @description Get all reports for a specific device (Admin/Management)
 * @summary Get device reports
 * {@link /device-reports/device/:device_id}
 */
export function useDeviceReportControllerGetDeviceReportsSuspense<
  TData = ResponseConfig<DeviceReportControllerGetDeviceReportsQueryResponse>,
  TQueryKey extends QueryKey = DeviceReportControllerGetDeviceReportsSuspenseQueryKey,
>(
  device_id: DeviceReportControllerGetDeviceReportsPathParams['device_id'],
  params?: DeviceReportControllerGetDeviceReportsQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<DeviceReportControllerGetDeviceReportsQueryResponse>,
        ResponseErrorConfig<DeviceReportControllerGetDeviceReports401 | DeviceReportControllerGetDeviceReports403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceReportControllerGetDeviceReportsSuspenseQueryKey(device_id, params)

  const query = useSuspenseQuery(
    {
      ...(deviceReportControllerGetDeviceReportsSuspenseQueryOptions(device_id, params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<DeviceReportControllerGetDeviceReports401 | DeviceReportControllerGetDeviceReports403>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}