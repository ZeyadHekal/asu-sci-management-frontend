/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceReportControllerUpdateMutationRequest,
  DeviceReportControllerUpdateMutationResponse,
  DeviceReportControllerUpdatePathParams,
  DeviceReportControllerUpdate400,
  DeviceReportControllerUpdate401,
  DeviceReportControllerUpdate403,
  DeviceReportControllerUpdate404,
} from '../../types/device-reportsController/DeviceReportControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceReportControllerUpdateMutationKey = () => [{ url: '/device-reports/{device_report_id}' }] as const

export type DeviceReportControllerUpdateMutationKey = ReturnType<typeof deviceReportControllerUpdateMutationKey>

/**
 * @description Update an existing device report by ID (Admin/Management)
 * @summary Update device report
 * {@link /device-reports/:device_report_id}
 */
export async function deviceReportControllerUpdate(
  device_report_id: DeviceReportControllerUpdatePathParams['device_report_id'],
  data: DeviceReportControllerUpdateMutationRequest,
  config: Partial<RequestConfig<DeviceReportControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerUpdateMutationResponse,
    ResponseErrorConfig<DeviceReportControllerUpdate400 | DeviceReportControllerUpdate401 | DeviceReportControllerUpdate403 | DeviceReportControllerUpdate404>,
    DeviceReportControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/device-reports/${device_report_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing device report by ID (Admin/Management)
 * @summary Update device report
 * {@link /device-reports/:device_report_id}
 */
export function useDeviceReportControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceReportControllerUpdateMutationResponse>,
      ResponseErrorConfig<
        DeviceReportControllerUpdate400 | DeviceReportControllerUpdate401 | DeviceReportControllerUpdate403 | DeviceReportControllerUpdate404
      >,
      { device_report_id: DeviceReportControllerUpdatePathParams['device_report_id']; data: DeviceReportControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceReportControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceReportControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<DeviceReportControllerUpdateMutationResponse>,
    ResponseErrorConfig<DeviceReportControllerUpdate400 | DeviceReportControllerUpdate401 | DeviceReportControllerUpdate403 | DeviceReportControllerUpdate404>,
    { device_report_id: DeviceReportControllerUpdatePathParams['device_report_id']; data: DeviceReportControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ device_report_id, data }) => {
        return deviceReportControllerUpdate(device_report_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}