/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceReportControllerDeleteMutationResponse,
  DeviceReportControllerDeletePathParams,
  DeviceReportControllerDelete401,
  DeviceReportControllerDelete403,
  DeviceReportControllerDelete404,
} from '../../types/device-reportsController/DeviceReportControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceReportControllerDeleteMutationKey = () => [{ url: '/device-reports/{device_report_ids}' }] as const

export type DeviceReportControllerDeleteMutationKey = ReturnType<typeof deviceReportControllerDeleteMutationKey>

/**
 * @description Delete one or multiple device reports by IDs (Admin/Management)
 * @summary Delete device reports
 * {@link /device-reports/:device_report_ids}
 */
export async function deviceReportControllerDelete(
  device_report_ids: DeviceReportControllerDeletePathParams['device_report_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerDeleteMutationResponse,
    ResponseErrorConfig<DeviceReportControllerDelete401 | DeviceReportControllerDelete403 | DeviceReportControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/device-reports/${device_report_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple device reports by IDs (Admin/Management)
 * @summary Delete device reports
 * {@link /device-reports/:device_report_ids}
 */
export function useDeviceReportControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceReportControllerDeleteMutationResponse>,
      ResponseErrorConfig<DeviceReportControllerDelete401 | DeviceReportControllerDelete403 | DeviceReportControllerDelete404>,
      { device_report_ids: DeviceReportControllerDeletePathParams['device_report_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceReportControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<DeviceReportControllerDeleteMutationResponse>,
    ResponseErrorConfig<DeviceReportControllerDelete401 | DeviceReportControllerDelete403 | DeviceReportControllerDelete404>,
    { device_report_ids: DeviceReportControllerDeletePathParams['device_report_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ device_report_ids }) => {
        return deviceReportControllerDelete(device_report_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}