/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  DeviceReportControllerGetMyAssignedReportsQueryResponse,
  DeviceReportControllerGetMyAssignedReportsQueryParams,
  DeviceReportControllerGetMyAssignedReports401,
  DeviceReportControllerGetMyAssignedReports403,
} from '../../types/device-reportsController/DeviceReportControllerGetMyAssignedReports.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const deviceReportControllerGetMyAssignedReportsInfiniteQueryKey = (params?: DeviceReportControllerGetMyAssignedReportsQueryParams) =>
  [{ url: '/device-reports/my-assigned-reports' }, ...(params ? [params] : [])] as const

export type DeviceReportControllerGetMyAssignedReportsInfiniteQueryKey = ReturnType<typeof deviceReportControllerGetMyAssignedReportsInfiniteQueryKey>

/**
 * @description Get reports for devices assigned to current lab assistant
 * @summary Get my assigned reports
 * {@link /device-reports/my-assigned-reports}
 */
export async function deviceReportControllerGetMyAssignedReportsInfinite(
  params?: DeviceReportControllerGetMyAssignedReportsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerGetMyAssignedReportsQueryResponse,
    ResponseErrorConfig<DeviceReportControllerGetMyAssignedReports401 | DeviceReportControllerGetMyAssignedReports403>,
    unknown
  >({ method: 'GET', url: `/device-reports/my-assigned-reports`, params, ...requestConfig })
  return res
}

export function deviceReportControllerGetMyAssignedReportsInfiniteQueryOptions(
  params?: DeviceReportControllerGetMyAssignedReportsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceReportControllerGetMyAssignedReportsInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<DeviceReportControllerGetMyAssignedReportsQueryResponse>,
    ResponseErrorConfig<DeviceReportControllerGetMyAssignedReports401 | DeviceReportControllerGetMyAssignedReports403>,
    ResponseConfig<DeviceReportControllerGetMyAssignedReportsQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['limit'] = pageParam as unknown as DeviceReportControllerGetMyAssignedReportsQueryParams['limit']
      }
      return deviceReportControllerGetMyAssignedReportsInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Get reports for devices assigned to current lab assistant
 * @summary Get my assigned reports
 * {@link /device-reports/my-assigned-reports}
 */
export function useDeviceReportControllerGetMyAssignedReportsInfinite<
  TData = InfiniteData<ResponseConfig<DeviceReportControllerGetMyAssignedReportsQueryResponse>>,
  TQueryData = ResponseConfig<DeviceReportControllerGetMyAssignedReportsQueryResponse>,
  TQueryKey extends QueryKey = DeviceReportControllerGetMyAssignedReportsInfiniteQueryKey,
>(
  params?: DeviceReportControllerGetMyAssignedReportsQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<DeviceReportControllerGetMyAssignedReportsQueryResponse>,
        ResponseErrorConfig<DeviceReportControllerGetMyAssignedReports401 | DeviceReportControllerGetMyAssignedReports403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceReportControllerGetMyAssignedReportsInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(deviceReportControllerGetMyAssignedReportsInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<DeviceReportControllerGetMyAssignedReports401 | DeviceReportControllerGetMyAssignedReports403>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}