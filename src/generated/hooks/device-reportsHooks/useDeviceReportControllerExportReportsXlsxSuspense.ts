/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  DeviceReportControllerExportReportsXlsxQueryResponse,
  DeviceReportControllerExportReportsXlsxQueryParams,
  DeviceReportControllerExportReportsXlsx401,
  DeviceReportControllerExportReportsXlsx403,
} from '../../types/device-reportsController/DeviceReportControllerExportReportsXlsx.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const deviceReportControllerExportReportsXlsxSuspenseQueryKey = (params?: DeviceReportControllerExportReportsXlsxQueryParams) =>
  [{ url: '/device-reports/export/xlsx' }, ...(params ? [params] : [])] as const

export type DeviceReportControllerExportReportsXlsxSuspenseQueryKey = ReturnType<typeof deviceReportControllerExportReportsXlsxSuspenseQueryKey>

/**
 * @description Export filtered device reports as Excel file (Admin/Management)
 * @summary Export device reports as XLSX
 * {@link /device-reports/export/xlsx}
 */
export async function deviceReportControllerExportReportsXlsxSuspense(
  params?: DeviceReportControllerExportReportsXlsxQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerExportReportsXlsxQueryResponse,
    ResponseErrorConfig<DeviceReportControllerExportReportsXlsx401 | DeviceReportControllerExportReportsXlsx403>,
    unknown
  >({ method: 'GET', url: `/device-reports/export/xlsx`, params, ...requestConfig })
  return res
}

export function deviceReportControllerExportReportsXlsxSuspenseQueryOptions(
  params?: DeviceReportControllerExportReportsXlsxQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceReportControllerExportReportsXlsxSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<DeviceReportControllerExportReportsXlsxQueryResponse>,
    ResponseErrorConfig<DeviceReportControllerExportReportsXlsx401 | DeviceReportControllerExportReportsXlsx403>,
    ResponseConfig<DeviceReportControllerExportReportsXlsxQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceReportControllerExportReportsXlsxSuspense(params, config)
    },
  })
}

/**
 * @description Export filtered device reports as Excel file (Admin/Management)
 * @summary Export device reports as XLSX
 * {@link /device-reports/export/xlsx}
 */
export function useDeviceReportControllerExportReportsXlsxSuspense<
  TData = ResponseConfig<DeviceReportControllerExportReportsXlsxQueryResponse>,
  TQueryKey extends QueryKey = DeviceReportControllerExportReportsXlsxSuspenseQueryKey,
>(
  params?: DeviceReportControllerExportReportsXlsxQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<DeviceReportControllerExportReportsXlsxQueryResponse>,
        ResponseErrorConfig<DeviceReportControllerExportReportsXlsx401 | DeviceReportControllerExportReportsXlsx403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceReportControllerExportReportsXlsxSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(deviceReportControllerExportReportsXlsxSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<DeviceReportControllerExportReportsXlsx401 | DeviceReportControllerExportReportsXlsx403>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}