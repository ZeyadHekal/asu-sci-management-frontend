/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  DeviceReportControllerGetTotalUnresolvedReportsCountQueryResponse,
  DeviceReportControllerGetTotalUnresolvedReportsCount401,
  DeviceReportControllerGetTotalUnresolvedReportsCount403,
} from '../../types/device-reportsController/DeviceReportControllerGetTotalUnresolvedReportsCount.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const deviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryKey = () => [{ url: '/device-reports/unresolved-count' }] as const

export type DeviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryKey = ReturnType<
  typeof deviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryKey
>

/**
 * @description Get total count of unresolved reports across all devices (Admin/Management)
 * @summary Get total unresolved reports count
 * {@link /device-reports/unresolved-count}
 */
export async function deviceReportControllerGetTotalUnresolvedReportsCountSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceReportControllerGetTotalUnresolvedReportsCountQueryResponse,
    ResponseErrorConfig<DeviceReportControllerGetTotalUnresolvedReportsCount401 | DeviceReportControllerGetTotalUnresolvedReportsCount403>,
    unknown
  >({ method: 'GET', url: `/device-reports/unresolved-count`, ...requestConfig })
  return res
}

export function deviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = deviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryKey()
  return queryOptions<
    ResponseConfig<DeviceReportControllerGetTotalUnresolvedReportsCountQueryResponse>,
    ResponseErrorConfig<DeviceReportControllerGetTotalUnresolvedReportsCount401 | DeviceReportControllerGetTotalUnresolvedReportsCount403>,
    ResponseConfig<DeviceReportControllerGetTotalUnresolvedReportsCountQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceReportControllerGetTotalUnresolvedReportsCountSuspense(config)
    },
  })
}

/**
 * @description Get total count of unresolved reports across all devices (Admin/Management)
 * @summary Get total unresolved reports count
 * {@link /device-reports/unresolved-count}
 */
export function useDeviceReportControllerGetTotalUnresolvedReportsCountSuspense<
  TData = ResponseConfig<DeviceReportControllerGetTotalUnresolvedReportsCountQueryResponse>,
  TQueryKey extends QueryKey = DeviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<DeviceReportControllerGetTotalUnresolvedReportsCountQueryResponse>,
        ResponseErrorConfig<DeviceReportControllerGetTotalUnresolvedReportsCount401 | DeviceReportControllerGetTotalUnresolvedReportsCount403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(deviceReportControllerGetTotalUnresolvedReportsCountSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<DeviceReportControllerGetTotalUnresolvedReportsCount401 | DeviceReportControllerGetTotalUnresolvedReportsCount403>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}