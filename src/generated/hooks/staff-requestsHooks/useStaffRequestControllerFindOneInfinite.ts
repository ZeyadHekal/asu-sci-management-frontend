/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  StaffRequestControllerFindOneQueryResponse,
  StaffRequestControllerFindOnePathParams,
  StaffRequestControllerFindOne401,
  StaffRequestControllerFindOne403,
  StaffRequestControllerFindOne404,
} from '../../types/staff-requestsController/StaffRequestControllerFindOne.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const staffRequestControllerFindOneInfiniteQueryKey = (id: StaffRequestControllerFindOnePathParams['id']) =>
  [{ url: '/staff-requests/:id', params: { id: id } }] as const

export type StaffRequestControllerFindOneInfiniteQueryKey = ReturnType<typeof staffRequestControllerFindOneInfiniteQueryKey>

/**
 * @description Retrieve a staff request by its ID
 * @summary Get staff request by ID
 * {@link /staff-requests/:id}
 */
export async function staffRequestControllerFindOneInfinite(
  id: StaffRequestControllerFindOnePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    StaffRequestControllerFindOneQueryResponse,
    ResponseErrorConfig<StaffRequestControllerFindOne401 | StaffRequestControllerFindOne403 | StaffRequestControllerFindOne404>,
    unknown
  >({ method: 'GET', url: `/staff-requests/${id}`, ...requestConfig })
  return res
}

export function staffRequestControllerFindOneInfiniteQueryOptions(
  id: StaffRequestControllerFindOnePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = staffRequestControllerFindOneInfiniteQueryKey(id)
  return infiniteQueryOptions<
    ResponseConfig<StaffRequestControllerFindOneQueryResponse>,
    ResponseErrorConfig<StaffRequestControllerFindOne401 | StaffRequestControllerFindOne403 | StaffRequestControllerFindOne404>,
    ResponseConfig<StaffRequestControllerFindOneQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return staffRequestControllerFindOneInfinite(id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve a staff request by its ID
 * @summary Get staff request by ID
 * {@link /staff-requests/:id}
 */
export function useStaffRequestControllerFindOneInfinite<
  TData = InfiniteData<ResponseConfig<StaffRequestControllerFindOneQueryResponse>>,
  TQueryData = ResponseConfig<StaffRequestControllerFindOneQueryResponse>,
  TQueryKey extends QueryKey = StaffRequestControllerFindOneInfiniteQueryKey,
>(
  id: StaffRequestControllerFindOnePathParams['id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<StaffRequestControllerFindOneQueryResponse>,
        ResponseErrorConfig<StaffRequestControllerFindOne401 | StaffRequestControllerFindOne403 | StaffRequestControllerFindOne404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? staffRequestControllerFindOneInfiniteQueryKey(id)

  const query = useInfiniteQuery(
    {
      ...(staffRequestControllerFindOneInfiniteQueryOptions(id, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<StaffRequestControllerFindOne401 | StaffRequestControllerFindOne403 | StaffRequestControllerFindOne404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}