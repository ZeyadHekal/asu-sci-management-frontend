/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  StaffRequestControllerFindPendingQueryResponse,
  StaffRequestControllerFindPendingQueryParams,
  StaffRequestControllerFindPending401,
  StaffRequestControllerFindPending403,
} from '../../types/staff-requestsController/StaffRequestControllerFindPending.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const staffRequestControllerFindPendingSuspenseQueryKey = (params?: StaffRequestControllerFindPendingQueryParams) =>
  [{ url: '/staff-requests/pending' }, ...(params ? [params] : [])] as const

export type StaffRequestControllerFindPendingSuspenseQueryKey = ReturnType<typeof staffRequestControllerFindPendingSuspenseQueryKey>

/**
 * @description Retrieve pending staff requests with pagination
 * @summary Get pending staff requests
 * {@link /staff-requests/pending}
 */
export async function staffRequestControllerFindPendingSuspense(
  params?: StaffRequestControllerFindPendingQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    StaffRequestControllerFindPendingQueryResponse,
    ResponseErrorConfig<StaffRequestControllerFindPending401 | StaffRequestControllerFindPending403>,
    unknown
  >({ method: 'GET', url: `/staff-requests/pending`, params, ...requestConfig })
  return res
}

export function staffRequestControllerFindPendingSuspenseQueryOptions(
  params?: StaffRequestControllerFindPendingQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = staffRequestControllerFindPendingSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<StaffRequestControllerFindPendingQueryResponse>,
    ResponseErrorConfig<StaffRequestControllerFindPending401 | StaffRequestControllerFindPending403>,
    ResponseConfig<StaffRequestControllerFindPendingQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return staffRequestControllerFindPendingSuspense(params, config)
    },
  })
}

/**
 * @description Retrieve pending staff requests with pagination
 * @summary Get pending staff requests
 * {@link /staff-requests/pending}
 */
export function useStaffRequestControllerFindPendingSuspense<
  TData = ResponseConfig<StaffRequestControllerFindPendingQueryResponse>,
  TQueryKey extends QueryKey = StaffRequestControllerFindPendingSuspenseQueryKey,
>(
  params?: StaffRequestControllerFindPendingQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<StaffRequestControllerFindPendingQueryResponse>,
        ResponseErrorConfig<StaffRequestControllerFindPending401 | StaffRequestControllerFindPending403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? staffRequestControllerFindPendingSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(staffRequestControllerFindPendingSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<StaffRequestControllerFindPending401 | StaffRequestControllerFindPending403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}