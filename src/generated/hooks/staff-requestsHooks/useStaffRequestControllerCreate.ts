/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  StaffRequestControllerCreateMutationRequest,
  StaffRequestControllerCreateMutationResponse,
  StaffRequestControllerCreate400,
} from '../../types/staff-requestsController/StaffRequestControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const staffRequestControllerCreateMutationKey = () => [{ url: '/staff-requests' }] as const

export type StaffRequestControllerCreateMutationKey = ReturnType<typeof staffRequestControllerCreateMutationKey>

/**
 * @description Create a new staff request
 * @summary Create staff request
 * {@link /staff-requests}
 */
export async function staffRequestControllerCreate(
  data: StaffRequestControllerCreateMutationRequest,
  config: Partial<RequestConfig<StaffRequestControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof key === 'string' && (typeof value === 'string' || (value as Blob) instanceof Blob)) {
        formData.append(key, value as unknown as string)
      }
    })
  }
  const res = await request<
    StaffRequestControllerCreateMutationResponse,
    ResponseErrorConfig<StaffRequestControllerCreate400>,
    StaffRequestControllerCreateMutationRequest
  >({ method: 'POST', url: `/staff-requests`, data: formData, ...requestConfig, headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers } })
  return res
}

/**
 * @description Create a new staff request
 * @summary Create staff request
 * {@link /staff-requests}
 */
export function useStaffRequestControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<StaffRequestControllerCreateMutationResponse>,
      ResponseErrorConfig<StaffRequestControllerCreate400>,
      { data: StaffRequestControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<StaffRequestControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? staffRequestControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<StaffRequestControllerCreateMutationResponse>,
    ResponseErrorConfig<StaffRequestControllerCreate400>,
    { data: StaffRequestControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return staffRequestControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}