/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  ExamModelControllerDownloadExamModelFileQueryResponse,
  ExamModelControllerDownloadExamModelFilePathParams,
} from '../../types/exam-modelsController/ExamModelControllerDownloadExamModelFile.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const examModelControllerDownloadExamModelFileInfiniteQueryKey = (
  modelId: ExamModelControllerDownloadExamModelFilePathParams['modelId'],
  fileId: ExamModelControllerDownloadExamModelFilePathParams['fileId'],
) => [{ url: '/exam-models/:modelId/file/:fileId/download', params: { modelId: modelId, fileId: fileId } }] as const

export type ExamModelControllerDownloadExamModelFileInfiniteQueryKey = ReturnType<typeof examModelControllerDownloadExamModelFileInfiniteQueryKey>

/**
 * @summary Get presigned URL for specific exam model file
 * {@link /exam-models/:modelId/file/:fileId/download}
 */
export async function examModelControllerDownloadExamModelFileInfinite(
  modelId: ExamModelControllerDownloadExamModelFilePathParams['modelId'],
  fileId: ExamModelControllerDownloadExamModelFilePathParams['fileId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ExamModelControllerDownloadExamModelFileQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/exam-models/${modelId}/file/${fileId}/download`,
    ...requestConfig,
  })
  return res
}

export function examModelControllerDownloadExamModelFileInfiniteQueryOptions(
  modelId: ExamModelControllerDownloadExamModelFilePathParams['modelId'],
  fileId: ExamModelControllerDownloadExamModelFilePathParams['fileId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = examModelControllerDownloadExamModelFileInfiniteQueryKey(modelId, fileId)
  return infiniteQueryOptions<
    ResponseConfig<ExamModelControllerDownloadExamModelFileQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<ExamModelControllerDownloadExamModelFileQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(modelId && fileId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return examModelControllerDownloadExamModelFileInfinite(modelId, fileId, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @summary Get presigned URL for specific exam model file
 * {@link /exam-models/:modelId/file/:fileId/download}
 */
export function useExamModelControllerDownloadExamModelFileInfinite<
  TData = InfiniteData<ResponseConfig<ExamModelControllerDownloadExamModelFileQueryResponse>>,
  TQueryData = ResponseConfig<ExamModelControllerDownloadExamModelFileQueryResponse>,
  TQueryKey extends QueryKey = ExamModelControllerDownloadExamModelFileInfiniteQueryKey,
>(
  modelId: ExamModelControllerDownloadExamModelFilePathParams['modelId'],
  fileId: ExamModelControllerDownloadExamModelFilePathParams['fileId'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<ExamModelControllerDownloadExamModelFileQueryResponse>,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? examModelControllerDownloadExamModelFileInfiniteQueryKey(modelId, fileId)

  const query = useInfiniteQuery(
    {
      ...(examModelControllerDownloadExamModelFileInfiniteQueryOptions(modelId, fileId, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}