/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  ExamModelControllerDeleteExamModelMutationResponse,
  ExamModelControllerDeleteExamModelPathParams,
} from '../../types/exam-modelsController/ExamModelControllerDeleteExamModel.ts'
import { useMutation } from '@tanstack/react-query'

export const examModelControllerDeleteExamModelMutationKey = () => [{ url: '/exam-models/{modelId}' }] as const

export type ExamModelControllerDeleteExamModelMutationKey = ReturnType<typeof examModelControllerDeleteExamModelMutationKey>

/**
 * @summary Delete an exam model
 * {@link /exam-models/:modelId}
 */
export async function examModelControllerDeleteExamModel(
  modelId: ExamModelControllerDeleteExamModelPathParams['modelId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ExamModelControllerDeleteExamModelMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/exam-models/${modelId}`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Delete an exam model
 * {@link /exam-models/:modelId}
 */
export function useExamModelControllerDeleteExamModel<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<ExamModelControllerDeleteExamModelMutationResponse>,
      ResponseErrorConfig<Error>,
      { modelId: ExamModelControllerDeleteExamModelPathParams['modelId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? examModelControllerDeleteExamModelMutationKey()

  return useMutation<
    ResponseConfig<ExamModelControllerDeleteExamModelMutationResponse>,
    ResponseErrorConfig<Error>,
    { modelId: ExamModelControllerDeleteExamModelPathParams['modelId'] },
    TContext
  >(
    {
      mutationFn: async ({ modelId }) => {
        return examModelControllerDeleteExamModel(modelId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}