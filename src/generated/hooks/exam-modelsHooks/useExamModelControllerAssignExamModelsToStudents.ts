/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  ExamModelControllerAssignExamModelsToStudentsMutationRequest,
  ExamModelControllerAssignExamModelsToStudentsMutationResponse,
} from '../../types/exam-modelsController/ExamModelControllerAssignExamModelsToStudents.ts'
import { useMutation } from '@tanstack/react-query'

export const examModelControllerAssignExamModelsToStudentsMutationKey = () => [{ url: '/exam-models/assign' }] as const

export type ExamModelControllerAssignExamModelsToStudentsMutationKey = ReturnType<typeof examModelControllerAssignExamModelsToStudentsMutationKey>

/**
 * @summary Assign exam models to students
 * {@link /exam-models/assign}
 */
export async function examModelControllerAssignExamModelsToStudents(
  data: ExamModelControllerAssignExamModelsToStudentsMutationRequest,
  config: Partial<RequestConfig<ExamModelControllerAssignExamModelsToStudentsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ExamModelControllerAssignExamModelsToStudentsMutationResponse,
    ResponseErrorConfig<Error>,
    ExamModelControllerAssignExamModelsToStudentsMutationRequest
  >({ method: 'POST', url: `/exam-models/assign`, data, ...requestConfig })
  return res
}

/**
 * @summary Assign exam models to students
 * {@link /exam-models/assign}
 */
export function useExamModelControllerAssignExamModelsToStudents<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<ExamModelControllerAssignExamModelsToStudentsMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: ExamModelControllerAssignExamModelsToStudentsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<ExamModelControllerAssignExamModelsToStudentsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? examModelControllerAssignExamModelsToStudentsMutationKey()

  return useMutation<
    ResponseConfig<ExamModelControllerAssignExamModelsToStudentsMutationResponse>,
    ResponseErrorConfig<Error>,
    { data: ExamModelControllerAssignExamModelsToStudentsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return examModelControllerAssignExamModelsToStudents(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}