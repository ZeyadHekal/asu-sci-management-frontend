/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerCreateGroupsMutationRequest,
  EventControllerCreateGroupsMutationResponse,
  EventControllerCreateGroupsPathParams,
} from '../../types/eventsController/EventControllerCreateGroups.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerCreateGroupsMutationKey = () => [{ url: '/events/{id}/create-groups' }] as const

export type EventControllerCreateGroupsMutationKey = ReturnType<typeof eventControllerCreateGroupsMutationKey>

/**
 * @summary Create exam groups and schedules
 * {@link /events/:id/create-groups}
 */
export async function eventControllerCreateGroups(
  id: EventControllerCreateGroupsPathParams['id'],
  data: EventControllerCreateGroupsMutationRequest,
  config: Partial<RequestConfig<EventControllerCreateGroupsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerCreateGroupsMutationResponse, ResponseErrorConfig<Error>, EventControllerCreateGroupsMutationRequest>({
    method: 'POST',
    url: `/events/${id}/create-groups`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Create exam groups and schedules
 * {@link /events/:id/create-groups}
 */
export function useEventControllerCreateGroups<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerCreateGroupsMutationResponse>,
      ResponseErrorConfig<Error>,
      { id: EventControllerCreateGroupsPathParams['id']; data: EventControllerCreateGroupsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventControllerCreateGroupsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerCreateGroupsMutationKey()

  return useMutation<
    ResponseConfig<EventControllerCreateGroupsMutationResponse>,
    ResponseErrorConfig<Error>,
    { id: EventControllerCreateGroupsPathParams['id']; data: EventControllerCreateGroupsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return eventControllerCreateGroups(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}