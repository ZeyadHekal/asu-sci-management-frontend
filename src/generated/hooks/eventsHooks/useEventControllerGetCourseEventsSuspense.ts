/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  EventControllerGetCourseEventsQueryResponse,
  EventControllerGetCourseEventsPathParams,
  EventControllerGetCourseEvents401,
  EventControllerGetCourseEvents403,
  EventControllerGetCourseEvents404,
} from '../../types/eventsController/EventControllerGetCourseEvents.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventControllerGetCourseEventsSuspenseQueryKey = (courseId: EventControllerGetCourseEventsPathParams['courseId']) =>
  [{ url: '/events/course/:courseId', params: { courseId: courseId } }] as const

export type EventControllerGetCourseEventsSuspenseQueryKey = ReturnType<typeof eventControllerGetCourseEventsSuspenseQueryKey>

/**
 * @description Retrieve all events for a specific course
 * @summary Get events for a specific course
 * {@link /events/course/:courseId}
 */
export async function eventControllerGetCourseEventsSuspense(
  courseId: EventControllerGetCourseEventsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerGetCourseEventsQueryResponse,
    ResponseErrorConfig<EventControllerGetCourseEvents401 | EventControllerGetCourseEvents403 | EventControllerGetCourseEvents404>,
    unknown
  >({ method: 'GET', url: `/events/course/${courseId}`, ...requestConfig })
  return res
}

export function eventControllerGetCourseEventsSuspenseQueryOptions(
  courseId: EventControllerGetCourseEventsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerGetCourseEventsSuspenseQueryKey(courseId)
  return queryOptions<
    ResponseConfig<EventControllerGetCourseEventsQueryResponse>,
    ResponseErrorConfig<EventControllerGetCourseEvents401 | EventControllerGetCourseEvents403 | EventControllerGetCourseEvents404>,
    ResponseConfig<EventControllerGetCourseEventsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerGetCourseEventsSuspense(courseId, config)
    },
  })
}

/**
 * @description Retrieve all events for a specific course
 * @summary Get events for a specific course
 * {@link /events/course/:courseId}
 */
export function useEventControllerGetCourseEventsSuspense<
  TData = ResponseConfig<EventControllerGetCourseEventsQueryResponse>,
  TQueryKey extends QueryKey = EventControllerGetCourseEventsSuspenseQueryKey,
>(
  courseId: EventControllerGetCourseEventsPathParams['courseId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<EventControllerGetCourseEventsQueryResponse>,
        ResponseErrorConfig<EventControllerGetCourseEvents401 | EventControllerGetCourseEvents403 | EventControllerGetCourseEvents404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerGetCourseEventsSuspenseQueryKey(courseId)

  const query = useSuspenseQuery(
    {
      ...(eventControllerGetCourseEventsSuspenseQueryOptions(courseId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<EventControllerGetCourseEvents401 | EventControllerGetCourseEvents403 | EventControllerGetCourseEvents404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}