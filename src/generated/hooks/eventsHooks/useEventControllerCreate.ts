/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerCreateMutationRequest,
  EventControllerCreateMutationResponse,
  EventControllerCreate400,
  EventControllerCreate401,
  EventControllerCreate403,
} from '../../types/eventsController/EventControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerCreateMutationKey = () => [{ url: '/events' }] as const

export type EventControllerCreateMutationKey = ReturnType<typeof eventControllerCreateMutationKey>

/**
 * @description Create a new event
 * @summary Create event
 * {@link /events}
 */
export async function eventControllerCreate(
  data: EventControllerCreateMutationRequest,
  config: Partial<RequestConfig<EventControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerCreateMutationResponse,
    ResponseErrorConfig<EventControllerCreate400 | EventControllerCreate401 | EventControllerCreate403>,
    EventControllerCreateMutationRequest
  >({ method: 'POST', url: `/events`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new event
 * @summary Create event
 * {@link /events}
 */
export function useEventControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerCreateMutationResponse>,
      ResponseErrorConfig<EventControllerCreate400 | EventControllerCreate401 | EventControllerCreate403>,
      { data: EventControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<EventControllerCreateMutationResponse>,
    ResponseErrorConfig<EventControllerCreate400 | EventControllerCreate401 | EventControllerCreate403>,
    { data: EventControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return eventControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}