/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  EventControllerDownloadSubmissionsQueryResponse,
  EventControllerDownloadSubmissionsPathParams,
} from '../../types/eventsController/EventControllerDownloadSubmissions.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventControllerDownloadSubmissionsSuspenseQueryKey = (scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId']) =>
  [{ url: '/events/:scheduleId/download-submissions', params: { scheduleId: scheduleId } }] as const

export type EventControllerDownloadSubmissionsSuspenseQueryKey = ReturnType<typeof eventControllerDownloadSubmissionsSuspenseQueryKey>

/**
 * @summary Download all student submissions as ZIP file
 * {@link /events/:scheduleId/download-submissions}
 */
export async function eventControllerDownloadSubmissionsSuspense(
  scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerDownloadSubmissionsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/events/${scheduleId}/download-submissions`,
    ...requestConfig,
  })
  return res
}

export function eventControllerDownloadSubmissionsSuspenseQueryOptions(
  scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerDownloadSubmissionsSuspenseQueryKey(scheduleId)
  return queryOptions<
    ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!scheduleId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerDownloadSubmissionsSuspense(scheduleId, config)
    },
  })
}

/**
 * @summary Download all student submissions as ZIP file
 * {@link /events/:scheduleId/download-submissions}
 */
export function useEventControllerDownloadSubmissionsSuspense<
  TData = ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
  TQueryKey extends QueryKey = EventControllerDownloadSubmissionsSuspenseQueryKey,
>(
  scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerDownloadSubmissionsSuspenseQueryKey(scheduleId)

  const query = useSuspenseQuery(
    {
      ...(eventControllerDownloadSubmissionsSuspenseQueryOptions(scheduleId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}