/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  EventControllerGetStudentGradesSummaryQueryResponse,
  EventControllerGetStudentGradesSummaryPathParams,
} from '../../types/eventsController/EventControllerGetStudentGradesSummary.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventControllerGetStudentGradesSummarySuspenseQueryKey = (courseId: EventControllerGetStudentGradesSummaryPathParams['courseId']) =>
  [{ url: '/events/:courseId/student-grades', params: { courseId: courseId } }] as const

export type EventControllerGetStudentGradesSummarySuspenseQueryKey = ReturnType<typeof eventControllerGetStudentGradesSummarySuspenseQueryKey>

/**
 * @summary Get student grades summary for a course
 * {@link /events/:courseId/student-grades}
 */
export async function eventControllerGetStudentGradesSummarySuspense(
  courseId: EventControllerGetStudentGradesSummaryPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerGetStudentGradesSummaryQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/events/${courseId}/student-grades`,
    ...requestConfig,
  })
  return res
}

export function eventControllerGetStudentGradesSummarySuspenseQueryOptions(
  courseId: EventControllerGetStudentGradesSummaryPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerGetStudentGradesSummarySuspenseQueryKey(courseId)
  return queryOptions<
    ResponseConfig<EventControllerGetStudentGradesSummaryQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventControllerGetStudentGradesSummaryQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerGetStudentGradesSummarySuspense(courseId, config)
    },
  })
}

/**
 * @summary Get student grades summary for a course
 * {@link /events/:courseId/student-grades}
 */
export function useEventControllerGetStudentGradesSummarySuspense<
  TData = ResponseConfig<EventControllerGetStudentGradesSummaryQueryResponse>,
  TQueryKey extends QueryKey = EventControllerGetStudentGradesSummarySuspenseQueryKey,
>(
  courseId: EventControllerGetStudentGradesSummaryPathParams['courseId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<ResponseConfig<EventControllerGetStudentGradesSummaryQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerGetStudentGradesSummarySuspenseQueryKey(courseId)

  const query = useSuspenseQuery(
    {
      ...(eventControllerGetStudentGradesSummarySuspenseQueryOptions(courseId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}