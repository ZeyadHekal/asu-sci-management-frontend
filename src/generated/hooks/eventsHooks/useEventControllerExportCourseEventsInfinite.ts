/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  EventControllerExportCourseEventsQueryResponse,
  EventControllerExportCourseEventsPathParams,
} from '../../types/eventsController/EventControllerExportCourseEvents.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const eventControllerExportCourseEventsInfiniteQueryKey = (courseId: EventControllerExportCourseEventsPathParams['courseId']) =>
  [{ url: '/events/course/:courseId/export', params: { courseId: courseId } }] as const

export type EventControllerExportCourseEventsInfiniteQueryKey = ReturnType<typeof eventControllerExportCourseEventsInfiniteQueryKey>

/**
 * @description Export events for a specific course as Excel file
 * @summary Export course events
 * {@link /events/course/:courseId/export}
 */
export async function eventControllerExportCourseEventsInfinite(
  courseId: EventControllerExportCourseEventsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerExportCourseEventsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/events/course/${courseId}/export`,
    ...requestConfig,
  })
  return res
}

export function eventControllerExportCourseEventsInfiniteQueryOptions(
  courseId: EventControllerExportCourseEventsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerExportCourseEventsInfiniteQueryKey(courseId)
  return infiniteQueryOptions<
    ResponseConfig<EventControllerExportCourseEventsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventControllerExportCourseEventsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerExportCourseEventsInfinite(courseId, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Export events for a specific course as Excel file
 * @summary Export course events
 * {@link /events/course/:courseId/export}
 */
export function useEventControllerExportCourseEventsInfinite<
  TData = InfiniteData<ResponseConfig<EventControllerExportCourseEventsQueryResponse>>,
  TQueryData = ResponseConfig<EventControllerExportCourseEventsQueryResponse>,
  TQueryKey extends QueryKey = EventControllerExportCourseEventsInfiniteQueryKey,
>(
  courseId: EventControllerExportCourseEventsPathParams['courseId'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<ResponseConfig<EventControllerExportCourseEventsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerExportCourseEventsInfiniteQueryKey(courseId)

  const query = useInfiniteQuery(
    {
      ...(eventControllerExportCourseEventsInfiniteQueryOptions(courseId, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}