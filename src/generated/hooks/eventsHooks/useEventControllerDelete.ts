/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerDeleteMutationResponse,
  EventControllerDeletePathParams,
  EventControllerDelete401,
  EventControllerDelete403,
  EventControllerDelete404,
} from '../../types/eventsController/EventControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerDeleteMutationKey = () => [{ url: '/events/{event_ids}' }] as const

export type EventControllerDeleteMutationKey = ReturnType<typeof eventControllerDeleteMutationKey>

/**
 * @description Delete one or multiple events by IDs
 * @summary Delete events
 * {@link /events/:event_ids}
 */
export async function eventControllerDelete(
  event_ids: EventControllerDeletePathParams['event_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerDeleteMutationResponse,
    ResponseErrorConfig<EventControllerDelete401 | EventControllerDelete403 | EventControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/events/${event_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple events by IDs
 * @summary Delete events
 * {@link /events/:event_ids}
 */
export function useEventControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerDeleteMutationResponse>,
      ResponseErrorConfig<EventControllerDelete401 | EventControllerDelete403 | EventControllerDelete404>,
      { event_ids: EventControllerDeletePathParams['event_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<EventControllerDeleteMutationResponse>,
    ResponseErrorConfig<EventControllerDelete401 | EventControllerDelete403 | EventControllerDelete404>,
    { event_ids: EventControllerDeletePathParams['event_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ event_ids }) => {
        return eventControllerDelete(event_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}