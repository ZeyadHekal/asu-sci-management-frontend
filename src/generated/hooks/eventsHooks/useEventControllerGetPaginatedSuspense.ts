/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  EventControllerGetPaginatedQueryResponse,
  EventControllerGetPaginatedQueryParams,
  EventControllerGetPaginated401,
  EventControllerGetPaginated403,
} from '../../types/eventsController/EventControllerGetPaginated.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventControllerGetPaginatedSuspenseQueryKey = (params?: EventControllerGetPaginatedQueryParams) =>
  [{ url: '/events/paginated' }, ...(params ? [params] : [])] as const

export type EventControllerGetPaginatedSuspenseQueryKey = ReturnType<typeof eventControllerGetPaginatedSuspenseQueryKey>

/**
 * @description Retrieve events with pagination
 * @summary Get paginated events
 * {@link /events/paginated}
 */
export async function eventControllerGetPaginatedSuspense(
  params?: EventControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerGetPaginatedQueryResponse,
    ResponseErrorConfig<EventControllerGetPaginated401 | EventControllerGetPaginated403>,
    unknown
  >({ method: 'GET', url: `/events/paginated`, params, ...requestConfig })
  return res
}

export function eventControllerGetPaginatedSuspenseQueryOptions(
  params?: EventControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerGetPaginatedSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<EventControllerGetPaginatedQueryResponse>,
    ResponseErrorConfig<EventControllerGetPaginated401 | EventControllerGetPaginated403>,
    ResponseConfig<EventControllerGetPaginatedQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerGetPaginatedSuspense(params, config)
    },
  })
}

/**
 * @description Retrieve events with pagination
 * @summary Get paginated events
 * {@link /events/paginated}
 */
export function useEventControllerGetPaginatedSuspense<
  TData = ResponseConfig<EventControllerGetPaginatedQueryResponse>,
  TQueryKey extends QueryKey = EventControllerGetPaginatedSuspenseQueryKey,
>(
  params?: EventControllerGetPaginatedQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<EventControllerGetPaginatedQueryResponse>,
        ResponseErrorConfig<EventControllerGetPaginated401 | EventControllerGetPaginated403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerGetPaginatedSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(eventControllerGetPaginatedSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<EventControllerGetPaginated401 | EventControllerGetPaginated403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}