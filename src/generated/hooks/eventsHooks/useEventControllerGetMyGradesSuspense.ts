/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { EventControllerGetMyGradesQueryResponse, EventControllerGetMyGradesPathParams } from '../../types/eventsController/EventControllerGetMyGrades.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventControllerGetMyGradesSuspenseQueryKey = (studentId: EventControllerGetMyGradesPathParams['studentId']) =>
  [{ url: '/events/my-grades/:studentId', params: { studentId: studentId } }] as const

export type EventControllerGetMyGradesSuspenseQueryKey = ReturnType<typeof eventControllerGetMyGradesSuspenseQueryKey>

/**
 * @summary Get my grades (for student dashboard)
 * {@link /events/my-grades/:studentId}
 */
export async function eventControllerGetMyGradesSuspense(
  studentId: EventControllerGetMyGradesPathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerGetMyGradesQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/events/my-grades/${studentId}`,
    ...requestConfig,
  })
  return res
}

export function eventControllerGetMyGradesSuspenseQueryOptions(
  studentId: EventControllerGetMyGradesPathParams['studentId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerGetMyGradesSuspenseQueryKey(studentId)
  return queryOptions<
    ResponseConfig<EventControllerGetMyGradesQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventControllerGetMyGradesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!studentId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerGetMyGradesSuspense(studentId, config)
    },
  })
}

/**
 * @summary Get my grades (for student dashboard)
 * {@link /events/my-grades/:studentId}
 */
export function useEventControllerGetMyGradesSuspense<
  TData = ResponseConfig<EventControllerGetMyGradesQueryResponse>,
  TQueryKey extends QueryKey = EventControllerGetMyGradesSuspenseQueryKey,
>(
  studentId: EventControllerGetMyGradesPathParams['studentId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<EventControllerGetMyGradesQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerGetMyGradesSuspenseQueryKey(studentId)

  const query = useSuspenseQuery(
    {
      ...(eventControllerGetMyGradesSuspenseQueryOptions(studentId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}