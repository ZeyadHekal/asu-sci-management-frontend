/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  EventControllerDownloadSubmissionsQueryResponse,
  EventControllerDownloadSubmissionsPathParams,
} from '../../types/eventsController/EventControllerDownloadSubmissions.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const eventControllerDownloadSubmissionsQueryKey = (scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId']) =>
  [{ url: '/events/:scheduleId/download-submissions', params: { scheduleId: scheduleId } }] as const

export type EventControllerDownloadSubmissionsQueryKey = ReturnType<typeof eventControllerDownloadSubmissionsQueryKey>

/**
 * @summary Download all student submissions as ZIP file
 * {@link /events/:scheduleId/download-submissions}
 */
export async function eventControllerDownloadSubmissions(
  scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerDownloadSubmissionsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/events/${scheduleId}/download-submissions`,
    ...requestConfig,
  })
  return res
}

export function eventControllerDownloadSubmissionsQueryOptions(
  scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerDownloadSubmissionsQueryKey(scheduleId)
  return queryOptions<
    ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!scheduleId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerDownloadSubmissions(scheduleId, config)
    },
  })
}

/**
 * @summary Download all student submissions as ZIP file
 * {@link /events/:scheduleId/download-submissions}
 */
export function useEventControllerDownloadSubmissions<
  TData = ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
  TQueryData = ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>,
  TQueryKey extends QueryKey = EventControllerDownloadSubmissionsQueryKey,
>(
  scheduleId: EventControllerDownloadSubmissionsPathParams['scheduleId'],
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<EventControllerDownloadSubmissionsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerDownloadSubmissionsQueryKey(scheduleId)

  const query = useQuery(
    {
      ...(eventControllerDownloadSubmissionsQueryOptions(scheduleId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}