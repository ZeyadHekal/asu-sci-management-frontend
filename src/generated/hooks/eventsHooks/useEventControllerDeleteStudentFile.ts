/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerDeleteStudentFileMutationResponse,
  EventControllerDeleteStudentFilePathParams,
} from '../../types/eventsController/EventControllerDeleteStudentFile.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerDeleteStudentFileMutationKey = () => [{ url: '/events/student/{scheduleId}/files/{fileId}' }] as const

export type EventControllerDeleteStudentFileMutationKey = ReturnType<typeof eventControllerDeleteStudentFileMutationKey>

/**
 * @summary Delete a student's submitted file for a specific exam schedule
 * {@link /events/student/:scheduleId/files/:fileId}
 */
export async function eventControllerDeleteStudentFile(
  scheduleId: EventControllerDeleteStudentFilePathParams['scheduleId'],
  fileId: EventControllerDeleteStudentFilePathParams['fileId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerDeleteStudentFileMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/events/student/${scheduleId}/files/${fileId}`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Delete a student's submitted file for a specific exam schedule
 * {@link /events/student/:scheduleId/files/:fileId}
 */
export function useEventControllerDeleteStudentFile<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerDeleteStudentFileMutationResponse>,
      ResponseErrorConfig<Error>,
      { scheduleId: EventControllerDeleteStudentFilePathParams['scheduleId']; fileId: EventControllerDeleteStudentFilePathParams['fileId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerDeleteStudentFileMutationKey()

  return useMutation<
    ResponseConfig<EventControllerDeleteStudentFileMutationResponse>,
    ResponseErrorConfig<Error>,
    { scheduleId: EventControllerDeleteStudentFilePathParams['scheduleId']; fileId: EventControllerDeleteStudentFilePathParams['fileId'] },
    TContext
  >(
    {
      mutationFn: async ({ scheduleId, fileId }) => {
        return eventControllerDeleteStudentFile(scheduleId, fileId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}