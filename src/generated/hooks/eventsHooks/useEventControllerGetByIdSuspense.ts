/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  EventControllerGetByIdQueryResponse,
  EventControllerGetByIdPathParams,
  EventControllerGetById401,
  EventControllerGetById403,
  EventControllerGetById404,
} from '../../types/eventsController/EventControllerGetById.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const eventControllerGetByIdSuspenseQueryKey = (event_id: EventControllerGetByIdPathParams['event_id']) =>
  [{ url: '/events/:event_id', params: { event_id: event_id } }] as const

export type EventControllerGetByIdSuspenseQueryKey = ReturnType<typeof eventControllerGetByIdSuspenseQueryKey>

/**
 * @description Retrieve an event by its ID
 * @summary Get event by ID
 * {@link /events/:event_id}
 */
export async function eventControllerGetByIdSuspense(
  event_id: EventControllerGetByIdPathParams['event_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerGetByIdQueryResponse,
    ResponseErrorConfig<EventControllerGetById401 | EventControllerGetById403 | EventControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/events/${event_id}`, ...requestConfig })
  return res
}

export function eventControllerGetByIdSuspenseQueryOptions(
  event_id: EventControllerGetByIdPathParams['event_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = eventControllerGetByIdSuspenseQueryKey(event_id)
  return queryOptions<
    ResponseConfig<EventControllerGetByIdQueryResponse>,
    ResponseErrorConfig<EventControllerGetById401 | EventControllerGetById403 | EventControllerGetById404>,
    ResponseConfig<EventControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!event_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return eventControllerGetByIdSuspense(event_id, config)
    },
  })
}

/**
 * @description Retrieve an event by its ID
 * @summary Get event by ID
 * {@link /events/:event_id}
 */
export function useEventControllerGetByIdSuspense<
  TData = ResponseConfig<EventControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = EventControllerGetByIdSuspenseQueryKey,
>(
  event_id: EventControllerGetByIdPathParams['event_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<EventControllerGetByIdQueryResponse>,
        ResponseErrorConfig<EventControllerGetById401 | EventControllerGetById403 | EventControllerGetById404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? eventControllerGetByIdSuspenseQueryKey(event_id)

  const query = useSuspenseQuery(
    {
      ...(eventControllerGetByIdSuspenseQueryOptions(event_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<EventControllerGetById401 | EventControllerGetById403 | EventControllerGetById404>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}