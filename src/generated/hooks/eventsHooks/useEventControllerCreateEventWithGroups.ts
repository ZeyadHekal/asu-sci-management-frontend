/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerCreateEventWithGroupsMutationRequest,
  EventControllerCreateEventWithGroupsMutationResponse,
} from '../../types/eventsController/EventControllerCreateEventWithGroups.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerCreateEventWithGroupsMutationKey = () => [{ url: '/events/create-with-groups' }] as const

export type EventControllerCreateEventWithGroupsMutationKey = ReturnType<typeof eventControllerCreateEventWithGroupsMutationKey>

/**
 * @summary Create event with complex group scheduling and exam models
 * {@link /events/create-with-groups}
 */
export async function eventControllerCreateEventWithGroups(
  data: EventControllerCreateEventWithGroupsMutationRequest,
  config: Partial<RequestConfig<EventControllerCreateEventWithGroupsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerCreateEventWithGroupsMutationResponse,
    ResponseErrorConfig<Error>,
    EventControllerCreateEventWithGroupsMutationRequest
  >({ method: 'POST', url: `/events/create-with-groups`, data, ...requestConfig })
  return res
}

/**
 * @summary Create event with complex group scheduling and exam models
 * {@link /events/create-with-groups}
 */
export function useEventControllerCreateEventWithGroups<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerCreateEventWithGroupsMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: EventControllerCreateEventWithGroupsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventControllerCreateEventWithGroupsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerCreateEventWithGroupsMutationKey()

  return useMutation<
    ResponseConfig<EventControllerCreateEventWithGroupsMutationResponse>,
    ResponseErrorConfig<Error>,
    { data: EventControllerCreateEventWithGroupsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return eventControllerCreateEventWithGroups(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}