/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerRemoveGroupFromSimulationMutationRequest,
  EventControllerRemoveGroupFromSimulationMutationResponse,
  EventControllerRemoveGroupFromSimulationPathParams,
} from '../../types/eventsController/EventControllerRemoveGroupFromSimulation.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerRemoveGroupFromSimulationMutationKey = () => [{ url: '/events/{courseId}/simulate-groups/remove-group' }] as const

export type EventControllerRemoveGroupFromSimulationMutationKey = ReturnType<typeof eventControllerRemoveGroupFromSimulationMutationKey>

/**
 * @summary Remove a group from the simulation
 * {@link /events/:courseId/simulate-groups/remove-group}
 */
export async function eventControllerRemoveGroupFromSimulation(
  courseId: EventControllerRemoveGroupFromSimulationPathParams['courseId'],
  data: EventControllerRemoveGroupFromSimulationMutationRequest,
  config: Partial<RequestConfig<EventControllerRemoveGroupFromSimulationMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerRemoveGroupFromSimulationMutationResponse,
    ResponseErrorConfig<Error>,
    EventControllerRemoveGroupFromSimulationMutationRequest
  >({ method: 'POST', url: `/events/${courseId}/simulate-groups/remove-group`, data, ...requestConfig })
  return res
}

/**
 * @summary Remove a group from the simulation
 * {@link /events/:courseId/simulate-groups/remove-group}
 */
export function useEventControllerRemoveGroupFromSimulation<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerRemoveGroupFromSimulationMutationResponse>,
      ResponseErrorConfig<Error>,
      { courseId: EventControllerRemoveGroupFromSimulationPathParams['courseId']; data: EventControllerRemoveGroupFromSimulationMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventControllerRemoveGroupFromSimulationMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerRemoveGroupFromSimulationMutationKey()

  return useMutation<
    ResponseConfig<EventControllerRemoveGroupFromSimulationMutationResponse>,
    ResponseErrorConfig<Error>,
    { courseId: EventControllerRemoveGroupFromSimulationPathParams['courseId']; data: EventControllerRemoveGroupFromSimulationMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ courseId, data }) => {
        return eventControllerRemoveGroupFromSimulation(courseId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}