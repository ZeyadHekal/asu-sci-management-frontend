/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerSubmitFilesMutationResponse,
  EventControllerSubmitFilesPathParams,
} from '../../types/eventsController/EventControllerSubmitFiles.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerSubmitFilesMutationKey = () => [{ url: '/events/student/{scheduleId}/submit-files' }] as const

export type EventControllerSubmitFilesMutationKey = ReturnType<typeof eventControllerSubmitFilesMutationKey>

/**
 * @summary Submit files for exam
 * {@link /events/student/:scheduleId/submit-files}
 */
export async function eventControllerSubmitFiles(
  scheduleId: EventControllerSubmitFilesPathParams['scheduleId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<EventControllerSubmitFilesMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/events/student/${scheduleId}/submit-files`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Submit files for exam
 * {@link /events/student/:scheduleId/submit-files}
 */
export function useEventControllerSubmitFiles<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerSubmitFilesMutationResponse>,
      ResponseErrorConfig<Error>,
      { scheduleId: EventControllerSubmitFilesPathParams['scheduleId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerSubmitFilesMutationKey()

  return useMutation<
    ResponseConfig<EventControllerSubmitFilesMutationResponse>,
    ResponseErrorConfig<Error>,
    { scheduleId: EventControllerSubmitFilesPathParams['scheduleId'] },
    TContext
  >(
    {
      mutationFn: async ({ scheduleId }) => {
        return eventControllerSubmitFiles(scheduleId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}