/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  EventControllerUpdateMutationRequest,
  EventControllerUpdateMutationResponse,
  EventControllerUpdatePathParams,
  EventControllerUpdate400,
  EventControllerUpdate401,
  EventControllerUpdate403,
  EventControllerUpdate404,
} from '../../types/eventsController/EventControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const eventControllerUpdateMutationKey = () => [{ url: '/events/{event_id}' }] as const

export type EventControllerUpdateMutationKey = ReturnType<typeof eventControllerUpdateMutationKey>

/**
 * @description Update an existing event by ID
 * @summary Update event
 * {@link /events/:event_id}
 */
export async function eventControllerUpdate(
  event_id: EventControllerUpdatePathParams['event_id'],
  data?: EventControllerUpdateMutationRequest,
  config: Partial<RequestConfig<EventControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    EventControllerUpdateMutationResponse,
    ResponseErrorConfig<EventControllerUpdate400 | EventControllerUpdate401 | EventControllerUpdate403 | EventControllerUpdate404>,
    EventControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/events/${event_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing event by ID
 * @summary Update event
 * {@link /events/:event_id}
 */
export function useEventControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<EventControllerUpdateMutationResponse>,
      ResponseErrorConfig<EventControllerUpdate400 | EventControllerUpdate401 | EventControllerUpdate403 | EventControllerUpdate404>,
      { event_id: EventControllerUpdatePathParams['event_id']; data?: EventControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<EventControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? eventControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<EventControllerUpdateMutationResponse>,
    ResponseErrorConfig<EventControllerUpdate400 | EventControllerUpdate401 | EventControllerUpdate403 | EventControllerUpdate404>,
    { event_id: EventControllerUpdatePathParams['event_id']; data?: EventControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ event_id, data }) => {
        return eventControllerUpdate(event_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}