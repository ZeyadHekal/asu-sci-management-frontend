/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  MaterialControllerToggleMaterialVisibilityMutationResponse,
  MaterialControllerToggleMaterialVisibilityPathParams,
  MaterialControllerToggleMaterialVisibility401,
  MaterialControllerToggleMaterialVisibility403,
  MaterialControllerToggleMaterialVisibility404,
} from '../../types/materialsController/MaterialControllerToggleMaterialVisibility.ts'
import { useMutation } from '@tanstack/react-query'

export const materialControllerToggleMaterialVisibilityMutationKey = () => [{ url: '/materials/{materialId}/toggle-visibility' }] as const

export type MaterialControllerToggleMaterialVisibilityMutationKey = ReturnType<typeof materialControllerToggleMaterialVisibilityMutationKey>

/**
 * @description Toggle hide/show status of a material
 * @summary Toggle material visibility
 * {@link /materials/:materialId/toggle-visibility}
 */
export async function materialControllerToggleMaterialVisibility(
  materialId: MaterialControllerToggleMaterialVisibilityPathParams['materialId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaterialControllerToggleMaterialVisibilityMutationResponse,
    ResponseErrorConfig<
      MaterialControllerToggleMaterialVisibility401 | MaterialControllerToggleMaterialVisibility403 | MaterialControllerToggleMaterialVisibility404
    >,
    unknown
  >({ method: 'PATCH', url: `/materials/${materialId}/toggle-visibility`, ...requestConfig })
  return res
}

/**
 * @description Toggle hide/show status of a material
 * @summary Toggle material visibility
 * {@link /materials/:materialId/toggle-visibility}
 */
export function useMaterialControllerToggleMaterialVisibility<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<MaterialControllerToggleMaterialVisibilityMutationResponse>,
      ResponseErrorConfig<
        MaterialControllerToggleMaterialVisibility401 | MaterialControllerToggleMaterialVisibility403 | MaterialControllerToggleMaterialVisibility404
      >,
      { materialId: MaterialControllerToggleMaterialVisibilityPathParams['materialId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? materialControllerToggleMaterialVisibilityMutationKey()

  return useMutation<
    ResponseConfig<MaterialControllerToggleMaterialVisibilityMutationResponse>,
    ResponseErrorConfig<
      MaterialControllerToggleMaterialVisibility401 | MaterialControllerToggleMaterialVisibility403 | MaterialControllerToggleMaterialVisibility404
    >,
    { materialId: MaterialControllerToggleMaterialVisibilityPathParams['materialId'] },
    TContext
  >(
    {
      mutationFn: async ({ materialId }) => {
        return materialControllerToggleMaterialVisibility(materialId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}