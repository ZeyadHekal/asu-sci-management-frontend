/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  MaterialControllerGetMaterialDownloadUrlQueryResponse,
  MaterialControllerGetMaterialDownloadUrlPathParams,
  MaterialControllerGetMaterialDownloadUrl401,
  MaterialControllerGetMaterialDownloadUrl403,
  MaterialControllerGetMaterialDownloadUrl404,
} from '../../types/materialsController/MaterialControllerGetMaterialDownloadUrl.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const materialControllerGetMaterialDownloadUrlInfiniteQueryKey = (materialId: MaterialControllerGetMaterialDownloadUrlPathParams['materialId']) =>
  [{ url: '/materials/:materialId/download-url', params: { materialId: materialId } }] as const

export type MaterialControllerGetMaterialDownloadUrlInfiniteQueryKey = ReturnType<typeof materialControllerGetMaterialDownloadUrlInfiniteQueryKey>

/**
 * @description Get presigned URL for downloading material
 * @summary Get material download URL
 * {@link /materials/:materialId/download-url}
 */
export async function materialControllerGetMaterialDownloadUrlInfinite(
  materialId: MaterialControllerGetMaterialDownloadUrlPathParams['materialId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaterialControllerGetMaterialDownloadUrlQueryResponse,
    ResponseErrorConfig<
      MaterialControllerGetMaterialDownloadUrl401 | MaterialControllerGetMaterialDownloadUrl403 | MaterialControllerGetMaterialDownloadUrl404
    >,
    unknown
  >({ method: 'GET', url: `/materials/${materialId}/download-url`, ...requestConfig })
  return res
}

export function materialControllerGetMaterialDownloadUrlInfiniteQueryOptions(
  materialId: MaterialControllerGetMaterialDownloadUrlPathParams['materialId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = materialControllerGetMaterialDownloadUrlInfiniteQueryKey(materialId)
  return infiniteQueryOptions<
    ResponseConfig<MaterialControllerGetMaterialDownloadUrlQueryResponse>,
    ResponseErrorConfig<
      MaterialControllerGetMaterialDownloadUrl401 | MaterialControllerGetMaterialDownloadUrl403 | MaterialControllerGetMaterialDownloadUrl404
    >,
    ResponseConfig<MaterialControllerGetMaterialDownloadUrlQueryResponse>,
    typeof queryKey
  >({
    enabled: !!materialId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return materialControllerGetMaterialDownloadUrlInfinite(materialId, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Get presigned URL for downloading material
 * @summary Get material download URL
 * {@link /materials/:materialId/download-url}
 */
export function useMaterialControllerGetMaterialDownloadUrlInfinite<
  TData = InfiniteData<ResponseConfig<MaterialControllerGetMaterialDownloadUrlQueryResponse>>,
  TQueryData = ResponseConfig<MaterialControllerGetMaterialDownloadUrlQueryResponse>,
  TQueryKey extends QueryKey = MaterialControllerGetMaterialDownloadUrlInfiniteQueryKey,
>(
  materialId: MaterialControllerGetMaterialDownloadUrlPathParams['materialId'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<MaterialControllerGetMaterialDownloadUrlQueryResponse>,
        ResponseErrorConfig<
          MaterialControllerGetMaterialDownloadUrl401 | MaterialControllerGetMaterialDownloadUrl403 | MaterialControllerGetMaterialDownloadUrl404
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? materialControllerGetMaterialDownloadUrlInfiniteQueryKey(materialId)

  const query = useInfiniteQuery(
    {
      ...(materialControllerGetMaterialDownloadUrlInfiniteQueryOptions(materialId, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<MaterialControllerGetMaterialDownloadUrl401 | MaterialControllerGetMaterialDownloadUrl403 | MaterialControllerGetMaterialDownloadUrl404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}