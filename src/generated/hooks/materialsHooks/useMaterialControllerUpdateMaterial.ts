/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  MaterialControllerUpdateMaterialMutationRequest,
  MaterialControllerUpdateMaterialMutationResponse,
  MaterialControllerUpdateMaterialPathParams,
  MaterialControllerUpdateMaterial400,
  MaterialControllerUpdateMaterial401,
  MaterialControllerUpdateMaterial403,
  MaterialControllerUpdateMaterial404,
} from '../../types/materialsController/MaterialControllerUpdateMaterial.ts'
import { useMutation } from '@tanstack/react-query'

export const materialControllerUpdateMaterialMutationKey = () => [{ url: '/materials/{materialId}' }] as const

export type MaterialControllerUpdateMaterialMutationKey = ReturnType<typeof materialControllerUpdateMaterialMutationKey>

/**
 * @description Update material information
 * @summary Update material
 * {@link /materials/:materialId}
 */
export async function materialControllerUpdateMaterial(
  materialId: MaterialControllerUpdateMaterialPathParams['materialId'],
  data?: MaterialControllerUpdateMaterialMutationRequest,
  config: Partial<RequestConfig<MaterialControllerUpdateMaterialMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaterialControllerUpdateMaterialMutationResponse,
    ResponseErrorConfig<
      MaterialControllerUpdateMaterial400 | MaterialControllerUpdateMaterial401 | MaterialControllerUpdateMaterial403 | MaterialControllerUpdateMaterial404
    >,
    MaterialControllerUpdateMaterialMutationRequest
  >({ method: 'PATCH', url: `/materials/${materialId}`, data, ...requestConfig })
  return res
}

/**
 * @description Update material information
 * @summary Update material
 * {@link /materials/:materialId}
 */
export function useMaterialControllerUpdateMaterial<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<MaterialControllerUpdateMaterialMutationResponse>,
      ResponseErrorConfig<
        MaterialControllerUpdateMaterial400 | MaterialControllerUpdateMaterial401 | MaterialControllerUpdateMaterial403 | MaterialControllerUpdateMaterial404
      >,
      { materialId: MaterialControllerUpdateMaterialPathParams['materialId']; data?: MaterialControllerUpdateMaterialMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<MaterialControllerUpdateMaterialMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? materialControllerUpdateMaterialMutationKey()

  return useMutation<
    ResponseConfig<MaterialControllerUpdateMaterialMutationResponse>,
    ResponseErrorConfig<
      MaterialControllerUpdateMaterial400 | MaterialControllerUpdateMaterial401 | MaterialControllerUpdateMaterial403 | MaterialControllerUpdateMaterial404
    >,
    { materialId: MaterialControllerUpdateMaterialPathParams['materialId']; data?: MaterialControllerUpdateMaterialMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ materialId, data }) => {
        return materialControllerUpdateMaterial(materialId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}