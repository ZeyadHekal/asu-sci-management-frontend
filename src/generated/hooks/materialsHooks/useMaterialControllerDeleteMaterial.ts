/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  MaterialControllerDeleteMaterialMutationResponse,
  MaterialControllerDeleteMaterialPathParams,
  MaterialControllerDeleteMaterial401,
  MaterialControllerDeleteMaterial403,
  MaterialControllerDeleteMaterial404,
} from '../../types/materialsController/MaterialControllerDeleteMaterial.ts'
import { useMutation } from '@tanstack/react-query'

export const materialControllerDeleteMaterialMutationKey = () => [{ url: '/materials/{materialId}' }] as const

export type MaterialControllerDeleteMaterialMutationKey = ReturnType<typeof materialControllerDeleteMaterialMutationKey>

/**
 * @description Delete a course material
 * @summary Delete material
 * {@link /materials/:materialId}
 */
export async function materialControllerDeleteMaterial(
  materialId: MaterialControllerDeleteMaterialPathParams['materialId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaterialControllerDeleteMaterialMutationResponse,
    ResponseErrorConfig<MaterialControllerDeleteMaterial401 | MaterialControllerDeleteMaterial403 | MaterialControllerDeleteMaterial404>,
    unknown
  >({ method: 'DELETE', url: `/materials/${materialId}`, ...requestConfig })
  return res
}

/**
 * @description Delete a course material
 * @summary Delete material
 * {@link /materials/:materialId}
 */
export function useMaterialControllerDeleteMaterial<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<MaterialControllerDeleteMaterialMutationResponse>,
      ResponseErrorConfig<MaterialControllerDeleteMaterial401 | MaterialControllerDeleteMaterial403 | MaterialControllerDeleteMaterial404>,
      { materialId: MaterialControllerDeleteMaterialPathParams['materialId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? materialControllerDeleteMaterialMutationKey()

  return useMutation<
    ResponseConfig<MaterialControllerDeleteMaterialMutationResponse>,
    ResponseErrorConfig<MaterialControllerDeleteMaterial401 | MaterialControllerDeleteMaterial403 | MaterialControllerDeleteMaterial404>,
    { materialId: MaterialControllerDeleteMaterialPathParams['materialId'] },
    TContext
  >(
    {
      mutationFn: async ({ materialId }) => {
        return materialControllerDeleteMaterial(materialId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}