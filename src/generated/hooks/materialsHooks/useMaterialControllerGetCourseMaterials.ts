/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  MaterialControllerGetCourseMaterialsQueryResponse,
  MaterialControllerGetCourseMaterialsPathParams,
  MaterialControllerGetCourseMaterials401,
  MaterialControllerGetCourseMaterials403,
} from '../../types/materialsController/MaterialControllerGetCourseMaterials.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const materialControllerGetCourseMaterialsQueryKey = (courseId: MaterialControllerGetCourseMaterialsPathParams['courseId']) =>
  [{ url: '/materials/course/:courseId', params: { courseId: courseId } }] as const

export type MaterialControllerGetCourseMaterialsQueryKey = ReturnType<typeof materialControllerGetCourseMaterialsQueryKey>

/**
 * @description Retrieve all materials for a specific course
 * @summary Get course materials
 * {@link /materials/course/:courseId}
 */
export async function materialControllerGetCourseMaterials(
  courseId: MaterialControllerGetCourseMaterialsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaterialControllerGetCourseMaterialsQueryResponse,
    ResponseErrorConfig<MaterialControllerGetCourseMaterials401 | MaterialControllerGetCourseMaterials403>,
    unknown
  >({ method: 'GET', url: `/materials/course/${courseId}`, ...requestConfig })
  return res
}

export function materialControllerGetCourseMaterialsQueryOptions(
  courseId: MaterialControllerGetCourseMaterialsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = materialControllerGetCourseMaterialsQueryKey(courseId)
  return queryOptions<
    ResponseConfig<MaterialControllerGetCourseMaterialsQueryResponse>,
    ResponseErrorConfig<MaterialControllerGetCourseMaterials401 | MaterialControllerGetCourseMaterials403>,
    ResponseConfig<MaterialControllerGetCourseMaterialsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return materialControllerGetCourseMaterials(courseId, config)
    },
  })
}

/**
 * @description Retrieve all materials for a specific course
 * @summary Get course materials
 * {@link /materials/course/:courseId}
 */
export function useMaterialControllerGetCourseMaterials<
  TData = ResponseConfig<MaterialControllerGetCourseMaterialsQueryResponse>,
  TQueryData = ResponseConfig<MaterialControllerGetCourseMaterialsQueryResponse>,
  TQueryKey extends QueryKey = MaterialControllerGetCourseMaterialsQueryKey,
>(
  courseId: MaterialControllerGetCourseMaterialsPathParams['courseId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<MaterialControllerGetCourseMaterialsQueryResponse>,
        ResponseErrorConfig<MaterialControllerGetCourseMaterials401 | MaterialControllerGetCourseMaterials403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? materialControllerGetCourseMaterialsQueryKey(courseId)

  const query = useQuery(
    {
      ...(materialControllerGetCourseMaterialsQueryOptions(courseId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<MaterialControllerGetCourseMaterials401 | MaterialControllerGetCourseMaterials403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}