/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  CourseAccessControllerGetAssistantsWithPermissionsQueryResponse,
  CourseAccessControllerGetAssistantsWithPermissionsPathParams,
  CourseAccessControllerGetAssistantsWithPermissions401,
  CourseAccessControllerGetAssistantsWithPermissions403,
  CourseAccessControllerGetAssistantsWithPermissions404,
} from '../../types/course-accessController/CourseAccessControllerGetAssistantsWithPermissions.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const courseAccessControllerGetAssistantsWithPermissionsQueryKey = (
  courseId: CourseAccessControllerGetAssistantsWithPermissionsPathParams['courseId'],
) => [{ url: '/course-access/courses/:courseId/assistants', params: { courseId: courseId } }] as const

export type CourseAccessControllerGetAssistantsWithPermissionsQueryKey = ReturnType<typeof courseAccessControllerGetAssistantsWithPermissionsQueryKey>

/**
 * @description Get all assistants who currently have any permissions for this course
 * @summary Get assistants with permissions
 * {@link /course-access/courses/:courseId/assistants}
 */
export async function courseAccessControllerGetAssistantsWithPermissions(
  courseId: CourseAccessControllerGetAssistantsWithPermissionsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseAccessControllerGetAssistantsWithPermissionsQueryResponse,
    ResponseErrorConfig<
      | CourseAccessControllerGetAssistantsWithPermissions401
      | CourseAccessControllerGetAssistantsWithPermissions403
      | CourseAccessControllerGetAssistantsWithPermissions404
    >,
    unknown
  >({ method: 'GET', url: `/course-access/courses/${courseId}/assistants`, ...requestConfig })
  return res
}

export function courseAccessControllerGetAssistantsWithPermissionsQueryOptions(
  courseId: CourseAccessControllerGetAssistantsWithPermissionsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseAccessControllerGetAssistantsWithPermissionsQueryKey(courseId)
  return queryOptions<
    ResponseConfig<CourseAccessControllerGetAssistantsWithPermissionsQueryResponse>,
    ResponseErrorConfig<
      | CourseAccessControllerGetAssistantsWithPermissions401
      | CourseAccessControllerGetAssistantsWithPermissions403
      | CourseAccessControllerGetAssistantsWithPermissions404
    >,
    ResponseConfig<CourseAccessControllerGetAssistantsWithPermissionsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseAccessControllerGetAssistantsWithPermissions(courseId, config)
    },
  })
}

/**
 * @description Get all assistants who currently have any permissions for this course
 * @summary Get assistants with permissions
 * {@link /course-access/courses/:courseId/assistants}
 */
export function useCourseAccessControllerGetAssistantsWithPermissions<
  TData = ResponseConfig<CourseAccessControllerGetAssistantsWithPermissionsQueryResponse>,
  TQueryData = ResponseConfig<CourseAccessControllerGetAssistantsWithPermissionsQueryResponse>,
  TQueryKey extends QueryKey = CourseAccessControllerGetAssistantsWithPermissionsQueryKey,
>(
  courseId: CourseAccessControllerGetAssistantsWithPermissionsPathParams['courseId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<CourseAccessControllerGetAssistantsWithPermissionsQueryResponse>,
        ResponseErrorConfig<
          | CourseAccessControllerGetAssistantsWithPermissions401
          | CourseAccessControllerGetAssistantsWithPermissions403
          | CourseAccessControllerGetAssistantsWithPermissions404
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseAccessControllerGetAssistantsWithPermissionsQueryKey(courseId)

  const query = useQuery(
    {
      ...(courseAccessControllerGetAssistantsWithPermissionsQueryOptions(courseId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | CourseAccessControllerGetAssistantsWithPermissions401
      | CourseAccessControllerGetAssistantsWithPermissions403
      | CourseAccessControllerGetAssistantsWithPermissions404
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}