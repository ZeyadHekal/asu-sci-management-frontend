/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseAccessControllerCheckSectionAccessQueryResponse,
  CourseAccessControllerCheckSectionAccessPathParams,
  CourseAccessControllerCheckSectionAccessQueryParams,
  CourseAccessControllerCheckSectionAccess401,
} from '../../types/course-accessController/CourseAccessControllerCheckSectionAccess.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseAccessControllerCheckSectionAccessSuspenseQueryKey = (
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
) => [{ url: '/course-access/check/:courseId/:section', params: { courseId: courseId, section: section } }, ...(params ? [params] : [])] as const

export type CourseAccessControllerCheckSectionAccessSuspenseQueryKey = ReturnType<typeof courseAccessControllerCheckSectionAccessSuspenseQueryKey>

/**
 * @description Check if current user has access to a specific course section
 * @summary Check section access
 * {@link /course-access/check/:courseId/:section}
 */
export async function courseAccessControllerCheckSectionAccessSuspense(
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseAccessControllerCheckSectionAccessQueryResponse, ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>, unknown>({
    method: 'GET',
    url: `/course-access/check/${courseId}/${section}`,
    params,
    ...requestConfig,
  })
  return res
}

export function courseAccessControllerCheckSectionAccessSuspenseQueryOptions(
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseAccessControllerCheckSectionAccessSuspenseQueryKey(courseId, section, params)
  return queryOptions<
    ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
    ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>,
    ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(courseId && section),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseAccessControllerCheckSectionAccessSuspense(courseId, section, params, config)
    },
  })
}

/**
 * @description Check if current user has access to a specific course section
 * @summary Check section access
 * {@link /course-access/check/:courseId/:section}
 */
export function useCourseAccessControllerCheckSectionAccessSuspense<
  TData = ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
  TQueryKey extends QueryKey = CourseAccessControllerCheckSectionAccessSuspenseQueryKey,
>(
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
        ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseAccessControllerCheckSectionAccessSuspenseQueryKey(courseId, section, params)

  const query = useSuspenseQuery(
    {
      ...(courseAccessControllerCheckSectionAccessSuspenseQueryOptions(courseId, section, params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}