/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  CourseAccessControllerGetAvailableAssistantsQueryResponse,
  CourseAccessControllerGetAvailableAssistantsPathParams,
  CourseAccessControllerGetAvailableAssistants401,
  CourseAccessControllerGetAvailableAssistants403,
  CourseAccessControllerGetAvailableAssistants404,
} from '../../types/course-accessController/CourseAccessControllerGetAvailableAssistants.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const courseAccessControllerGetAvailableAssistantsSuspenseQueryKey = (courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId']) =>
  [{ url: '/course-access/courses/:courseId/available-assistants', params: { courseId: courseId } }] as const

export type CourseAccessControllerGetAvailableAssistantsSuspenseQueryKey = ReturnType<typeof courseAccessControllerGetAvailableAssistantsSuspenseQueryKey>

/**
 * @description Get all assistants who do not currently have any permissions for this course
 * @summary Get available assistants
 * {@link /course-access/courses/:courseId/available-assistants}
 */
export async function courseAccessControllerGetAvailableAssistantsSuspense(
  courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseAccessControllerGetAvailableAssistantsQueryResponse,
    ResponseErrorConfig<
      CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
    >,
    unknown
  >({ method: 'GET', url: `/course-access/courses/${courseId}/available-assistants`, ...requestConfig })
  return res
}

export function courseAccessControllerGetAvailableAssistantsSuspenseQueryOptions(
  courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseAccessControllerGetAvailableAssistantsSuspenseQueryKey(courseId)
  return queryOptions<
    ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
    ResponseErrorConfig<
      CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
    >,
    ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseAccessControllerGetAvailableAssistantsSuspense(courseId, config)
    },
  })
}

/**
 * @description Get all assistants who do not currently have any permissions for this course
 * @summary Get available assistants
 * {@link /course-access/courses/:courseId/available-assistants}
 */
export function useCourseAccessControllerGetAvailableAssistantsSuspense<
  TData = ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
  TQueryKey extends QueryKey = CourseAccessControllerGetAvailableAssistantsSuspenseQueryKey,
>(
  courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
        ResponseErrorConfig<
          CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseAccessControllerGetAvailableAssistantsSuspenseQueryKey(courseId)

  const query = useSuspenseQuery(
    {
      ...(courseAccessControllerGetAvailableAssistantsSuspenseQueryOptions(courseId, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<
      CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}