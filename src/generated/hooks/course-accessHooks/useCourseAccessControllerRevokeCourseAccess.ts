/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseAccessControllerRevokeCourseAccessMutationResponse,
  CourseAccessControllerRevokeCourseAccessPathParams,
  CourseAccessControllerRevokeCourseAccess401,
  CourseAccessControllerRevokeCourseAccess403,
  CourseAccessControllerRevokeCourseAccess404,
} from '../../types/course-accessController/CourseAccessControllerRevokeCourseAccess.ts'
import { useMutation } from '@tanstack/react-query'

export const courseAccessControllerRevokeCourseAccessMutationKey = () => [{ url: '/course-access/permissions/{userId}/{courseId}/{section}' }] as const

export type CourseAccessControllerRevokeCourseAccessMutationKey = ReturnType<typeof courseAccessControllerRevokeCourseAccessMutationKey>

/**
 * @description Revoke access permission from an assistant for a specific course section
 * @summary Revoke course access permission
 * {@link /course-access/permissions/:userId/:courseId/:section}
 */
export async function courseAccessControllerRevokeCourseAccess(
  userId: CourseAccessControllerRevokeCourseAccessPathParams['userId'],
  courseId: CourseAccessControllerRevokeCourseAccessPathParams['courseId'],
  section: CourseAccessControllerRevokeCourseAccessPathParams['section'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseAccessControllerRevokeCourseAccessMutationResponse,
    ResponseErrorConfig<
      CourseAccessControllerRevokeCourseAccess401 | CourseAccessControllerRevokeCourseAccess403 | CourseAccessControllerRevokeCourseAccess404
    >,
    unknown
  >({ method: 'DELETE', url: `/course-access/permissions/${userId}/${courseId}/${section}`, ...requestConfig })
  return res
}

/**
 * @description Revoke access permission from an assistant for a specific course section
 * @summary Revoke course access permission
 * {@link /course-access/permissions/:userId/:courseId/:section}
 */
export function useCourseAccessControllerRevokeCourseAccess<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseAccessControllerRevokeCourseAccessMutationResponse>,
      ResponseErrorConfig<
        CourseAccessControllerRevokeCourseAccess401 | CourseAccessControllerRevokeCourseAccess403 | CourseAccessControllerRevokeCourseAccess404
      >,
      {
        userId: CourseAccessControllerRevokeCourseAccessPathParams['userId']
        courseId: CourseAccessControllerRevokeCourseAccessPathParams['courseId']
        section: CourseAccessControllerRevokeCourseAccessPathParams['section']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseAccessControllerRevokeCourseAccessMutationKey()

  return useMutation<
    ResponseConfig<CourseAccessControllerRevokeCourseAccessMutationResponse>,
    ResponseErrorConfig<
      CourseAccessControllerRevokeCourseAccess401 | CourseAccessControllerRevokeCourseAccess403 | CourseAccessControllerRevokeCourseAccess404
    >,
    {
      userId: CourseAccessControllerRevokeCourseAccessPathParams['userId']
      courseId: CourseAccessControllerRevokeCourseAccessPathParams['courseId']
      section: CourseAccessControllerRevokeCourseAccessPathParams['section']
    },
    TContext
  >(
    {
      mutationFn: async ({ userId, courseId, section }) => {
        return courseAccessControllerRevokeCourseAccess(userId, courseId, section, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}