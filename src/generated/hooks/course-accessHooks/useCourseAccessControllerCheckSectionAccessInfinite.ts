/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  CourseAccessControllerCheckSectionAccessQueryResponse,
  CourseAccessControllerCheckSectionAccessPathParams,
  CourseAccessControllerCheckSectionAccessQueryParams,
  CourseAccessControllerCheckSectionAccess401,
} from '../../types/course-accessController/CourseAccessControllerCheckSectionAccess.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const courseAccessControllerCheckSectionAccessInfiniteQueryKey = (
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
) => [{ url: '/course-access/check/:courseId/:section', params: { courseId: courseId, section: section } }, ...(params ? [params] : [])] as const

export type CourseAccessControllerCheckSectionAccessInfiniteQueryKey = ReturnType<typeof courseAccessControllerCheckSectionAccessInfiniteQueryKey>

/**
 * @description Check if current user has access to a specific course section
 * @summary Check section access
 * {@link /course-access/check/:courseId/:section}
 */
export async function courseAccessControllerCheckSectionAccessInfinite(
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CourseAccessControllerCheckSectionAccessQueryResponse, ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>, unknown>({
    method: 'GET',
    url: `/course-access/check/${courseId}/${section}`,
    params,
    ...requestConfig,
  })
  return res
}

export function courseAccessControllerCheckSectionAccessInfiniteQueryOptions(
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseAccessControllerCheckSectionAccessInfiniteQueryKey(courseId, section, params)
  return infiniteQueryOptions<
    ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
    ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>,
    ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
    typeof queryKey,
    number
  >({
    enabled: !!(courseId && section),
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['limit'] = pageParam as unknown as CourseAccessControllerCheckSectionAccessQueryParams['limit']
      }
      return courseAccessControllerCheckSectionAccessInfinite(courseId, section, params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Check if current user has access to a specific course section
 * @summary Check section access
 * {@link /course-access/check/:courseId/:section}
 */
export function useCourseAccessControllerCheckSectionAccessInfinite<
  TData = InfiniteData<ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>>,
  TQueryData = ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
  TQueryKey extends QueryKey = CourseAccessControllerCheckSectionAccessInfiniteQueryKey,
>(
  courseId: CourseAccessControllerCheckSectionAccessPathParams['courseId'],
  section: CourseAccessControllerCheckSectionAccessPathParams['section'],
  params?: CourseAccessControllerCheckSectionAccessQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<CourseAccessControllerCheckSectionAccessQueryResponse>,
        ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseAccessControllerCheckSectionAccessInfiniteQueryKey(courseId, section, params)

  const query = useInfiniteQuery(
    {
      ...(courseAccessControllerCheckSectionAccessInfiniteQueryOptions(courseId, section, params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<CourseAccessControllerCheckSectionAccess401>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}