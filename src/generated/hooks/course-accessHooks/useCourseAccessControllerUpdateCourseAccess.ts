/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CourseAccessControllerUpdateCourseAccessMutationRequest,
  CourseAccessControllerUpdateCourseAccessMutationResponse,
  CourseAccessControllerUpdateCourseAccessPathParams,
  CourseAccessControllerUpdateCourseAccess401,
  CourseAccessControllerUpdateCourseAccess403,
  CourseAccessControllerUpdateCourseAccess404,
} from '../../types/course-accessController/CourseAccessControllerUpdateCourseAccess.ts'
import { useMutation } from '@tanstack/react-query'

export const courseAccessControllerUpdateCourseAccessMutationKey = () => [{ url: '/course-access/permissions/{userId}/{courseId}/{section}' }] as const

export type CourseAccessControllerUpdateCourseAccessMutationKey = ReturnType<typeof courseAccessControllerUpdateCourseAccessMutationKey>

/**
 * @description Update access permission for an assistant for a specific course section
 * @summary Update course access permission
 * {@link /course-access/permissions/:userId/:courseId/:section}
 */
export async function courseAccessControllerUpdateCourseAccess(
  userId: CourseAccessControllerUpdateCourseAccessPathParams['userId'],
  courseId: CourseAccessControllerUpdateCourseAccessPathParams['courseId'],
  section: CourseAccessControllerUpdateCourseAccessPathParams['section'],
  data: CourseAccessControllerUpdateCourseAccessMutationRequest,
  config: Partial<RequestConfig<CourseAccessControllerUpdateCourseAccessMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseAccessControllerUpdateCourseAccessMutationResponse,
    ResponseErrorConfig<
      CourseAccessControllerUpdateCourseAccess401 | CourseAccessControllerUpdateCourseAccess403 | CourseAccessControllerUpdateCourseAccess404
    >,
    CourseAccessControllerUpdateCourseAccessMutationRequest
  >({ method: 'PUT', url: `/course-access/permissions/${userId}/${courseId}/${section}`, data, ...requestConfig })
  return res
}

/**
 * @description Update access permission for an assistant for a specific course section
 * @summary Update course access permission
 * {@link /course-access/permissions/:userId/:courseId/:section}
 */
export function useCourseAccessControllerUpdateCourseAccess<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CourseAccessControllerUpdateCourseAccessMutationResponse>,
      ResponseErrorConfig<
        CourseAccessControllerUpdateCourseAccess401 | CourseAccessControllerUpdateCourseAccess403 | CourseAccessControllerUpdateCourseAccess404
      >,
      {
        userId: CourseAccessControllerUpdateCourseAccessPathParams['userId']
        courseId: CourseAccessControllerUpdateCourseAccessPathParams['courseId']
        section: CourseAccessControllerUpdateCourseAccessPathParams['section']
        data: CourseAccessControllerUpdateCourseAccessMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CourseAccessControllerUpdateCourseAccessMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? courseAccessControllerUpdateCourseAccessMutationKey()

  return useMutation<
    ResponseConfig<CourseAccessControllerUpdateCourseAccessMutationResponse>,
    ResponseErrorConfig<
      CourseAccessControllerUpdateCourseAccess401 | CourseAccessControllerUpdateCourseAccess403 | CourseAccessControllerUpdateCourseAccess404
    >,
    {
      userId: CourseAccessControllerUpdateCourseAccessPathParams['userId']
      courseId: CourseAccessControllerUpdateCourseAccessPathParams['courseId']
      section: CourseAccessControllerUpdateCourseAccessPathParams['section']
      data: CourseAccessControllerUpdateCourseAccessMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ userId, courseId, section, data }) => {
        return courseAccessControllerUpdateCourseAccess(userId, courseId, section, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}