/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  CourseAccessControllerGetAvailableAssistantsQueryResponse,
  CourseAccessControllerGetAvailableAssistantsPathParams,
  CourseAccessControllerGetAvailableAssistants401,
  CourseAccessControllerGetAvailableAssistants403,
  CourseAccessControllerGetAvailableAssistants404,
} from '../../types/course-accessController/CourseAccessControllerGetAvailableAssistants.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const courseAccessControllerGetAvailableAssistantsQueryKey = (courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId']) =>
  [{ url: '/course-access/courses/:courseId/available-assistants', params: { courseId: courseId } }] as const

export type CourseAccessControllerGetAvailableAssistantsQueryKey = ReturnType<typeof courseAccessControllerGetAvailableAssistantsQueryKey>

/**
 * @description Get all assistants who do not currently have any permissions for this course
 * @summary Get available assistants
 * {@link /course-access/courses/:courseId/available-assistants}
 */
export async function courseAccessControllerGetAvailableAssistants(
  courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CourseAccessControllerGetAvailableAssistantsQueryResponse,
    ResponseErrorConfig<
      CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
    >,
    unknown
  >({ method: 'GET', url: `/course-access/courses/${courseId}/available-assistants`, ...requestConfig })
  return res
}

export function courseAccessControllerGetAvailableAssistantsQueryOptions(
  courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = courseAccessControllerGetAvailableAssistantsQueryKey(courseId)
  return queryOptions<
    ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
    ResponseErrorConfig<
      CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
    >,
    ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!courseId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return courseAccessControllerGetAvailableAssistants(courseId, config)
    },
  })
}

/**
 * @description Get all assistants who do not currently have any permissions for this course
 * @summary Get available assistants
 * {@link /course-access/courses/:courseId/available-assistants}
 */
export function useCourseAccessControllerGetAvailableAssistants<
  TData = ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
  TQueryData = ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
  TQueryKey extends QueryKey = CourseAccessControllerGetAvailableAssistantsQueryKey,
>(
  courseId: CourseAccessControllerGetAvailableAssistantsPathParams['courseId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<CourseAccessControllerGetAvailableAssistantsQueryResponse>,
        ResponseErrorConfig<
          CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? courseAccessControllerGetAvailableAssistantsQueryKey(courseId)

  const query = useQuery(
    {
      ...(courseAccessControllerGetAvailableAssistantsQueryOptions(courseId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      CourseAccessControllerGetAvailableAssistants401 | CourseAccessControllerGetAvailableAssistants403 | CourseAccessControllerGetAvailableAssistants404
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}