/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { FileControllerUploadFileMutationResponse } from '../../types/filesController/FileControllerUploadFile.ts'
import { useMutation } from '@tanstack/react-query'

export const fileControllerUploadFileMutationKey = () => [{ url: '/files/upload' }] as const

export type FileControllerUploadFileMutationKey = ReturnType<typeof fileControllerUploadFileMutationKey>

/**
 * @summary Upload a file
 * {@link /files/upload}
 */
export async function fileControllerUploadFile(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<FileControllerUploadFileMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/files/upload`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Upload a file
 * {@link /files/upload}
 */
export function useFileControllerUploadFile<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<FileControllerUploadFileMutationResponse>, ResponseErrorConfig<Error>, void, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? fileControllerUploadFileMutationKey()

  return useMutation<ResponseConfig<FileControllerUploadFileMutationResponse>, ResponseErrorConfig<Error>, void, TContext>(
    {
      mutationFn: async () => {
        return fileControllerUploadFile(config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}