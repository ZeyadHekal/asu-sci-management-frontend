/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { FileControllerDeleteFileMutationResponse, FileControllerDeleteFilePathParams } from '../../types/filesController/FileControllerDeleteFile.ts'
import { useMutation } from '@tanstack/react-query'

export const fileControllerDeleteFileMutationKey = () => [{ url: '/files/{id}' }] as const

export type FileControllerDeleteFileMutationKey = ReturnType<typeof fileControllerDeleteFileMutationKey>

/**
 * @summary Delete file by ID
 * {@link /files/:id}
 */
export async function fileControllerDeleteFile(id: FileControllerDeleteFilePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<FileControllerDeleteFileMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/files/${id}`,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Delete file by ID
 * {@link /files/:id}
 */
export function useFileControllerDeleteFile<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<FileControllerDeleteFileMutationResponse>,
      ResponseErrorConfig<Error>,
      { id: FileControllerDeleteFilePathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? fileControllerDeleteFileMutationKey()

  return useMutation<
    ResponseConfig<FileControllerDeleteFileMutationResponse>,
    ResponseErrorConfig<Error>,
    { id: FileControllerDeleteFilePathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return fileControllerDeleteFile(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}