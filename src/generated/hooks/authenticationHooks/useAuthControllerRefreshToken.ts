/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  AuthControllerRefreshTokenMutationRequest,
  AuthControllerRefreshTokenMutationResponse,
  AuthControllerRefreshToken401,
} from '../../types/authenticationController/AuthControllerRefreshToken.ts'
import { useMutation } from '@tanstack/react-query'

export const authControllerRefreshTokenMutationKey = () => [{ url: '/auth/refresh' }] as const

export type AuthControllerRefreshTokenMutationKey = ReturnType<typeof authControllerRefreshTokenMutationKey>

/**
 * @description Get new access token using refresh token
 * @summary Refresh token
 * {@link /auth/refresh}
 */
export async function authControllerRefreshToken(
  data: AuthControllerRefreshTokenMutationRequest,
  config: Partial<RequestConfig<AuthControllerRefreshTokenMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    AuthControllerRefreshTokenMutationResponse,
    ResponseErrorConfig<AuthControllerRefreshToken401>,
    AuthControllerRefreshTokenMutationRequest
  >({ method: 'POST', url: `/auth/refresh`, data, ...requestConfig })
  return res
}

/**
 * @description Get new access token using refresh token
 * @summary Refresh token
 * {@link /auth/refresh}
 */
export function useAuthControllerRefreshToken<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<AuthControllerRefreshTokenMutationResponse>,
      ResponseErrorConfig<AuthControllerRefreshToken401>,
      { data: AuthControllerRefreshTokenMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<AuthControllerRefreshTokenMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? authControllerRefreshTokenMutationKey()

  return useMutation<
    ResponseConfig<AuthControllerRefreshTokenMutationResponse>,
    ResponseErrorConfig<AuthControllerRefreshToken401>,
    { data: AuthControllerRefreshTokenMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return authControllerRefreshToken(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}