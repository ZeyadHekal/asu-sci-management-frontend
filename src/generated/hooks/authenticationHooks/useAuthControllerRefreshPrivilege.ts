/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  AuthControllerRefreshPrivilegeMutationResponse,
  AuthControllerRefreshPrivilege401,
} from '../../types/authenticationController/AuthControllerRefreshPrivilege.ts'
import { useMutation } from '@tanstack/react-query'

export const authControllerRefreshPrivilegeMutationKey = () => [{ url: '/auth/privileges' }] as const

export type AuthControllerRefreshPrivilegeMutationKey = ReturnType<typeof authControllerRefreshPrivilegeMutationKey>

/**
 * @description Get updated user privileges
 * @summary Refresh privileges
 * {@link /auth/privileges}
 */
export async function authControllerRefreshPrivilege(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<AuthControllerRefreshPrivilegeMutationResponse, ResponseErrorConfig<AuthControllerRefreshPrivilege401>, unknown>({
    method: 'POST',
    url: `/auth/privileges`,
    ...requestConfig,
  })
  return res
}

/**
 * @description Get updated user privileges
 * @summary Refresh privileges
 * {@link /auth/privileges}
 */
export function useAuthControllerRefreshPrivilege<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<AuthControllerRefreshPrivilegeMutationResponse>,
      ResponseErrorConfig<AuthControllerRefreshPrivilege401>,
      void,
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? authControllerRefreshPrivilegeMutationKey()

  return useMutation<ResponseConfig<AuthControllerRefreshPrivilegeMutationResponse>, ResponseErrorConfig<AuthControllerRefreshPrivilege401>, void, TContext>(
    {
      mutationFn: async () => {
        return authControllerRefreshPrivilege(config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}