/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  AuthControllerLoginMutationRequest,
  AuthControllerLoginMutationResponse,
  AuthControllerLogin401,
} from '../../types/authenticationController/AuthControllerLogin.ts'
import { useMutation } from '@tanstack/react-query'

export const authControllerLoginMutationKey = () => [{ url: '/auth/login' }] as const

export type AuthControllerLoginMutationKey = ReturnType<typeof authControllerLoginMutationKey>

/**
 * @description Authenticate user with username and password
 * @summary User login
 * {@link /auth/login}
 */
export async function authControllerLogin(
  data: AuthControllerLoginMutationRequest,
  config: Partial<RequestConfig<AuthControllerLoginMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<AuthControllerLoginMutationResponse, ResponseErrorConfig<AuthControllerLogin401>, AuthControllerLoginMutationRequest>({
    method: 'POST',
    url: `/auth/login`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @description Authenticate user with username and password
 * @summary User login
 * {@link /auth/login}
 */
export function useAuthControllerLogin<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<AuthControllerLoginMutationResponse>,
      ResponseErrorConfig<AuthControllerLogin401>,
      { data: AuthControllerLoginMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<AuthControllerLoginMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? authControllerLoginMutationKey()

  return useMutation<
    ResponseConfig<AuthControllerLoginMutationResponse>,
    ResponseErrorConfig<AuthControllerLogin401>,
    { data: AuthControllerLoginMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return authControllerLogin(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}