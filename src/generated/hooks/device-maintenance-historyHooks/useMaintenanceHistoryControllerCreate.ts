/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  MaintenanceHistoryControllerCreateMutationRequest,
  MaintenanceHistoryControllerCreateMutationResponse,
  MaintenanceHistoryControllerCreate400,
  MaintenanceHistoryControllerCreate401,
  MaintenanceHistoryControllerCreate403,
} from '../../types/device-maintenance-historyController/MaintenanceHistoryControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const maintenanceHistoryControllerCreateMutationKey = () => [{ url: '/device-maintenance-history' }] as const

export type MaintenanceHistoryControllerCreateMutationKey = ReturnType<typeof maintenanceHistoryControllerCreateMutationKey>

/**
 * @description Create a new maintenance history record
 * @summary Create maintenance history
 * {@link /device-maintenance-history}
 */
export async function maintenanceHistoryControllerCreate(
  data: MaintenanceHistoryControllerCreateMutationRequest,
  config: Partial<RequestConfig<MaintenanceHistoryControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaintenanceHistoryControllerCreateMutationResponse,
    ResponseErrorConfig<MaintenanceHistoryControllerCreate400 | MaintenanceHistoryControllerCreate401 | MaintenanceHistoryControllerCreate403>,
    MaintenanceHistoryControllerCreateMutationRequest
  >({ method: 'POST', url: `/device-maintenance-history`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new maintenance history record
 * @summary Create maintenance history
 * {@link /device-maintenance-history}
 */
export function useMaintenanceHistoryControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<MaintenanceHistoryControllerCreateMutationResponse>,
      ResponseErrorConfig<MaintenanceHistoryControllerCreate400 | MaintenanceHistoryControllerCreate401 | MaintenanceHistoryControllerCreate403>,
      { data: MaintenanceHistoryControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<MaintenanceHistoryControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? maintenanceHistoryControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<MaintenanceHistoryControllerCreateMutationResponse>,
    ResponseErrorConfig<MaintenanceHistoryControllerCreate400 | MaintenanceHistoryControllerCreate401 | MaintenanceHistoryControllerCreate403>,
    { data: MaintenanceHistoryControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return maintenanceHistoryControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}