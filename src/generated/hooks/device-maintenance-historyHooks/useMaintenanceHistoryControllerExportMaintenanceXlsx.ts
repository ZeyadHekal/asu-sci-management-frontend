/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse,
  MaintenanceHistoryControllerExportMaintenanceXlsxQueryParams,
  MaintenanceHistoryControllerExportMaintenanceXlsx401,
  MaintenanceHistoryControllerExportMaintenanceXlsx403,
} from '../../types/device-maintenance-historyController/MaintenanceHistoryControllerExportMaintenanceXlsx.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const maintenanceHistoryControllerExportMaintenanceXlsxQueryKey = (params?: MaintenanceHistoryControllerExportMaintenanceXlsxQueryParams) =>
  [{ url: '/device-maintenance-history/export/xlsx' }, ...(params ? [params] : [])] as const

export type MaintenanceHistoryControllerExportMaintenanceXlsxQueryKey = ReturnType<typeof maintenanceHistoryControllerExportMaintenanceXlsxQueryKey>

/**
 * @description Export filtered maintenance history as Excel file
 * @summary Export maintenance history as XLSX
 * {@link /device-maintenance-history/export/xlsx}
 */
export async function maintenanceHistoryControllerExportMaintenanceXlsx(
  params?: MaintenanceHistoryControllerExportMaintenanceXlsxQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse,
    ResponseErrorConfig<MaintenanceHistoryControllerExportMaintenanceXlsx401 | MaintenanceHistoryControllerExportMaintenanceXlsx403>,
    unknown
  >({ method: 'GET', url: `/device-maintenance-history/export/xlsx`, params, ...requestConfig })
  return res
}

export function maintenanceHistoryControllerExportMaintenanceXlsxQueryOptions(
  params?: MaintenanceHistoryControllerExportMaintenanceXlsxQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = maintenanceHistoryControllerExportMaintenanceXlsxQueryKey(params)
  return queryOptions<
    ResponseConfig<MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse>,
    ResponseErrorConfig<MaintenanceHistoryControllerExportMaintenanceXlsx401 | MaintenanceHistoryControllerExportMaintenanceXlsx403>,
    ResponseConfig<MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return maintenanceHistoryControllerExportMaintenanceXlsx(params, config)
    },
  })
}

/**
 * @description Export filtered maintenance history as Excel file
 * @summary Export maintenance history as XLSX
 * {@link /device-maintenance-history/export/xlsx}
 */
export function useMaintenanceHistoryControllerExportMaintenanceXlsx<
  TData = ResponseConfig<MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse>,
  TQueryData = ResponseConfig<MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse>,
  TQueryKey extends QueryKey = MaintenanceHistoryControllerExportMaintenanceXlsxQueryKey,
>(
  params?: MaintenanceHistoryControllerExportMaintenanceXlsxQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<MaintenanceHistoryControllerExportMaintenanceXlsxQueryResponse>,
        ResponseErrorConfig<MaintenanceHistoryControllerExportMaintenanceXlsx401 | MaintenanceHistoryControllerExportMaintenanceXlsx403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? maintenanceHistoryControllerExportMaintenanceXlsxQueryKey(params)

  const query = useQuery(
    {
      ...(maintenanceHistoryControllerExportMaintenanceXlsxQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<MaintenanceHistoryControllerExportMaintenanceXlsx401 | MaintenanceHistoryControllerExportMaintenanceXlsx403>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}