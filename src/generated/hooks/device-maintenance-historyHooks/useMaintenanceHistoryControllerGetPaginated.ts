/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  MaintenanceHistoryControllerGetPaginatedQueryResponse,
  MaintenanceHistoryControllerGetPaginatedQueryParams,
  MaintenanceHistoryControllerGetPaginated401,
  MaintenanceHistoryControllerGetPaginated403,
} from '../../types/device-maintenance-historyController/MaintenanceHistoryControllerGetPaginated.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const maintenanceHistoryControllerGetPaginatedQueryKey = (params?: MaintenanceHistoryControllerGetPaginatedQueryParams) =>
  [{ url: '/device-maintenance-history/paginated' }, ...(params ? [params] : [])] as const

export type MaintenanceHistoryControllerGetPaginatedQueryKey = ReturnType<typeof maintenanceHistoryControllerGetPaginatedQueryKey>

/**
 * @description Retrieve maintenance history with pagination
 * @summary Get paginated maintenance history
 * {@link /device-maintenance-history/paginated}
 */
export async function maintenanceHistoryControllerGetPaginated(
  params?: MaintenanceHistoryControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaintenanceHistoryControllerGetPaginatedQueryResponse,
    ResponseErrorConfig<MaintenanceHistoryControllerGetPaginated401 | MaintenanceHistoryControllerGetPaginated403>,
    unknown
  >({ method: 'GET', url: `/device-maintenance-history/paginated`, params, ...requestConfig })
  return res
}

export function maintenanceHistoryControllerGetPaginatedQueryOptions(
  params?: MaintenanceHistoryControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = maintenanceHistoryControllerGetPaginatedQueryKey(params)
  return queryOptions<
    ResponseConfig<MaintenanceHistoryControllerGetPaginatedQueryResponse>,
    ResponseErrorConfig<MaintenanceHistoryControllerGetPaginated401 | MaintenanceHistoryControllerGetPaginated403>,
    ResponseConfig<MaintenanceHistoryControllerGetPaginatedQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return maintenanceHistoryControllerGetPaginated(params, config)
    },
  })
}

/**
 * @description Retrieve maintenance history with pagination
 * @summary Get paginated maintenance history
 * {@link /device-maintenance-history/paginated}
 */
export function useMaintenanceHistoryControllerGetPaginated<
  TData = ResponseConfig<MaintenanceHistoryControllerGetPaginatedQueryResponse>,
  TQueryData = ResponseConfig<MaintenanceHistoryControllerGetPaginatedQueryResponse>,
  TQueryKey extends QueryKey = MaintenanceHistoryControllerGetPaginatedQueryKey,
>(
  params?: MaintenanceHistoryControllerGetPaginatedQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<MaintenanceHistoryControllerGetPaginatedQueryResponse>,
        ResponseErrorConfig<MaintenanceHistoryControllerGetPaginated401 | MaintenanceHistoryControllerGetPaginated403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? maintenanceHistoryControllerGetPaginatedQueryKey(params)

  const query = useQuery(
    {
      ...(maintenanceHistoryControllerGetPaginatedQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<MaintenanceHistoryControllerGetPaginated401 | MaintenanceHistoryControllerGetPaginated403>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}