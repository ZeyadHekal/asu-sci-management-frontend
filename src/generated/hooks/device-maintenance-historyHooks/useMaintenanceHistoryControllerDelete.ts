/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  MaintenanceHistoryControllerDeleteMutationResponse,
  MaintenanceHistoryControllerDeletePathParams,
  MaintenanceHistoryControllerDelete401,
  MaintenanceHistoryControllerDelete403,
  MaintenanceHistoryControllerDelete404,
} from '../../types/device-maintenance-historyController/MaintenanceHistoryControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const maintenanceHistoryControllerDeleteMutationKey = () => [{ url: '/device-maintenance-history/{maintenance_history_id}' }] as const

export type MaintenanceHistoryControllerDeleteMutationKey = ReturnType<typeof maintenanceHistoryControllerDeleteMutationKey>

/**
 * @description Delete a maintenance history record
 * @summary Delete maintenance history
 * {@link /device-maintenance-history/:maintenance_history_id}
 */
export async function maintenanceHistoryControllerDelete(
  maintenance_history_id: MaintenanceHistoryControllerDeletePathParams['maintenance_history_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaintenanceHistoryControllerDeleteMutationResponse,
    ResponseErrorConfig<MaintenanceHistoryControllerDelete401 | MaintenanceHistoryControllerDelete403 | MaintenanceHistoryControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/device-maintenance-history/${maintenance_history_id}`, ...requestConfig })
  return res
}

/**
 * @description Delete a maintenance history record
 * @summary Delete maintenance history
 * {@link /device-maintenance-history/:maintenance_history_id}
 */
export function useMaintenanceHistoryControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<MaintenanceHistoryControllerDeleteMutationResponse>,
      ResponseErrorConfig<MaintenanceHistoryControllerDelete401 | MaintenanceHistoryControllerDelete403 | MaintenanceHistoryControllerDelete404>,
      { maintenance_history_id: MaintenanceHistoryControllerDeletePathParams['maintenance_history_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? maintenanceHistoryControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<MaintenanceHistoryControllerDeleteMutationResponse>,
    ResponseErrorConfig<MaintenanceHistoryControllerDelete401 | MaintenanceHistoryControllerDelete403 | MaintenanceHistoryControllerDelete404>,
    { maintenance_history_id: MaintenanceHistoryControllerDeletePathParams['maintenance_history_id'] },
    TContext
  >(
    {
      mutationFn: async ({ maintenance_history_id }) => {
        return maintenanceHistoryControllerDelete(maintenance_history_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}