/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  MaintenanceHistoryControllerGetByIdQueryResponse,
  MaintenanceHistoryControllerGetByIdPathParams,
  MaintenanceHistoryControllerGetById401,
  MaintenanceHistoryControllerGetById403,
  MaintenanceHistoryControllerGetById404,
} from '../../types/device-maintenance-historyController/MaintenanceHistoryControllerGetById.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const maintenanceHistoryControllerGetByIdSuspenseQueryKey = (
  maintenance_history_id: MaintenanceHistoryControllerGetByIdPathParams['maintenance_history_id'],
) => [{ url: '/device-maintenance-history/:maintenance_history_id', params: { maintenance_history_id: maintenance_history_id } }] as const

export type MaintenanceHistoryControllerGetByIdSuspenseQueryKey = ReturnType<typeof maintenanceHistoryControllerGetByIdSuspenseQueryKey>

/**
 * @description Retrieve a maintenance history record by its ID
 * @summary Get maintenance history by ID
 * {@link /device-maintenance-history/:maintenance_history_id}
 */
export async function maintenanceHistoryControllerGetByIdSuspense(
  maintenance_history_id: MaintenanceHistoryControllerGetByIdPathParams['maintenance_history_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MaintenanceHistoryControllerGetByIdQueryResponse,
    ResponseErrorConfig<MaintenanceHistoryControllerGetById401 | MaintenanceHistoryControllerGetById403 | MaintenanceHistoryControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/device-maintenance-history/${maintenance_history_id}`, ...requestConfig })
  return res
}

export function maintenanceHistoryControllerGetByIdSuspenseQueryOptions(
  maintenance_history_id: MaintenanceHistoryControllerGetByIdPathParams['maintenance_history_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = maintenanceHistoryControllerGetByIdSuspenseQueryKey(maintenance_history_id)
  return queryOptions<
    ResponseConfig<MaintenanceHistoryControllerGetByIdQueryResponse>,
    ResponseErrorConfig<MaintenanceHistoryControllerGetById401 | MaintenanceHistoryControllerGetById403 | MaintenanceHistoryControllerGetById404>,
    ResponseConfig<MaintenanceHistoryControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!maintenance_history_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return maintenanceHistoryControllerGetByIdSuspense(maintenance_history_id, config)
    },
  })
}

/**
 * @description Retrieve a maintenance history record by its ID
 * @summary Get maintenance history by ID
 * {@link /device-maintenance-history/:maintenance_history_id}
 */
export function useMaintenanceHistoryControllerGetByIdSuspense<
  TData = ResponseConfig<MaintenanceHistoryControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = MaintenanceHistoryControllerGetByIdSuspenseQueryKey,
>(
  maintenance_history_id: MaintenanceHistoryControllerGetByIdPathParams['maintenance_history_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<MaintenanceHistoryControllerGetByIdQueryResponse>,
        ResponseErrorConfig<MaintenanceHistoryControllerGetById401 | MaintenanceHistoryControllerGetById403 | MaintenanceHistoryControllerGetById404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? maintenanceHistoryControllerGetByIdSuspenseQueryKey(maintenance_history_id)

  const query = useSuspenseQuery(
    {
      ...(maintenanceHistoryControllerGetByIdSuspenseQueryOptions(maintenance_history_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<MaintenanceHistoryControllerGetById401 | MaintenanceHistoryControllerGetById403 | MaintenanceHistoryControllerGetById404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}