/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabControllerCreateMutationRequest,
  LabControllerCreateMutationResponse,
  LabControllerCreate400,
  LabControllerCreate401,
  LabControllerCreate403,
} from '../../types/labsController/LabControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const labControllerCreateMutationKey = () => [{ url: '/labs' }] as const

export type LabControllerCreateMutationKey = ReturnType<typeof labControllerCreateMutationKey>

/**
 * @description Create a new lab
 * @summary Create lab
 * {@link /labs}
 */
export async function labControllerCreate(
  data: LabControllerCreateMutationRequest,
  config: Partial<RequestConfig<LabControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabControllerCreateMutationResponse,
    ResponseErrorConfig<LabControllerCreate400 | LabControllerCreate401 | LabControllerCreate403>,
    LabControllerCreateMutationRequest
  >({ method: 'POST', url: `/labs`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new lab
 * @summary Create lab
 * {@link /labs}
 */
export function useLabControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabControllerCreateMutationResponse>,
      ResponseErrorConfig<LabControllerCreate400 | LabControllerCreate401 | LabControllerCreate403>,
      { data: LabControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LabControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<LabControllerCreateMutationResponse>,
    ResponseErrorConfig<LabControllerCreate400 | LabControllerCreate401 | LabControllerCreate403>,
    { data: LabControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return labControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}