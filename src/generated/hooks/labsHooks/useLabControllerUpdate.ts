/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabControllerUpdateMutationRequest,
  LabControllerUpdateMutationResponse,
  LabControllerUpdatePathParams,
  LabControllerUpdate400,
  LabControllerUpdate401,
  LabControllerUpdate403,
  LabControllerUpdate404,
} from '../../types/labsController/LabControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const labControllerUpdateMutationKey = () => [{ url: '/labs/{lab_id}' }] as const

export type LabControllerUpdateMutationKey = ReturnType<typeof labControllerUpdateMutationKey>

/**
 * @description Update an existing lab by ID
 * @summary Update lab
 * {@link /labs/:lab_id}
 */
export async function labControllerUpdate(
  lab_id: LabControllerUpdatePathParams['lab_id'],
  data?: LabControllerUpdateMutationRequest,
  config: Partial<RequestConfig<LabControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabControllerUpdateMutationResponse,
    ResponseErrorConfig<LabControllerUpdate400 | LabControllerUpdate401 | LabControllerUpdate403 | LabControllerUpdate404>,
    LabControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/labs/${lab_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing lab by ID
 * @summary Update lab
 * {@link /labs/:lab_id}
 */
export function useLabControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabControllerUpdateMutationResponse>,
      ResponseErrorConfig<LabControllerUpdate400 | LabControllerUpdate401 | LabControllerUpdate403 | LabControllerUpdate404>,
      { lab_id: LabControllerUpdatePathParams['lab_id']; data?: LabControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LabControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<LabControllerUpdateMutationResponse>,
    ResponseErrorConfig<LabControllerUpdate400 | LabControllerUpdate401 | LabControllerUpdate403 | LabControllerUpdate404>,
    { lab_id: LabControllerUpdatePathParams['lab_id']; data?: LabControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ lab_id, data }) => {
        return labControllerUpdate(lab_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}