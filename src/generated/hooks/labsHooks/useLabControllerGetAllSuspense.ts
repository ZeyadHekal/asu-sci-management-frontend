/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { LabControllerGetAllQueryResponse, LabControllerGetAll401, LabControllerGetAll403 } from '../../types/labsController/LabControllerGetAll.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const labControllerGetAllSuspenseQueryKey = () => [{ url: '/labs' }] as const

export type LabControllerGetAllSuspenseQueryKey = ReturnType<typeof labControllerGetAllSuspenseQueryKey>

/**
 * @description Retrieve all labs
 * @summary Get all labs
 * {@link /labs}
 */
export async function labControllerGetAllSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<LabControllerGetAllQueryResponse, ResponseErrorConfig<LabControllerGetAll401 | LabControllerGetAll403>, unknown>({
    method: 'GET',
    url: `/labs`,
    ...requestConfig,
  })
  return res
}

export function labControllerGetAllSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = labControllerGetAllSuspenseQueryKey()
  return queryOptions<
    ResponseConfig<LabControllerGetAllQueryResponse>,
    ResponseErrorConfig<LabControllerGetAll401 | LabControllerGetAll403>,
    ResponseConfig<LabControllerGetAllQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return labControllerGetAllSuspense(config)
    },
  })
}

/**
 * @description Retrieve all labs
 * @summary Get all labs
 * {@link /labs}
 */
export function useLabControllerGetAllSuspense<
  TData = ResponseConfig<LabControllerGetAllQueryResponse>,
  TQueryKey extends QueryKey = LabControllerGetAllSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<LabControllerGetAllQueryResponse>,
        ResponseErrorConfig<LabControllerGetAll401 | LabControllerGetAll403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? labControllerGetAllSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(labControllerGetAllSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<LabControllerGetAll401 | LabControllerGetAll403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}