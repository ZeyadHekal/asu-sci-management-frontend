/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  LabControllerGetPaginatedQueryResponse,
  LabControllerGetPaginatedQueryParams,
  LabControllerGetPaginated401,
  LabControllerGetPaginated403,
} from '../../types/labsController/LabControllerGetPaginated.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const labControllerGetPaginatedSuspenseQueryKey = (params?: LabControllerGetPaginatedQueryParams) =>
  [{ url: '/labs/paginated' }, ...(params ? [params] : [])] as const

export type LabControllerGetPaginatedSuspenseQueryKey = ReturnType<typeof labControllerGetPaginatedSuspenseQueryKey>

/**
 * @description Retrieve labs with pagination
 * @summary Get paginated labs
 * {@link /labs/paginated}
 */
export async function labControllerGetPaginatedSuspense(
  params?: LabControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<LabControllerGetPaginatedQueryResponse, ResponseErrorConfig<LabControllerGetPaginated401 | LabControllerGetPaginated403>, unknown>({
    method: 'GET',
    url: `/labs/paginated`,
    params,
    ...requestConfig,
  })
  return res
}

export function labControllerGetPaginatedSuspenseQueryOptions(
  params?: LabControllerGetPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = labControllerGetPaginatedSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<LabControllerGetPaginatedQueryResponse>,
    ResponseErrorConfig<LabControllerGetPaginated401 | LabControllerGetPaginated403>,
    ResponseConfig<LabControllerGetPaginatedQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return labControllerGetPaginatedSuspense(params, config)
    },
  })
}

/**
 * @description Retrieve labs with pagination
 * @summary Get paginated labs
 * {@link /labs/paginated}
 */
export function useLabControllerGetPaginatedSuspense<
  TData = ResponseConfig<LabControllerGetPaginatedQueryResponse>,
  TQueryKey extends QueryKey = LabControllerGetPaginatedSuspenseQueryKey,
>(
  params?: LabControllerGetPaginatedQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<LabControllerGetPaginatedQueryResponse>,
        ResponseErrorConfig<LabControllerGetPaginated401 | LabControllerGetPaginated403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? labControllerGetPaginatedSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(labControllerGetPaginatedSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<LabControllerGetPaginated401 | LabControllerGetPaginated403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}