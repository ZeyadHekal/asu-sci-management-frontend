/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LabControllerDeleteMutationResponse,
  LabControllerDeletePathParams,
  LabControllerDelete401,
  LabControllerDelete403,
  LabControllerDelete404,
} from '../../types/labsController/LabControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const labControllerDeleteMutationKey = () => [{ url: '/labs/{lab_ids}' }] as const

export type LabControllerDeleteMutationKey = ReturnType<typeof labControllerDeleteMutationKey>

/**
 * @description Delete one or multiple labs by IDs
 * @summary Delete labs
 * {@link /labs/:lab_ids}
 */
export async function labControllerDelete(lab_ids: LabControllerDeletePathParams['lab_ids'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LabControllerDeleteMutationResponse,
    ResponseErrorConfig<LabControllerDelete401 | LabControllerDelete403 | LabControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/labs/${lab_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple labs by IDs
 * @summary Delete labs
 * {@link /labs/:lab_ids}
 */
export function useLabControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LabControllerDeleteMutationResponse>,
      ResponseErrorConfig<LabControllerDelete401 | LabControllerDelete403 | LabControllerDelete404>,
      { lab_ids: LabControllerDeletePathParams['lab_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? labControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<LabControllerDeleteMutationResponse>,
    ResponseErrorConfig<LabControllerDelete401 | LabControllerDelete403 | LabControllerDelete404>,
    { lab_ids: LabControllerDeletePathParams['lab_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ lab_ids }) => {
        return labControllerDelete(lab_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}