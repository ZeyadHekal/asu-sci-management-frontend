/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  SoftwareControllerDeleteMutationResponse,
  SoftwareControllerDeletePathParams,
  SoftwareControllerDelete401,
  SoftwareControllerDelete403,
  SoftwareControllerDelete404,
} from '../../types/softwaresController/SoftwareControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const softwareControllerDeleteMutationKey = () => [{ url: '/softwares/{software_ids}' }] as const

export type SoftwareControllerDeleteMutationKey = ReturnType<typeof softwareControllerDeleteMutationKey>

/**
 * @description Delete one or multiple software by IDs
 * @summary Delete software
 * {@link /softwares/:software_ids}
 */
export async function softwareControllerDelete(
  software_ids: SoftwareControllerDeletePathParams['software_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    SoftwareControllerDeleteMutationResponse,
    ResponseErrorConfig<SoftwareControllerDelete401 | SoftwareControllerDelete403 | SoftwareControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/softwares/${software_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple software by IDs
 * @summary Delete software
 * {@link /softwares/:software_ids}
 */
export function useSoftwareControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<SoftwareControllerDeleteMutationResponse>,
      ResponseErrorConfig<SoftwareControllerDelete401 | SoftwareControllerDelete403 | SoftwareControllerDelete404>,
      { software_ids: SoftwareControllerDeletePathParams['software_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? softwareControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<SoftwareControllerDeleteMutationResponse>,
    ResponseErrorConfig<SoftwareControllerDelete401 | SoftwareControllerDelete403 | SoftwareControllerDelete404>,
    { software_ids: SoftwareControllerDeletePathParams['software_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ software_ids }) => {
        return softwareControllerDelete(software_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}