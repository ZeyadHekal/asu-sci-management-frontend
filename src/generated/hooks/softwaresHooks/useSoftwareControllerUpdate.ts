/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  SoftwareControllerUpdateMutationRequest,
  SoftwareControllerUpdateMutationResponse,
  SoftwareControllerUpdatePathParams,
  SoftwareControllerUpdate400,
  SoftwareControllerUpdate401,
  SoftwareControllerUpdate403,
  SoftwareControllerUpdate404,
} from '../../types/softwaresController/SoftwareControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const softwareControllerUpdateMutationKey = () => [{ url: '/softwares/{software_id}' }] as const

export type SoftwareControllerUpdateMutationKey = ReturnType<typeof softwareControllerUpdateMutationKey>

/**
 * @description Update an existing software by ID
 * @summary Update software
 * {@link /softwares/:software_id}
 */
export async function softwareControllerUpdate(
  software_id: SoftwareControllerUpdatePathParams['software_id'],
  data?: SoftwareControllerUpdateMutationRequest,
  config: Partial<RequestConfig<SoftwareControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    SoftwareControllerUpdateMutationResponse,
    ResponseErrorConfig<SoftwareControllerUpdate400 | SoftwareControllerUpdate401 | SoftwareControllerUpdate403 | SoftwareControllerUpdate404>,
    SoftwareControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/softwares/${software_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing software by ID
 * @summary Update software
 * {@link /softwares/:software_id}
 */
export function useSoftwareControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<SoftwareControllerUpdateMutationResponse>,
      ResponseErrorConfig<SoftwareControllerUpdate400 | SoftwareControllerUpdate401 | SoftwareControllerUpdate403 | SoftwareControllerUpdate404>,
      { software_id: SoftwareControllerUpdatePathParams['software_id']; data?: SoftwareControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<SoftwareControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? softwareControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<SoftwareControllerUpdateMutationResponse>,
    ResponseErrorConfig<SoftwareControllerUpdate400 | SoftwareControllerUpdate401 | SoftwareControllerUpdate403 | SoftwareControllerUpdate404>,
    { software_id: SoftwareControllerUpdatePathParams['software_id']; data?: SoftwareControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ software_id, data }) => {
        return softwareControllerUpdate(software_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}