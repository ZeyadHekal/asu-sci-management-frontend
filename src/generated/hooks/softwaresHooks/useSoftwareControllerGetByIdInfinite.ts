/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  SoftwareControllerGetByIdQueryResponse,
  SoftwareControllerGetByIdPathParams,
  SoftwareControllerGetById401,
  SoftwareControllerGetById403,
  SoftwareControllerGetById404,
} from '../../types/softwaresController/SoftwareControllerGetById.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const softwareControllerGetByIdInfiniteQueryKey = (software_id: SoftwareControllerGetByIdPathParams['software_id']) =>
  [{ url: '/softwares/:software_id', params: { software_id: software_id } }] as const

export type SoftwareControllerGetByIdInfiniteQueryKey = ReturnType<typeof softwareControllerGetByIdInfiniteQueryKey>

/**
 * @description Retrieve a software by its ID
 * @summary Get software by ID
 * {@link /softwares/:software_id}
 */
export async function softwareControllerGetByIdInfinite(
  software_id: SoftwareControllerGetByIdPathParams['software_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    SoftwareControllerGetByIdQueryResponse,
    ResponseErrorConfig<SoftwareControllerGetById401 | SoftwareControllerGetById403 | SoftwareControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/softwares/${software_id}`, ...requestConfig })
  return res
}

export function softwareControllerGetByIdInfiniteQueryOptions(
  software_id: SoftwareControllerGetByIdPathParams['software_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = softwareControllerGetByIdInfiniteQueryKey(software_id)
  return infiniteQueryOptions<
    ResponseConfig<SoftwareControllerGetByIdQueryResponse>,
    ResponseErrorConfig<SoftwareControllerGetById401 | SoftwareControllerGetById403 | SoftwareControllerGetById404>,
    ResponseConfig<SoftwareControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!software_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return softwareControllerGetByIdInfinite(software_id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve a software by its ID
 * @summary Get software by ID
 * {@link /softwares/:software_id}
 */
export function useSoftwareControllerGetByIdInfinite<
  TData = InfiniteData<ResponseConfig<SoftwareControllerGetByIdQueryResponse>>,
  TQueryData = ResponseConfig<SoftwareControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = SoftwareControllerGetByIdInfiniteQueryKey,
>(
  software_id: SoftwareControllerGetByIdPathParams['software_id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<SoftwareControllerGetByIdQueryResponse>,
        ResponseErrorConfig<SoftwareControllerGetById401 | SoftwareControllerGetById403 | SoftwareControllerGetById404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? softwareControllerGetByIdInfiniteQueryKey(software_id)

  const query = useInfiniteQuery(
    {
      ...(softwareControllerGetByIdInfiniteQueryOptions(software_id, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<SoftwareControllerGetById401 | SoftwareControllerGetById403 | SoftwareControllerGetById404>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}