/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  SoftwareControllerGetAllQueryResponse,
  SoftwareControllerGetAll401,
  SoftwareControllerGetAll403,
} from '../../types/softwaresController/SoftwareControllerGetAll.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const softwareControllerGetAllSuspenseQueryKey = () => [{ url: '/softwares' }] as const

export type SoftwareControllerGetAllSuspenseQueryKey = ReturnType<typeof softwareControllerGetAllSuspenseQueryKey>

/**
 * @description Retrieve all software
 * @summary Get all software
 * {@link /softwares}
 */
export async function softwareControllerGetAllSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<SoftwareControllerGetAllQueryResponse, ResponseErrorConfig<SoftwareControllerGetAll401 | SoftwareControllerGetAll403>, unknown>({
    method: 'GET',
    url: `/softwares`,
    ...requestConfig,
  })
  return res
}

export function softwareControllerGetAllSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = softwareControllerGetAllSuspenseQueryKey()
  return queryOptions<
    ResponseConfig<SoftwareControllerGetAllQueryResponse>,
    ResponseErrorConfig<SoftwareControllerGetAll401 | SoftwareControllerGetAll403>,
    ResponseConfig<SoftwareControllerGetAllQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return softwareControllerGetAllSuspense(config)
    },
  })
}

/**
 * @description Retrieve all software
 * @summary Get all software
 * {@link /softwares}
 */
export function useSoftwareControllerGetAllSuspense<
  TData = ResponseConfig<SoftwareControllerGetAllQueryResponse>,
  TQueryKey extends QueryKey = SoftwareControllerGetAllSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<SoftwareControllerGetAllQueryResponse>,
        ResponseErrorConfig<SoftwareControllerGetAll401 | SoftwareControllerGetAll403>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? softwareControllerGetAllSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(softwareControllerGetAllSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<SoftwareControllerGetAll401 | SoftwareControllerGetAll403>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}