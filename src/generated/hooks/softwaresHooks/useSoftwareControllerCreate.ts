/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  SoftwareControllerCreateMutationRequest,
  SoftwareControllerCreateMutationResponse,
  SoftwareControllerCreate400,
  SoftwareControllerCreate401,
  SoftwareControllerCreate403,
} from '../../types/softwaresController/SoftwareControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const softwareControllerCreateMutationKey = () => [{ url: '/softwares' }] as const

export type SoftwareControllerCreateMutationKey = ReturnType<typeof softwareControllerCreateMutationKey>

/**
 * @description Create a new software
 * @summary Create software
 * {@link /softwares}
 */
export async function softwareControllerCreate(
  data: SoftwareControllerCreateMutationRequest,
  config: Partial<RequestConfig<SoftwareControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    SoftwareControllerCreateMutationResponse,
    ResponseErrorConfig<SoftwareControllerCreate400 | SoftwareControllerCreate401 | SoftwareControllerCreate403>,
    SoftwareControllerCreateMutationRequest
  >({ method: 'POST', url: `/softwares`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new software
 * @summary Create software
 * {@link /softwares}
 */
export function useSoftwareControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<SoftwareControllerCreateMutationResponse>,
      ResponseErrorConfig<SoftwareControllerCreate400 | SoftwareControllerCreate401 | SoftwareControllerCreate403>,
      { data: SoftwareControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<SoftwareControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? softwareControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<SoftwareControllerCreateMutationResponse>,
    ResponseErrorConfig<SoftwareControllerCreate400 | SoftwareControllerCreate401 | SoftwareControllerCreate403>,
    { data: SoftwareControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return softwareControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}