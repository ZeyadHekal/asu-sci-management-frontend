/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  UserTypeControllerGetPrivilegesQueryResponse,
  UserTypeControllerGetPrivilegesPathParams,
  UserTypeControllerGetPrivileges401,
  UserTypeControllerGetPrivileges403,
  UserTypeControllerGetPrivileges404,
} from '../../types/user-typesController/UserTypeControllerGetPrivileges.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const userTypeControllerGetPrivilegesSuspenseQueryKey = (id: UserTypeControllerGetPrivilegesPathParams['id']) =>
  [{ url: '/user-types/:id/privileges', params: { id: id } }] as const

export type UserTypeControllerGetPrivilegesSuspenseQueryKey = ReturnType<typeof userTypeControllerGetPrivilegesSuspenseQueryKey>

/**
 * @description Retrieve all privileges assigned to a specific user type
 * @summary Get user type privileges
 * {@link /user-types/:id/privileges}
 */
export async function userTypeControllerGetPrivilegesSuspense(
  id: UserTypeControllerGetPrivilegesPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerGetPrivilegesQueryResponse,
    ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>,
    unknown
  >({ method: 'GET', url: `/user-types/${id}/privileges`, ...requestConfig })
  return res
}

export function userTypeControllerGetPrivilegesSuspenseQueryOptions(
  id: UserTypeControllerGetPrivilegesPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = userTypeControllerGetPrivilegesSuspenseQueryKey(id)
  return queryOptions<
    ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
    ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>,
    ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userTypeControllerGetPrivilegesSuspense(id, config)
    },
  })
}

/**
 * @description Retrieve all privileges assigned to a specific user type
 * @summary Get user type privileges
 * {@link /user-types/:id/privileges}
 */
export function useUserTypeControllerGetPrivilegesSuspense<
  TData = ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
  TQueryKey extends QueryKey = UserTypeControllerGetPrivilegesSuspenseQueryKey,
>(
  id: UserTypeControllerGetPrivilegesPathParams['id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
        ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userTypeControllerGetPrivilegesSuspenseQueryKey(id)

  const query = useSuspenseQuery(
    {
      ...(userTypeControllerGetPrivilegesSuspenseQueryOptions(id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}