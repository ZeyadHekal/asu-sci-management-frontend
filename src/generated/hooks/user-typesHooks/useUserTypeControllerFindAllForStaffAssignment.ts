/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  UserTypeControllerFindAllForStaffAssignmentQueryResponse,
  UserTypeControllerFindAllForStaffAssignment401,
  UserTypeControllerFindAllForStaffAssignment403,
} from '../../types/user-typesController/UserTypeControllerFindAllForStaffAssignment.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const userTypeControllerFindAllForStaffAssignmentQueryKey = () => [{ url: '/user-types/for-staff-assignment' }] as const

export type UserTypeControllerFindAllForStaffAssignmentQueryKey = ReturnType<typeof userTypeControllerFindAllForStaffAssignmentQueryKey>

/**
 * @description Retrieve user types suitable for staff assignment (excludes Student type)
 * @summary Get user types for staff assignment
 * {@link /user-types/for-staff-assignment}
 */
export async function userTypeControllerFindAllForStaffAssignment(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerFindAllForStaffAssignmentQueryResponse,
    ResponseErrorConfig<UserTypeControllerFindAllForStaffAssignment401 | UserTypeControllerFindAllForStaffAssignment403>,
    unknown
  >({ method: 'GET', url: `/user-types/for-staff-assignment`, ...requestConfig })
  return res
}

export function userTypeControllerFindAllForStaffAssignmentQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = userTypeControllerFindAllForStaffAssignmentQueryKey()
  return queryOptions<
    ResponseConfig<UserTypeControllerFindAllForStaffAssignmentQueryResponse>,
    ResponseErrorConfig<UserTypeControllerFindAllForStaffAssignment401 | UserTypeControllerFindAllForStaffAssignment403>,
    ResponseConfig<UserTypeControllerFindAllForStaffAssignmentQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userTypeControllerFindAllForStaffAssignment(config)
    },
  })
}

/**
 * @description Retrieve user types suitable for staff assignment (excludes Student type)
 * @summary Get user types for staff assignment
 * {@link /user-types/for-staff-assignment}
 */
export function useUserTypeControllerFindAllForStaffAssignment<
  TData = ResponseConfig<UserTypeControllerFindAllForStaffAssignmentQueryResponse>,
  TQueryData = ResponseConfig<UserTypeControllerFindAllForStaffAssignmentQueryResponse>,
  TQueryKey extends QueryKey = UserTypeControllerFindAllForStaffAssignmentQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<UserTypeControllerFindAllForStaffAssignmentQueryResponse>,
        ResponseErrorConfig<UserTypeControllerFindAllForStaffAssignment401 | UserTypeControllerFindAllForStaffAssignment403>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userTypeControllerFindAllForStaffAssignmentQueryKey()

  const query = useQuery(
    {
      ...(userTypeControllerFindAllForStaffAssignmentQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<UserTypeControllerFindAllForStaffAssignment401 | UserTypeControllerFindAllForStaffAssignment403>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}