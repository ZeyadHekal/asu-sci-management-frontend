/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  UserTypeControllerGetPrivilegesQueryResponse,
  UserTypeControllerGetPrivilegesPathParams,
  UserTypeControllerGetPrivileges401,
  UserTypeControllerGetPrivileges403,
  UserTypeControllerGetPrivileges404,
} from '../../types/user-typesController/UserTypeControllerGetPrivileges.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const userTypeControllerGetPrivilegesInfiniteQueryKey = (id: UserTypeControllerGetPrivilegesPathParams['id']) =>
  [{ url: '/user-types/:id/privileges', params: { id: id } }] as const

export type UserTypeControllerGetPrivilegesInfiniteQueryKey = ReturnType<typeof userTypeControllerGetPrivilegesInfiniteQueryKey>

/**
 * @description Retrieve all privileges assigned to a specific user type
 * @summary Get user type privileges
 * {@link /user-types/:id/privileges}
 */
export async function userTypeControllerGetPrivilegesInfinite(
  id: UserTypeControllerGetPrivilegesPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerGetPrivilegesQueryResponse,
    ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>,
    unknown
  >({ method: 'GET', url: `/user-types/${id}/privileges`, ...requestConfig })
  return res
}

export function userTypeControllerGetPrivilegesInfiniteQueryOptions(
  id: UserTypeControllerGetPrivilegesPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = userTypeControllerGetPrivilegesInfiniteQueryKey(id)
  return infiniteQueryOptions<
    ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
    ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>,
    ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userTypeControllerGetPrivilegesInfinite(id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve all privileges assigned to a specific user type
 * @summary Get user type privileges
 * {@link /user-types/:id/privileges}
 */
export function useUserTypeControllerGetPrivilegesInfinite<
  TData = InfiniteData<ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>>,
  TQueryData = ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
  TQueryKey extends QueryKey = UserTypeControllerGetPrivilegesInfiniteQueryKey,
>(
  id: UserTypeControllerGetPrivilegesPathParams['id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<UserTypeControllerGetPrivilegesQueryResponse>,
        ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userTypeControllerGetPrivilegesInfiniteQueryKey(id)

  const query = useInfiniteQuery(
    {
      ...(userTypeControllerGetPrivilegesInfiniteQueryOptions(id, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<UserTypeControllerGetPrivileges401 | UserTypeControllerGetPrivileges403 | UserTypeControllerGetPrivileges404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}