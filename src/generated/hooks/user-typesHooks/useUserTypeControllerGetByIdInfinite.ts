/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  UserTypeControllerGetByIdQueryResponse,
  UserTypeControllerGetByIdPathParams,
  UserTypeControllerGetById401,
  UserTypeControllerGetById403,
  UserTypeControllerGetById404,
} from '../../types/user-typesController/UserTypeControllerGetById.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const userTypeControllerGetByIdInfiniteQueryKey = (id: UserTypeControllerGetByIdPathParams['id']) =>
  [{ url: '/user-types/:id', params: { id: id } }] as const

export type UserTypeControllerGetByIdInfiniteQueryKey = ReturnType<typeof userTypeControllerGetByIdInfiniteQueryKey>

/**
 * @description Retrieve a user type by its ID
 * @summary Get user type by ID
 * {@link /user-types/:id}
 */
export async function userTypeControllerGetByIdInfinite(
  id: UserTypeControllerGetByIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerGetByIdQueryResponse,
    ResponseErrorConfig<UserTypeControllerGetById401 | UserTypeControllerGetById403 | UserTypeControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/user-types/${id}`, ...requestConfig })
  return res
}

export function userTypeControllerGetByIdInfiniteQueryOptions(
  id: UserTypeControllerGetByIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = userTypeControllerGetByIdInfiniteQueryKey(id)
  return infiniteQueryOptions<
    ResponseConfig<UserTypeControllerGetByIdQueryResponse>,
    ResponseErrorConfig<UserTypeControllerGetById401 | UserTypeControllerGetById403 | UserTypeControllerGetById404>,
    ResponseConfig<UserTypeControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return userTypeControllerGetByIdInfinite(id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve a user type by its ID
 * @summary Get user type by ID
 * {@link /user-types/:id}
 */
export function useUserTypeControllerGetByIdInfinite<
  TData = InfiniteData<ResponseConfig<UserTypeControllerGetByIdQueryResponse>>,
  TQueryData = ResponseConfig<UserTypeControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = UserTypeControllerGetByIdInfiniteQueryKey,
>(
  id: UserTypeControllerGetByIdPathParams['id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<UserTypeControllerGetByIdQueryResponse>,
        ResponseErrorConfig<UserTypeControllerGetById401 | UserTypeControllerGetById403 | UserTypeControllerGetById404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? userTypeControllerGetByIdInfiniteQueryKey(id)

  const query = useInfiniteQuery(
    {
      ...(userTypeControllerGetByIdInfiniteQueryOptions(id, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<UserTypeControllerGetById401 | UserTypeControllerGetById403 | UserTypeControllerGetById404>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}