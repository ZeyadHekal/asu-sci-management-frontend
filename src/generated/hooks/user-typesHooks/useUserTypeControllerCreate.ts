/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserTypeControllerCreateMutationRequest,
  UserTypeControllerCreateMutationResponse,
  UserTypeControllerCreate400,
  UserTypeControllerCreate401,
  UserTypeControllerCreate403,
} from '../../types/user-typesController/UserTypeControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const userTypeControllerCreateMutationKey = () => [{ url: '/user-types' }] as const

export type UserTypeControllerCreateMutationKey = ReturnType<typeof userTypeControllerCreateMutationKey>

/**
 * @description Create a new user type
 * @summary Create user type
 * {@link /user-types}
 */
export async function userTypeControllerCreate(
  data: UserTypeControllerCreateMutationRequest,
  config: Partial<RequestConfig<UserTypeControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerCreateMutationResponse,
    ResponseErrorConfig<UserTypeControllerCreate400 | UserTypeControllerCreate401 | UserTypeControllerCreate403>,
    UserTypeControllerCreateMutationRequest
  >({ method: 'POST', url: `/user-types`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new user type
 * @summary Create user type
 * {@link /user-types}
 */
export function useUserTypeControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserTypeControllerCreateMutationResponse>,
      ResponseErrorConfig<UserTypeControllerCreate400 | UserTypeControllerCreate401 | UserTypeControllerCreate403>,
      { data: UserTypeControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserTypeControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userTypeControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<UserTypeControllerCreateMutationResponse>,
    ResponseErrorConfig<UserTypeControllerCreate400 | UserTypeControllerCreate401 | UserTypeControllerCreate403>,
    { data: UserTypeControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return userTypeControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}