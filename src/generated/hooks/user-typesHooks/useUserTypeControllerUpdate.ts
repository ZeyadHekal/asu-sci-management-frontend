/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserTypeControllerUpdateMutationRequest,
  UserTypeControllerUpdateMutationResponse,
  UserTypeControllerUpdatePathParams,
  UserTypeControllerUpdate400,
  UserTypeControllerUpdate401,
  UserTypeControllerUpdate403,
  UserTypeControllerUpdate404,
} from '../../types/user-typesController/UserTypeControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const userTypeControllerUpdateMutationKey = () => [{ url: '/user-types/{id}' }] as const

export type UserTypeControllerUpdateMutationKey = ReturnType<typeof userTypeControllerUpdateMutationKey>

/**
 * @description Update an existing user type by ID
 * @summary Update user type
 * {@link /user-types/:id}
 */
export async function userTypeControllerUpdate(
  id: UserTypeControllerUpdatePathParams['id'],
  data?: UserTypeControllerUpdateMutationRequest,
  config: Partial<RequestConfig<UserTypeControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerUpdateMutationResponse,
    ResponseErrorConfig<UserTypeControllerUpdate400 | UserTypeControllerUpdate401 | UserTypeControllerUpdate403 | UserTypeControllerUpdate404>,
    UserTypeControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/user-types/${id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing user type by ID
 * @summary Update user type
 * {@link /user-types/:id}
 */
export function useUserTypeControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserTypeControllerUpdateMutationResponse>,
      ResponseErrorConfig<UserTypeControllerUpdate400 | UserTypeControllerUpdate401 | UserTypeControllerUpdate403 | UserTypeControllerUpdate404>,
      { id: UserTypeControllerUpdatePathParams['id']; data?: UserTypeControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UserTypeControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userTypeControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<UserTypeControllerUpdateMutationResponse>,
    ResponseErrorConfig<UserTypeControllerUpdate400 | UserTypeControllerUpdate401 | UserTypeControllerUpdate403 | UserTypeControllerUpdate404>,
    { id: UserTypeControllerUpdatePathParams['id']; data?: UserTypeControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return userTypeControllerUpdate(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}