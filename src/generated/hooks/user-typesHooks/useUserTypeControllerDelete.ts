/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UserTypeControllerDeleteMutationResponse,
  UserTypeControllerDeletePathParams,
  UserTypeControllerDelete400,
  UserTypeControllerDelete401,
  UserTypeControllerDelete403,
  UserTypeControllerDelete404,
} from '../../types/user-typesController/UserTypeControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const userTypeControllerDeleteMutationKey = () => [{ url: '/user-types/{ids}' }] as const

export type UserTypeControllerDeleteMutationKey = ReturnType<typeof userTypeControllerDeleteMutationKey>

/**
 * @description Delete one or multiple user types by IDs
 * @summary Delete user types
 * {@link /user-types/:ids}
 */
export async function userTypeControllerDelete(
  ids: UserTypeControllerDeletePathParams['ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UserTypeControllerDeleteMutationResponse,
    ResponseErrorConfig<UserTypeControllerDelete400 | UserTypeControllerDelete401 | UserTypeControllerDelete403 | UserTypeControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/user-types/${ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple user types by IDs
 * @summary Delete user types
 * {@link /user-types/:ids}
 */
export function useUserTypeControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UserTypeControllerDeleteMutationResponse>,
      ResponseErrorConfig<UserTypeControllerDelete400 | UserTypeControllerDelete401 | UserTypeControllerDelete403 | UserTypeControllerDelete404>,
      { ids: UserTypeControllerDeletePathParams['ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? userTypeControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<UserTypeControllerDeleteMutationResponse>,
    ResponseErrorConfig<UserTypeControllerDelete400 | UserTypeControllerDelete401 | UserTypeControllerDelete403 | UserTypeControllerDelete404>,
    { ids: UserTypeControllerDeletePathParams['ids'] },
    TContext
  >(
    {
      mutationFn: async ({ ids }) => {
        return userTypeControllerDelete(ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}