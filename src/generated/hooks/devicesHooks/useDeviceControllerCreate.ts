/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerCreateMutationRequest,
  DeviceControllerCreateMutationResponse,
  DeviceControllerCreate400,
  DeviceControllerCreate401,
  DeviceControllerCreate403,
} from '../../types/devicesController/DeviceControllerCreate.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerCreateMutationKey = () => [{ url: '/devices' }] as const

export type DeviceControllerCreateMutationKey = ReturnType<typeof deviceControllerCreateMutationKey>

/**
 * @description Create a new device
 * @summary Create device
 * {@link /devices}
 */
export async function deviceControllerCreate(
  data: DeviceControllerCreateMutationRequest,
  config: Partial<RequestConfig<DeviceControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerCreateMutationResponse,
    ResponseErrorConfig<DeviceControllerCreate400 | DeviceControllerCreate401 | DeviceControllerCreate403>,
    DeviceControllerCreateMutationRequest
  >({ method: 'POST', url: `/devices`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new device
 * @summary Create device
 * {@link /devices}
 */
export function useDeviceControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerCreateMutationResponse>,
      ResponseErrorConfig<DeviceControllerCreate400 | DeviceControllerCreate401 | DeviceControllerCreate403>,
      { data: DeviceControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerCreateMutationResponse>,
    ResponseErrorConfig<DeviceControllerCreate400 | DeviceControllerCreate401 | DeviceControllerCreate403>,
    { data: DeviceControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return deviceControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}