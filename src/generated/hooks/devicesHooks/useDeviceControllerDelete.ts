/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerDeleteMutationResponse,
  DeviceControllerDeletePathParams,
  DeviceControllerDelete401,
  DeviceControllerDelete403,
  DeviceControllerDelete404,
} from '../../types/devicesController/DeviceControllerDelete.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerDeleteMutationKey = () => [{ url: '/devices/{device_ids}' }] as const

export type DeviceControllerDeleteMutationKey = ReturnType<typeof deviceControllerDeleteMutationKey>

/**
 * @description Delete one or multiple devices by IDs
 * @summary Delete devices
 * {@link /devices/:device_ids}
 */
export async function deviceControllerDelete(
  device_ids: DeviceControllerDeletePathParams['device_ids'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerDeleteMutationResponse,
    ResponseErrorConfig<DeviceControllerDelete401 | DeviceControllerDelete403 | DeviceControllerDelete404>,
    unknown
  >({ method: 'DELETE', url: `/devices/${device_ids}`, ...requestConfig })
  return res
}

/**
 * @description Delete one or multiple devices by IDs
 * @summary Delete devices
 * {@link /devices/:device_ids}
 */
export function useDeviceControllerDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerDeleteMutationResponse>,
      ResponseErrorConfig<DeviceControllerDelete401 | DeviceControllerDelete403 | DeviceControllerDelete404>,
      { device_ids: DeviceControllerDeletePathParams['device_ids'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerDeleteMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerDeleteMutationResponse>,
    ResponseErrorConfig<DeviceControllerDelete401 | DeviceControllerDelete403 | DeviceControllerDelete404>,
    { device_ids: DeviceControllerDeletePathParams['device_ids'] },
    TContext
  >(
    {
      mutationFn: async ({ device_ids }) => {
        return deviceControllerDelete(device_ids, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}