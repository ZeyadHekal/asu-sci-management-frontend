/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetDeviceLoginHistoryQueryResponse,
  DeviceControllerGetDeviceLoginHistoryPathParams,
  DeviceControllerGetDeviceLoginHistoryQueryParams,
  DeviceControllerGetDeviceLoginHistory401,
  DeviceControllerGetDeviceLoginHistory403,
  DeviceControllerGetDeviceLoginHistory404,
} from '../../types/devicesController/DeviceControllerGetDeviceLoginHistory.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const deviceControllerGetDeviceLoginHistoryInfiniteQueryKey = (
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
) => [{ url: '/devices/:device_id/login-history', params: { device_id: device_id } }, ...(params ? [params] : [])] as const

export type DeviceControllerGetDeviceLoginHistoryInfiniteQueryKey = ReturnType<typeof deviceControllerGetDeviceLoginHistoryInfiniteQueryKey>

/**
 * @description Retrieve login history for a specific device based on IP address
 * @summary Get device login history
 * {@link /devices/:device_id/login-history}
 */
export async function deviceControllerGetDeviceLoginHistoryInfinite(
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetDeviceLoginHistoryQueryResponse,
    ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}/login-history`, params, ...requestConfig })
  return res
}

export function deviceControllerGetDeviceLoginHistoryInfiniteQueryOptions(
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetDeviceLoginHistoryInfiniteQueryKey(device_id, params)
  return infiniteQueryOptions<
    ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
    ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>,
    ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
    typeof queryKey,
    number
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['limit'] = pageParam as unknown as DeviceControllerGetDeviceLoginHistoryQueryParams['limit']
      }
      return deviceControllerGetDeviceLoginHistoryInfinite(device_id, params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve login history for a specific device based on IP address
 * @summary Get device login history
 * {@link /devices/:device_id/login-history}
 */
export function useDeviceControllerGetDeviceLoginHistoryInfinite<
  TData = InfiniteData<ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>>,
  TQueryData = ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetDeviceLoginHistoryInfiniteQueryKey,
>(
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
        ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetDeviceLoginHistoryInfiniteQueryKey(device_id, params)

  const query = useInfiniteQuery(
    {
      ...(deviceControllerGetDeviceLoginHistoryInfiniteQueryOptions(device_id, params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}