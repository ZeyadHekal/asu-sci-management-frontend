/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerUpdateSoftwareMutationRequest,
  DeviceControllerUpdateSoftwareMutationResponse,
  DeviceControllerUpdateSoftwarePathParams,
  DeviceControllerUpdateSoftware400,
  DeviceControllerUpdateSoftware401,
  DeviceControllerUpdateSoftware403,
  DeviceControllerUpdateSoftware404,
} from '../../types/devicesController/DeviceControllerUpdateSoftware.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerUpdateSoftwareMutationKey = () => [{ url: '/devices/{device_id}/softwares/{softwareId}' }] as const

export type DeviceControllerUpdateSoftwareMutationKey = ReturnType<typeof deviceControllerUpdateSoftwareMutationKey>

/**
 * @description Update an existing software on a specific device
 * @summary Update software on device
 * {@link /devices/:device_id/softwares/:softwareId}
 */
export async function deviceControllerUpdateSoftware(
  device_id: DeviceControllerUpdateSoftwarePathParams['device_id'],
  softwareId: DeviceControllerUpdateSoftwarePathParams['softwareId'],
  data?: DeviceControllerUpdateSoftwareMutationRequest,
  config: Partial<RequestConfig<DeviceControllerUpdateSoftwareMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerUpdateSoftwareMutationResponse,
    ResponseErrorConfig<
      DeviceControllerUpdateSoftware400 | DeviceControllerUpdateSoftware401 | DeviceControllerUpdateSoftware403 | DeviceControllerUpdateSoftware404
    >,
    DeviceControllerUpdateSoftwareMutationRequest
  >({ method: 'PATCH', url: `/devices/${device_id}/softwares/${softwareId}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing software on a specific device
 * @summary Update software on device
 * {@link /devices/:device_id/softwares/:softwareId}
 */
export function useDeviceControllerUpdateSoftware<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerUpdateSoftwareMutationResponse>,
      ResponseErrorConfig<
        DeviceControllerUpdateSoftware400 | DeviceControllerUpdateSoftware401 | DeviceControllerUpdateSoftware403 | DeviceControllerUpdateSoftware404
      >,
      {
        device_id: DeviceControllerUpdateSoftwarePathParams['device_id']
        softwareId: DeviceControllerUpdateSoftwarePathParams['softwareId']
        data?: DeviceControllerUpdateSoftwareMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceControllerUpdateSoftwareMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerUpdateSoftwareMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerUpdateSoftwareMutationResponse>,
    ResponseErrorConfig<
      DeviceControllerUpdateSoftware400 | DeviceControllerUpdateSoftware401 | DeviceControllerUpdateSoftware403 | DeviceControllerUpdateSoftware404
    >,
    {
      device_id: DeviceControllerUpdateSoftwarePathParams['device_id']
      softwareId: DeviceControllerUpdateSoftwarePathParams['softwareId']
      data?: DeviceControllerUpdateSoftwareMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ device_id, softwareId, data }) => {
        return deviceControllerUpdateSoftware(device_id, softwareId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}