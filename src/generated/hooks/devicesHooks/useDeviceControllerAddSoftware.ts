/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerAddSoftwareMutationRequest,
  DeviceControllerAddSoftwareMutationResponse,
  DeviceControllerAddSoftwarePathParams,
  DeviceControllerAddSoftware400,
  DeviceControllerAddSoftware401,
  DeviceControllerAddSoftware403,
  DeviceControllerAddSoftware404,
} from '../../types/devicesController/DeviceControllerAddSoftware.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerAddSoftwareMutationKey = () => [{ url: '/devices/{device_id}/softwares' }] as const

export type DeviceControllerAddSoftwareMutationKey = ReturnType<typeof deviceControllerAddSoftwareMutationKey>

/**
 * @description Add a new software to a specific device
 * @summary Add software to device
 * {@link /devices/:device_id/softwares}
 */
export async function deviceControllerAddSoftware(
  device_id: DeviceControllerAddSoftwarePathParams['device_id'],
  data: DeviceControllerAddSoftwareMutationRequest,
  config: Partial<RequestConfig<DeviceControllerAddSoftwareMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerAddSoftwareMutationResponse,
    ResponseErrorConfig<DeviceControllerAddSoftware400 | DeviceControllerAddSoftware401 | DeviceControllerAddSoftware403 | DeviceControllerAddSoftware404>,
    DeviceControllerAddSoftwareMutationRequest
  >({ method: 'POST', url: `/devices/${device_id}/softwares`, data, ...requestConfig })
  return res
}

/**
 * @description Add a new software to a specific device
 * @summary Add software to device
 * {@link /devices/:device_id/softwares}
 */
export function useDeviceControllerAddSoftware<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerAddSoftwareMutationResponse>,
      ResponseErrorConfig<DeviceControllerAddSoftware400 | DeviceControllerAddSoftware401 | DeviceControllerAddSoftware403 | DeviceControllerAddSoftware404>,
      { device_id: DeviceControllerAddSoftwarePathParams['device_id']; data: DeviceControllerAddSoftwareMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceControllerAddSoftwareMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerAddSoftwareMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerAddSoftwareMutationResponse>,
    ResponseErrorConfig<DeviceControllerAddSoftware400 | DeviceControllerAddSoftware401 | DeviceControllerAddSoftware403 | DeviceControllerAddSoftware404>,
    { device_id: DeviceControllerAddSoftwarePathParams['device_id']; data: DeviceControllerAddSoftwareMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ device_id, data }) => {
        return deviceControllerAddSoftware(device_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}