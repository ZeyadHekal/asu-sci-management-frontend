/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetDeviceDetailsQueryResponse,
  DeviceControllerGetDeviceDetailsPathParams,
  DeviceControllerGetDeviceDetails401,
  DeviceControllerGetDeviceDetails403,
  DeviceControllerGetDeviceDetails404,
} from '../../types/devicesController/DeviceControllerGetDeviceDetails.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const deviceControllerGetDeviceDetailsInfiniteQueryKey = (device_id: DeviceControllerGetDeviceDetailsPathParams['device_id']) =>
  [{ url: '/devices/:device_id/details', params: { device_id: device_id } }] as const

export type DeviceControllerGetDeviceDetailsInfiniteQueryKey = ReturnType<typeof deviceControllerGetDeviceDetailsInfiniteQueryKey>

/**
 * @description Retrieve comprehensive device information including lab, assistant, specifications, software, and statistics
 * @summary Get comprehensive device details
 * {@link /devices/:device_id/details}
 */
export async function deviceControllerGetDeviceDetailsInfinite(
  device_id: DeviceControllerGetDeviceDetailsPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetDeviceDetailsQueryResponse,
    ResponseErrorConfig<DeviceControllerGetDeviceDetails401 | DeviceControllerGetDeviceDetails403 | DeviceControllerGetDeviceDetails404>,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}/details`, ...requestConfig })
  return res
}

export function deviceControllerGetDeviceDetailsInfiniteQueryOptions(
  device_id: DeviceControllerGetDeviceDetailsPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetDeviceDetailsInfiniteQueryKey(device_id)
  return infiniteQueryOptions<
    ResponseConfig<DeviceControllerGetDeviceDetailsQueryResponse>,
    ResponseErrorConfig<DeviceControllerGetDeviceDetails401 | DeviceControllerGetDeviceDetails403 | DeviceControllerGetDeviceDetails404>,
    ResponseConfig<DeviceControllerGetDeviceDetailsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceControllerGetDeviceDetailsInfinite(device_id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @description Retrieve comprehensive device information including lab, assistant, specifications, software, and statistics
 * @summary Get comprehensive device details
 * {@link /devices/:device_id/details}
 */
export function useDeviceControllerGetDeviceDetailsInfinite<
  TData = InfiniteData<ResponseConfig<DeviceControllerGetDeviceDetailsQueryResponse>>,
  TQueryData = ResponseConfig<DeviceControllerGetDeviceDetailsQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetDeviceDetailsInfiniteQueryKey,
>(
  device_id: DeviceControllerGetDeviceDetailsPathParams['device_id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<DeviceControllerGetDeviceDetailsQueryResponse>,
        ResponseErrorConfig<DeviceControllerGetDeviceDetails401 | DeviceControllerGetDeviceDetails403 | DeviceControllerGetDeviceDetails404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetDeviceDetailsInfiniteQueryKey(device_id)

  const query = useInfiniteQuery(
    {
      ...(deviceControllerGetDeviceDetailsInfiniteQueryOptions(device_id, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<DeviceControllerGetDeviceDetails401 | DeviceControllerGetDeviceDetails403 | DeviceControllerGetDeviceDetails404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}