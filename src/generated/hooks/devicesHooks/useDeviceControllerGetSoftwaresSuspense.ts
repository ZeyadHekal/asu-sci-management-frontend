/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetSoftwaresQueryResponse,
  DeviceControllerGetSoftwaresPathParams,
  DeviceControllerGetSoftwaresQueryParams,
  DeviceControllerGetSoftwares401,
  DeviceControllerGetSoftwares403,
  DeviceControllerGetSoftwares404,
} from '../../types/devicesController/DeviceControllerGetSoftwares.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const deviceControllerGetSoftwaresSuspenseQueryKey = (
  device_id: DeviceControllerGetSoftwaresPathParams['device_id'],
  params?: DeviceControllerGetSoftwaresQueryParams,
) => [{ url: '/devices/:device_id/softwares', params: { device_id: device_id } }, ...(params ? [params] : [])] as const

export type DeviceControllerGetSoftwaresSuspenseQueryKey = ReturnType<typeof deviceControllerGetSoftwaresSuspenseQueryKey>

/**
 * @description Retrieve all software installed on a specific device
 * @summary Get device softwares
 * {@link /devices/:device_id/softwares}
 */
export async function deviceControllerGetSoftwaresSuspense(
  device_id: DeviceControllerGetSoftwaresPathParams['device_id'],
  params?: DeviceControllerGetSoftwaresQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetSoftwaresQueryResponse,
    ResponseErrorConfig<DeviceControllerGetSoftwares401 | DeviceControllerGetSoftwares403 | DeviceControllerGetSoftwares404>,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}/softwares`, params, ...requestConfig })
  return res
}

export function deviceControllerGetSoftwaresSuspenseQueryOptions(
  device_id: DeviceControllerGetSoftwaresPathParams['device_id'],
  params?: DeviceControllerGetSoftwaresQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetSoftwaresSuspenseQueryKey(device_id, params)
  return queryOptions<
    ResponseConfig<DeviceControllerGetSoftwaresQueryResponse>,
    ResponseErrorConfig<DeviceControllerGetSoftwares401 | DeviceControllerGetSoftwares403 | DeviceControllerGetSoftwares404>,
    ResponseConfig<DeviceControllerGetSoftwaresQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceControllerGetSoftwaresSuspense(device_id, params, config)
    },
  })
}

/**
 * @description Retrieve all software installed on a specific device
 * @summary Get device softwares
 * {@link /devices/:device_id/softwares}
 */
export function useDeviceControllerGetSoftwaresSuspense<
  TData = ResponseConfig<DeviceControllerGetSoftwaresQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetSoftwaresSuspenseQueryKey,
>(
  device_id: DeviceControllerGetSoftwaresPathParams['device_id'],
  params?: DeviceControllerGetSoftwaresQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<DeviceControllerGetSoftwaresQueryResponse>,
        ResponseErrorConfig<DeviceControllerGetSoftwares401 | DeviceControllerGetSoftwares403 | DeviceControllerGetSoftwares404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetSoftwaresSuspenseQueryKey(device_id, params)

  const query = useSuspenseQuery(
    {
      ...(deviceControllerGetSoftwaresSuspenseQueryOptions(device_id, params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<DeviceControllerGetSoftwares401 | DeviceControllerGetSoftwares403 | DeviceControllerGetSoftwares404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}