/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetDeviceReportsQueryResponse,
  DeviceControllerGetDeviceReportsPathParams,
  DeviceControllerGetDeviceReports401,
  DeviceControllerGetDeviceReports403,
  DeviceControllerGetDeviceReports404,
} from '../../types/devicesController/DeviceControllerGetDeviceReports.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const deviceControllerGetDeviceReportsSuspenseQueryKey = (device_id: DeviceControllerGetDeviceReportsPathParams['device_id']) =>
  [{ url: '/devices/:device_id/reports', params: { device_id: device_id } }] as const

export type DeviceControllerGetDeviceReportsSuspenseQueryKey = ReturnType<typeof deviceControllerGetDeviceReportsSuspenseQueryKey>

/**
 * @description Retrieve all reports for a specific device
 * @summary Get device reports
 * {@link /devices/:device_id/reports}
 */
export async function deviceControllerGetDeviceReportsSuspense(
  device_id: DeviceControllerGetDeviceReportsPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetDeviceReportsQueryResponse,
    ResponseErrorConfig<DeviceControllerGetDeviceReports401 | DeviceControllerGetDeviceReports403 | DeviceControllerGetDeviceReports404>,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}/reports`, ...requestConfig })
  return res
}

export function deviceControllerGetDeviceReportsSuspenseQueryOptions(
  device_id: DeviceControllerGetDeviceReportsPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetDeviceReportsSuspenseQueryKey(device_id)
  return queryOptions<
    ResponseConfig<DeviceControllerGetDeviceReportsQueryResponse>,
    ResponseErrorConfig<DeviceControllerGetDeviceReports401 | DeviceControllerGetDeviceReports403 | DeviceControllerGetDeviceReports404>,
    ResponseConfig<DeviceControllerGetDeviceReportsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceControllerGetDeviceReportsSuspense(device_id, config)
    },
  })
}

/**
 * @description Retrieve all reports for a specific device
 * @summary Get device reports
 * {@link /devices/:device_id/reports}
 */
export function useDeviceControllerGetDeviceReportsSuspense<
  TData = ResponseConfig<DeviceControllerGetDeviceReportsQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetDeviceReportsSuspenseQueryKey,
>(
  device_id: DeviceControllerGetDeviceReportsPathParams['device_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<DeviceControllerGetDeviceReportsQueryResponse>,
        ResponseErrorConfig<DeviceControllerGetDeviceReports401 | DeviceControllerGetDeviceReports403 | DeviceControllerGetDeviceReports404>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetDeviceReportsSuspenseQueryKey(device_id)

  const query = useSuspenseQuery(
    {
      ...(deviceControllerGetDeviceReportsSuspenseQueryOptions(device_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<DeviceControllerGetDeviceReports401 | DeviceControllerGetDeviceReports403 | DeviceControllerGetDeviceReports404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}