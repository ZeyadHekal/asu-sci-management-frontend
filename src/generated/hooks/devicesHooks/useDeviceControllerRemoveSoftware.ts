/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerRemoveSoftwareMutationResponse,
  DeviceControllerRemoveSoftwarePathParams,
  DeviceControllerRemoveSoftware401,
  DeviceControllerRemoveSoftware403,
  DeviceControllerRemoveSoftware404,
} from '../../types/devicesController/DeviceControllerRemoveSoftware.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerRemoveSoftwareMutationKey = () => [{ url: '/devices/{device_id}/softwares/{softwareId}' }] as const

export type DeviceControllerRemoveSoftwareMutationKey = ReturnType<typeof deviceControllerRemoveSoftwareMutationKey>

/**
 * @description Remove an existing software from a specific device
 * @summary Remove software from device
 * {@link /devices/:device_id/softwares/:softwareId}
 */
export async function deviceControllerRemoveSoftware(
  device_id: DeviceControllerRemoveSoftwarePathParams['device_id'],
  softwareId: DeviceControllerRemoveSoftwarePathParams['softwareId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerRemoveSoftwareMutationResponse,
    ResponseErrorConfig<DeviceControllerRemoveSoftware401 | DeviceControllerRemoveSoftware403 | DeviceControllerRemoveSoftware404>,
    unknown
  >({ method: 'DELETE', url: `/devices/${device_id}/softwares/${softwareId}`, ...requestConfig })
  return res
}

/**
 * @description Remove an existing software from a specific device
 * @summary Remove software from device
 * {@link /devices/:device_id/softwares/:softwareId}
 */
export function useDeviceControllerRemoveSoftware<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerRemoveSoftwareMutationResponse>,
      ResponseErrorConfig<DeviceControllerRemoveSoftware401 | DeviceControllerRemoveSoftware403 | DeviceControllerRemoveSoftware404>,
      { device_id: DeviceControllerRemoveSoftwarePathParams['device_id']; softwareId: DeviceControllerRemoveSoftwarePathParams['softwareId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerRemoveSoftwareMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerRemoveSoftwareMutationResponse>,
    ResponseErrorConfig<DeviceControllerRemoveSoftware401 | DeviceControllerRemoveSoftware403 | DeviceControllerRemoveSoftware404>,
    { device_id: DeviceControllerRemoveSoftwarePathParams['device_id']; softwareId: DeviceControllerRemoveSoftwarePathParams['softwareId'] },
    TContext
  >(
    {
      mutationFn: async ({ device_id, softwareId }) => {
        return deviceControllerRemoveSoftware(device_id, softwareId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}