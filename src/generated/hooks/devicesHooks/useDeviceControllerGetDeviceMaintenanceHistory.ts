/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetDeviceMaintenanceHistoryQueryResponse,
  DeviceControllerGetDeviceMaintenanceHistoryPathParams,
  DeviceControllerGetDeviceMaintenanceHistory401,
  DeviceControllerGetDeviceMaintenanceHistory403,
  DeviceControllerGetDeviceMaintenanceHistory404,
} from '../../types/devicesController/DeviceControllerGetDeviceMaintenanceHistory.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const deviceControllerGetDeviceMaintenanceHistoryQueryKey = (device_id: DeviceControllerGetDeviceMaintenanceHistoryPathParams['device_id']) =>
  [{ url: '/devices/:device_id/maintenance-history', params: { device_id: device_id } }] as const

export type DeviceControllerGetDeviceMaintenanceHistoryQueryKey = ReturnType<typeof deviceControllerGetDeviceMaintenanceHistoryQueryKey>

/**
 * @description Retrieve maintenance history for a specific device
 * @summary Get device maintenance history
 * {@link /devices/:device_id/maintenance-history}
 */
export async function deviceControllerGetDeviceMaintenanceHistory(
  device_id: DeviceControllerGetDeviceMaintenanceHistoryPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetDeviceMaintenanceHistoryQueryResponse,
    ResponseErrorConfig<
      DeviceControllerGetDeviceMaintenanceHistory401 | DeviceControllerGetDeviceMaintenanceHistory403 | DeviceControllerGetDeviceMaintenanceHistory404
    >,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}/maintenance-history`, ...requestConfig })
  return res
}

export function deviceControllerGetDeviceMaintenanceHistoryQueryOptions(
  device_id: DeviceControllerGetDeviceMaintenanceHistoryPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetDeviceMaintenanceHistoryQueryKey(device_id)
  return queryOptions<
    ResponseConfig<DeviceControllerGetDeviceMaintenanceHistoryQueryResponse>,
    ResponseErrorConfig<
      DeviceControllerGetDeviceMaintenanceHistory401 | DeviceControllerGetDeviceMaintenanceHistory403 | DeviceControllerGetDeviceMaintenanceHistory404
    >,
    ResponseConfig<DeviceControllerGetDeviceMaintenanceHistoryQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceControllerGetDeviceMaintenanceHistory(device_id, config)
    },
  })
}

/**
 * @description Retrieve maintenance history for a specific device
 * @summary Get device maintenance history
 * {@link /devices/:device_id/maintenance-history}
 */
export function useDeviceControllerGetDeviceMaintenanceHistory<
  TData = ResponseConfig<DeviceControllerGetDeviceMaintenanceHistoryQueryResponse>,
  TQueryData = ResponseConfig<DeviceControllerGetDeviceMaintenanceHistoryQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetDeviceMaintenanceHistoryQueryKey,
>(
  device_id: DeviceControllerGetDeviceMaintenanceHistoryPathParams['device_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<DeviceControllerGetDeviceMaintenanceHistoryQueryResponse>,
        ResponseErrorConfig<
          DeviceControllerGetDeviceMaintenanceHistory401 | DeviceControllerGetDeviceMaintenanceHistory403 | DeviceControllerGetDeviceMaintenanceHistory404
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetDeviceMaintenanceHistoryQueryKey(device_id)

  const query = useQuery(
    {
      ...(deviceControllerGetDeviceMaintenanceHistoryQueryOptions(device_id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      DeviceControllerGetDeviceMaintenanceHistory401 | DeviceControllerGetDeviceMaintenanceHistory403 | DeviceControllerGetDeviceMaintenanceHistory404
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}