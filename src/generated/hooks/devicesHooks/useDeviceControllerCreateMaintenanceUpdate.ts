/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerCreateMaintenanceUpdateMutationRequest,
  DeviceControllerCreateMaintenanceUpdateMutationResponse,
  DeviceControllerCreateMaintenanceUpdatePathParams,
  DeviceControllerCreateMaintenanceUpdate400,
  DeviceControllerCreateMaintenanceUpdate401,
  DeviceControllerCreateMaintenanceUpdate403,
  DeviceControllerCreateMaintenanceUpdate404,
} from '../../types/devicesController/DeviceControllerCreateMaintenanceUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerCreateMaintenanceUpdateMutationKey = () => [{ url: '/devices/{device_id}/maintenance' }] as const

export type DeviceControllerCreateMaintenanceUpdateMutationKey = ReturnType<typeof deviceControllerCreateMaintenanceUpdateMutationKey>

/**
 * @description Create a maintenance update for a device
 * @summary Create maintenance update
 * {@link /devices/:device_id/maintenance}
 */
export async function deviceControllerCreateMaintenanceUpdate(
  device_id: DeviceControllerCreateMaintenanceUpdatePathParams['device_id'],
  data: DeviceControllerCreateMaintenanceUpdateMutationRequest,
  config: Partial<RequestConfig<DeviceControllerCreateMaintenanceUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerCreateMaintenanceUpdateMutationResponse,
    ResponseErrorConfig<
      | DeviceControllerCreateMaintenanceUpdate400
      | DeviceControllerCreateMaintenanceUpdate401
      | DeviceControllerCreateMaintenanceUpdate403
      | DeviceControllerCreateMaintenanceUpdate404
    >,
    DeviceControllerCreateMaintenanceUpdateMutationRequest
  >({ method: 'POST', url: `/devices/${device_id}/maintenance`, data, ...requestConfig })
  return res
}

/**
 * @description Create a maintenance update for a device
 * @summary Create maintenance update
 * {@link /devices/:device_id/maintenance}
 */
export function useDeviceControllerCreateMaintenanceUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerCreateMaintenanceUpdateMutationResponse>,
      ResponseErrorConfig<
        | DeviceControllerCreateMaintenanceUpdate400
        | DeviceControllerCreateMaintenanceUpdate401
        | DeviceControllerCreateMaintenanceUpdate403
        | DeviceControllerCreateMaintenanceUpdate404
      >,
      { device_id: DeviceControllerCreateMaintenanceUpdatePathParams['device_id']; data: DeviceControllerCreateMaintenanceUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceControllerCreateMaintenanceUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerCreateMaintenanceUpdateMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerCreateMaintenanceUpdateMutationResponse>,
    ResponseErrorConfig<
      | DeviceControllerCreateMaintenanceUpdate400
      | DeviceControllerCreateMaintenanceUpdate401
      | DeviceControllerCreateMaintenanceUpdate403
      | DeviceControllerCreateMaintenanceUpdate404
    >,
    { device_id: DeviceControllerCreateMaintenanceUpdatePathParams['device_id']; data: DeviceControllerCreateMaintenanceUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ device_id, data }) => {
        return deviceControllerCreateMaintenanceUpdate(device_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}