/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetDeviceLoginHistoryQueryResponse,
  DeviceControllerGetDeviceLoginHistoryPathParams,
  DeviceControllerGetDeviceLoginHistoryQueryParams,
  DeviceControllerGetDeviceLoginHistory401,
  DeviceControllerGetDeviceLoginHistory403,
  DeviceControllerGetDeviceLoginHistory404,
} from '../../types/devicesController/DeviceControllerGetDeviceLoginHistory.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const deviceControllerGetDeviceLoginHistoryQueryKey = (
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
) => [{ url: '/devices/:device_id/login-history', params: { device_id: device_id } }, ...(params ? [params] : [])] as const

export type DeviceControllerGetDeviceLoginHistoryQueryKey = ReturnType<typeof deviceControllerGetDeviceLoginHistoryQueryKey>

/**
 * @description Retrieve login history for a specific device based on IP address
 * @summary Get device login history
 * {@link /devices/:device_id/login-history}
 */
export async function deviceControllerGetDeviceLoginHistory(
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetDeviceLoginHistoryQueryResponse,
    ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}/login-history`, params, ...requestConfig })
  return res
}

export function deviceControllerGetDeviceLoginHistoryQueryOptions(
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetDeviceLoginHistoryQueryKey(device_id, params)
  return queryOptions<
    ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
    ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>,
    ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceControllerGetDeviceLoginHistory(device_id, params, config)
    },
  })
}

/**
 * @description Retrieve login history for a specific device based on IP address
 * @summary Get device login history
 * {@link /devices/:device_id/login-history}
 */
export function useDeviceControllerGetDeviceLoginHistory<
  TData = ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
  TQueryData = ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetDeviceLoginHistoryQueryKey,
>(
  device_id: DeviceControllerGetDeviceLoginHistoryPathParams['device_id'],
  params?: DeviceControllerGetDeviceLoginHistoryQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<DeviceControllerGetDeviceLoginHistoryQueryResponse>,
        ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetDeviceLoginHistoryQueryKey(device_id, params)

  const query = useQuery(
    {
      ...(deviceControllerGetDeviceLoginHistoryQueryOptions(device_id, params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<DeviceControllerGetDeviceLoginHistory401 | DeviceControllerGetDeviceLoginHistory403 | DeviceControllerGetDeviceLoginHistory404>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}