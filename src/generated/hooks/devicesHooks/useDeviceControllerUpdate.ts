/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerUpdateMutationRequest,
  DeviceControllerUpdateMutationResponse,
  DeviceControllerUpdatePathParams,
  DeviceControllerUpdate400,
  DeviceControllerUpdate401,
  DeviceControllerUpdate403,
  DeviceControllerUpdate404,
} from '../../types/devicesController/DeviceControllerUpdate.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerUpdateMutationKey = () => [{ url: '/devices/{device_id}' }] as const

export type DeviceControllerUpdateMutationKey = ReturnType<typeof deviceControllerUpdateMutationKey>

/**
 * @description Update an existing device by ID
 * @summary Update device
 * {@link /devices/:device_id}
 */
export async function deviceControllerUpdate(
  device_id: DeviceControllerUpdatePathParams['device_id'],
  data?: DeviceControllerUpdateMutationRequest,
  config: Partial<RequestConfig<DeviceControllerUpdateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerUpdateMutationResponse,
    ResponseErrorConfig<DeviceControllerUpdate400 | DeviceControllerUpdate401 | DeviceControllerUpdate403 | DeviceControllerUpdate404>,
    DeviceControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/devices/${device_id}`, data, ...requestConfig })
  return res
}

/**
 * @description Update an existing device by ID
 * @summary Update device
 * {@link /devices/:device_id}
 */
export function useDeviceControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerUpdateMutationResponse>,
      ResponseErrorConfig<DeviceControllerUpdate400 | DeviceControllerUpdate401 | DeviceControllerUpdate403 | DeviceControllerUpdate404>,
      { device_id: DeviceControllerUpdatePathParams['device_id']; data?: DeviceControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceControllerUpdateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerUpdateMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerUpdateMutationResponse>,
    ResponseErrorConfig<DeviceControllerUpdate400 | DeviceControllerUpdate401 | DeviceControllerUpdate403 | DeviceControllerUpdate404>,
    { device_id: DeviceControllerUpdatePathParams['device_id']; data?: DeviceControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ device_id, data }) => {
        return deviceControllerUpdate(device_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}