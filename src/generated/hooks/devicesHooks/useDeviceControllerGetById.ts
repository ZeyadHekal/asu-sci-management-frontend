/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  DeviceControllerGetByIdQueryResponse,
  DeviceControllerGetByIdPathParams,
  DeviceControllerGetById401,
  DeviceControllerGetById403,
  DeviceControllerGetById404,
} from '../../types/devicesController/DeviceControllerGetById.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const deviceControllerGetByIdQueryKey = (device_id: DeviceControllerGetByIdPathParams['device_id']) =>
  [{ url: '/devices/:device_id', params: { device_id: device_id } }] as const

export type DeviceControllerGetByIdQueryKey = ReturnType<typeof deviceControllerGetByIdQueryKey>

/**
 * @description Retrieve a device by its ID
 * @summary Get device by ID
 * {@link /devices/:device_id}
 */
export async function deviceControllerGetById(
  device_id: DeviceControllerGetByIdPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerGetByIdQueryResponse,
    ResponseErrorConfig<DeviceControllerGetById401 | DeviceControllerGetById403 | DeviceControllerGetById404>,
    unknown
  >({ method: 'GET', url: `/devices/${device_id}`, ...requestConfig })
  return res
}

export function deviceControllerGetByIdQueryOptions(
  device_id: DeviceControllerGetByIdPathParams['device_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = deviceControllerGetByIdQueryKey(device_id)
  return queryOptions<
    ResponseConfig<DeviceControllerGetByIdQueryResponse>,
    ResponseErrorConfig<DeviceControllerGetById401 | DeviceControllerGetById403 | DeviceControllerGetById404>,
    ResponseConfig<DeviceControllerGetByIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!device_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return deviceControllerGetById(device_id, config)
    },
  })
}

/**
 * @description Retrieve a device by its ID
 * @summary Get device by ID
 * {@link /devices/:device_id}
 */
export function useDeviceControllerGetById<
  TData = ResponseConfig<DeviceControllerGetByIdQueryResponse>,
  TQueryData = ResponseConfig<DeviceControllerGetByIdQueryResponse>,
  TQueryKey extends QueryKey = DeviceControllerGetByIdQueryKey,
>(
  device_id: DeviceControllerGetByIdPathParams['device_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<DeviceControllerGetByIdQueryResponse>,
        ResponseErrorConfig<DeviceControllerGetById401 | DeviceControllerGetById403 | DeviceControllerGetById404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? deviceControllerGetByIdQueryKey(device_id)

  const query = useQuery(
    {
      ...(deviceControllerGetByIdQueryOptions(device_id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<DeviceControllerGetById401 | DeviceControllerGetById403 | DeviceControllerGetById404>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}