/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeviceControllerUpdateSoftwareListMutationRequest,
  DeviceControllerUpdateSoftwareListMutationResponse,
  DeviceControllerUpdateSoftwareListPathParams,
  DeviceControllerUpdateSoftwareList400,
  DeviceControllerUpdateSoftwareList401,
  DeviceControllerUpdateSoftwareList403,
  DeviceControllerUpdateSoftwareList404,
} from '../../types/devicesController/DeviceControllerUpdateSoftwareList.ts'
import { useMutation } from '@tanstack/react-query'

export const deviceControllerUpdateSoftwareListMutationKey = () => [{ url: '/devices/{device_id}/software-list' }] as const

export type DeviceControllerUpdateSoftwareListMutationKey = ReturnType<typeof deviceControllerUpdateSoftwareListMutationKey>

/**
 * @description Update the list of software on a specific device
 * @summary Update software list on device
 * {@link /devices/:device_id/software-list}
 */
export async function deviceControllerUpdateSoftwareList(
  device_id: DeviceControllerUpdateSoftwareListPathParams['device_id'],
  data: DeviceControllerUpdateSoftwareListMutationRequest,
  config: Partial<RequestConfig<DeviceControllerUpdateSoftwareListMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeviceControllerUpdateSoftwareListMutationResponse,
    ResponseErrorConfig<
      | DeviceControllerUpdateSoftwareList400
      | DeviceControllerUpdateSoftwareList401
      | DeviceControllerUpdateSoftwareList403
      | DeviceControllerUpdateSoftwareList404
    >,
    DeviceControllerUpdateSoftwareListMutationRequest
  >({ method: 'PUT', url: `/devices/${device_id}/software-list`, data, ...requestConfig })
  return res
}

/**
 * @description Update the list of software on a specific device
 * @summary Update software list on device
 * {@link /devices/:device_id/software-list}
 */
export function useDeviceControllerUpdateSoftwareList<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeviceControllerUpdateSoftwareListMutationResponse>,
      ResponseErrorConfig<
        | DeviceControllerUpdateSoftwareList400
        | DeviceControllerUpdateSoftwareList401
        | DeviceControllerUpdateSoftwareList403
        | DeviceControllerUpdateSoftwareList404
      >,
      { device_id: DeviceControllerUpdateSoftwareListPathParams['device_id']; data: DeviceControllerUpdateSoftwareListMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeviceControllerUpdateSoftwareListMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deviceControllerUpdateSoftwareListMutationKey()

  return useMutation<
    ResponseConfig<DeviceControllerUpdateSoftwareListMutationResponse>,
    ResponseErrorConfig<
      | DeviceControllerUpdateSoftwareList400
      | DeviceControllerUpdateSoftwareList401
      | DeviceControllerUpdateSoftwareList403
      | DeviceControllerUpdateSoftwareList404
    >,
    { device_id: DeviceControllerUpdateSoftwareListPathParams['device_id']; data: DeviceControllerUpdateSoftwareListMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ device_id, data }) => {
        return deviceControllerUpdateSoftwareList(device_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}