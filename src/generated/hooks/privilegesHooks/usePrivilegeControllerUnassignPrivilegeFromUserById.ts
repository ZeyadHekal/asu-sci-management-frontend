/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PrivilegeControllerUnassignPrivilegeFromUserByIdMutationResponse,
  PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams,
} from '../../types/privilegesController/PrivilegeControllerUnassignPrivilegeFromUserById.ts'
import { useMutation } from '@tanstack/react-query'

export const privilegeControllerUnassignPrivilegeFromUserByIdMutationKey = () => [{ url: '/privileges/user/{userId}/{privilegeCode}' }] as const

export type PrivilegeControllerUnassignPrivilegeFromUserByIdMutationKey = ReturnType<typeof privilegeControllerUnassignPrivilegeFromUserByIdMutationKey>

/**
 * @description Remove a specific privilege from a user
 * @summary Unassign privilege from user
 * {@link /privileges/user/:userId/:privilegeCode}
 */
export async function privilegeControllerUnassignPrivilegeFromUserById(
  userId: PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams['userId'],
  privilegeCode: PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams['privilegeCode'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PrivilegeControllerUnassignPrivilegeFromUserByIdMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/privileges/user/${userId}/${privilegeCode}`,
    ...requestConfig,
  })
  return res
}

/**
 * @description Remove a specific privilege from a user
 * @summary Unassign privilege from user
 * {@link /privileges/user/:userId/:privilegeCode}
 */
export function usePrivilegeControllerUnassignPrivilegeFromUserById<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PrivilegeControllerUnassignPrivilegeFromUserByIdMutationResponse>,
      ResponseErrorConfig<Error>,
      {
        userId: PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams['userId']
        privilegeCode: PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams['privilegeCode']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? privilegeControllerUnassignPrivilegeFromUserByIdMutationKey()

  return useMutation<
    ResponseConfig<PrivilegeControllerUnassignPrivilegeFromUserByIdMutationResponse>,
    ResponseErrorConfig<Error>,
    {
      userId: PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams['userId']
      privilegeCode: PrivilegeControllerUnassignPrivilegeFromUserByIdPathParams['privilegeCode']
    },
    TContext
  >(
    {
      mutationFn: async ({ userId, privilegeCode }) => {
        return privilegeControllerUnassignPrivilegeFromUserById(userId, privilegeCode, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}