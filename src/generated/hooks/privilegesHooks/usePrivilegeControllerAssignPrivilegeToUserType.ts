/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest,
  PrivilegeControllerAssignPrivilegeToUserTypeMutationResponse,
} from '../../types/privilegesController/PrivilegeControllerAssignPrivilegeToUserType.ts'
import { useMutation } from '@tanstack/react-query'

export const privilegeControllerAssignPrivilegeToUserTypeMutationKey = () => [{ url: '/privileges/assign/usertype' }] as const

export type PrivilegeControllerAssignPrivilegeToUserTypeMutationKey = ReturnType<typeof privilegeControllerAssignPrivilegeToUserTypeMutationKey>

/**
 * @description Assign a specific privilege to a user type
 * @summary Assign privilege to user type
 * {@link /privileges/assign/usertype}
 */
export async function privilegeControllerAssignPrivilegeToUserType(
  data: PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest,
  config: Partial<RequestConfig<PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PrivilegeControllerAssignPrivilegeToUserTypeMutationResponse,
    ResponseErrorConfig<Error>,
    PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest
  >({ method: 'POST', url: `/privileges/assign/usertype`, data, ...requestConfig })
  return res
}

/**
 * @description Assign a specific privilege to a user type
 * @summary Assign privilege to user type
 * {@link /privileges/assign/usertype}
 */
export function usePrivilegeControllerAssignPrivilegeToUserType<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PrivilegeControllerAssignPrivilegeToUserTypeMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? privilegeControllerAssignPrivilegeToUserTypeMutationKey()

  return useMutation<
    ResponseConfig<PrivilegeControllerAssignPrivilegeToUserTypeMutationResponse>,
    ResponseErrorConfig<Error>,
    { data: PrivilegeControllerAssignPrivilegeToUserTypeMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return privilegeControllerAssignPrivilegeToUserType(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}