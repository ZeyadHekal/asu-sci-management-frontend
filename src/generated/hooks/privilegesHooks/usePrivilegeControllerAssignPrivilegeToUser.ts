/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PrivilegeControllerAssignPrivilegeToUserMutationRequest,
  PrivilegeControllerAssignPrivilegeToUserMutationResponse,
} from '../../types/privilegesController/PrivilegeControllerAssignPrivilegeToUser.ts'
import { useMutation } from '@tanstack/react-query'

export const privilegeControllerAssignPrivilegeToUserMutationKey = () => [{ url: '/privileges/assign/user' }] as const

export type PrivilegeControllerAssignPrivilegeToUserMutationKey = ReturnType<typeof privilegeControllerAssignPrivilegeToUserMutationKey>

/**
 * @description Assign a specific privilege to a user
 * @summary Assign privilege to user
 * {@link /privileges/assign/user}
 */
export async function privilegeControllerAssignPrivilegeToUser(
  data: PrivilegeControllerAssignPrivilegeToUserMutationRequest,
  config: Partial<RequestConfig<PrivilegeControllerAssignPrivilegeToUserMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PrivilegeControllerAssignPrivilegeToUserMutationResponse,
    ResponseErrorConfig<Error>,
    PrivilegeControllerAssignPrivilegeToUserMutationRequest
  >({ method: 'POST', url: `/privileges/assign/user`, data, ...requestConfig })
  return res
}

/**
 * @description Assign a specific privilege to a user
 * @summary Assign privilege to user
 * {@link /privileges/assign/user}
 */
export function usePrivilegeControllerAssignPrivilegeToUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PrivilegeControllerAssignPrivilegeToUserMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: PrivilegeControllerAssignPrivilegeToUserMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PrivilegeControllerAssignPrivilegeToUserMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? privilegeControllerAssignPrivilegeToUserMutationKey()

  return useMutation<
    ResponseConfig<PrivilegeControllerAssignPrivilegeToUserMutationResponse>,
    ResponseErrorConfig<Error>,
    { data: PrivilegeControllerAssignPrivilegeToUserMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return privilegeControllerAssignPrivilegeToUser(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}