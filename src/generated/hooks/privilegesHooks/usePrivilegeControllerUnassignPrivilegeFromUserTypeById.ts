/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../../global/api/apiClient'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PrivilegeControllerUnassignPrivilegeFromUserTypeByIdMutationResponse,
  PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams,
} from '../../types/privilegesController/PrivilegeControllerUnassignPrivilegeFromUserTypeById.ts'
import { useMutation } from '@tanstack/react-query'

export const privilegeControllerUnassignPrivilegeFromUserTypeByIdMutationKey = () => [{ url: '/privileges/user-type/{userTypeId}/{privilegeCode}' }] as const

export type PrivilegeControllerUnassignPrivilegeFromUserTypeByIdMutationKey = ReturnType<typeof privilegeControllerUnassignPrivilegeFromUserTypeByIdMutationKey>

/**
 * @description Remove a specific privilege from a user type
 * @summary Unassign privilege from user type
 * {@link /privileges/user-type/:userTypeId/:privilegeCode}
 */
export async function privilegeControllerUnassignPrivilegeFromUserTypeById(
  userTypeId: PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams['userTypeId'],
  privilegeCode: PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams['privilegeCode'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PrivilegeControllerUnassignPrivilegeFromUserTypeByIdMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/privileges/user-type/${userTypeId}/${privilegeCode}`,
    ...requestConfig,
  })
  return res
}

/**
 * @description Remove a specific privilege from a user type
 * @summary Unassign privilege from user type
 * {@link /privileges/user-type/:userTypeId/:privilegeCode}
 */
export function usePrivilegeControllerUnassignPrivilegeFromUserTypeById<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PrivilegeControllerUnassignPrivilegeFromUserTypeByIdMutationResponse>,
      ResponseErrorConfig<Error>,
      {
        userTypeId: PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams['userTypeId']
        privilegeCode: PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams['privilegeCode']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? privilegeControllerUnassignPrivilegeFromUserTypeByIdMutationKey()

  return useMutation<
    ResponseConfig<PrivilegeControllerUnassignPrivilegeFromUserTypeByIdMutationResponse>,
    ResponseErrorConfig<Error>,
    {
      userTypeId: PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams['userTypeId']
      privilegeCode: PrivilegeControllerUnassignPrivilegeFromUserTypeByIdPathParams['privilegeCode']
    },
    TContext
  >(
    {
      mutationFn: async ({ userTypeId, privilegeCode }) => {
        return privilegeControllerUnassignPrivilegeFromUserTypeById(userTypeId, privilegeCode, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}