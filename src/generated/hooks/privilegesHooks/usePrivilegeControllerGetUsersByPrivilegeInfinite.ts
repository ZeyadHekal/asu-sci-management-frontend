/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../global/api/apiClient'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../global/api/apiClient'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  PrivilegeControllerGetUsersByPrivilegeQueryResponse,
  PrivilegeControllerGetUsersByPrivilegePathParams,
} from '../../types/privilegesController/PrivilegeControllerGetUsersByPrivilege.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const privilegeControllerGetUsersByPrivilegeInfiniteQueryKey = (privilegeCode: PrivilegeControllerGetUsersByPrivilegePathParams['privilegeCode']) =>
  [{ url: '/privileges/users/:privilegeCode', params: { privilegeCode: privilegeCode } }] as const

export type PrivilegeControllerGetUsersByPrivilegeInfiniteQueryKey = ReturnType<typeof privilegeControllerGetUsersByPrivilegeInfiniteQueryKey>

/**
 * @summary Get users with a specific privilege
 * {@link /privileges/users/:privilegeCode}
 */
export async function privilegeControllerGetUsersByPrivilegeInfinite(
  privilegeCode: PrivilegeControllerGetUsersByPrivilegePathParams['privilegeCode'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PrivilegeControllerGetUsersByPrivilegeQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/privileges/users/${privilegeCode}`,
    ...requestConfig,
  })
  return res
}

export function privilegeControllerGetUsersByPrivilegeInfiniteQueryOptions(
  privilegeCode: PrivilegeControllerGetUsersByPrivilegePathParams['privilegeCode'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = privilegeControllerGetUsersByPrivilegeInfiniteQueryKey(privilegeCode)
  return infiniteQueryOptions<
    ResponseConfig<PrivilegeControllerGetUsersByPrivilegeQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<PrivilegeControllerGetUsersByPrivilegeQueryResponse>,
    typeof queryKey
  >({
    enabled: !!privilegeCode,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return privilegeControllerGetUsersByPrivilegeInfinite(privilegeCode, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['page'],
    getPreviousPageParam: (firstPage) => firstPage['page'],
  })
}

/**
 * @summary Get users with a specific privilege
 * {@link /privileges/users/:privilegeCode}
 */
export function usePrivilegeControllerGetUsersByPrivilegeInfinite<
  TData = InfiniteData<ResponseConfig<PrivilegeControllerGetUsersByPrivilegeQueryResponse>>,
  TQueryData = ResponseConfig<PrivilegeControllerGetUsersByPrivilegeQueryResponse>,
  TQueryKey extends QueryKey = PrivilegeControllerGetUsersByPrivilegeInfiniteQueryKey,
>(
  privilegeCode: PrivilegeControllerGetUsersByPrivilegePathParams['privilegeCode'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<PrivilegeControllerGetUsersByPrivilegeQueryResponse>,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? privilegeControllerGetUsersByPrivilegeInfiniteQueryKey(privilegeCode)

  const query = useInfiniteQuery(
    {
      ...(privilegeControllerGetUsersByPrivilegeInfiniteQueryOptions(privilegeCode, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}