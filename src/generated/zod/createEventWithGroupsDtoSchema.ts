/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { examModelForEventDtoSchema } from './examModelForEventDtoSchema.ts'
import { groupModelAssignmentDtoSchema } from './groupModelAssignmentDtoSchema.ts'
import { proposedGroupSimpleDtoSchema } from './proposedGroupSimpleDtoSchema.ts'
import { z } from 'zod'

export const createEventWithGroupsDtoSchema = z.object({
  name: z.string(),
  description: z.string().optional(),
  duration: z.number(),
  eventType: z.enum(['exam', 'quiz', 'assignment', 'lab_assignment', 'project', 'presentation', 'workshop', 'practice', 'seminar']).default('assignment'),
  locationType: z.enum(['lab_devices', 'lecture_hall', 'online', 'hybrid']).default('online'),
  customLocation: z.string().describe('Custom location when not using lab devices').optional(),
  hasMarks: z.boolean(),
  totalMarks: z.number().optional(),
  autoStart: z.boolean().default(false),
  requiresModels: z.boolean().default(false).describe('Whether this event requires exam models'),
  isExam: z.boolean().default(false).describe('Whether this event should be treated as an exam'),
  examModeStartMinutes: z.number().default(30),
  startDateTime: z.string().datetime({ offset: true }).describe('When the event should start').optional(),
  courseId: z.string(),
  proposedGroups: z.array(z.lazy(() => proposedGroupSimpleDtoSchema)).describe('Proposed groups for the event'),
  examModels: z
    .array(z.lazy(() => examModelForEventDtoSchema))
    .describe('Exam models for the event (only for exams)')
    .optional(),
  groupModelAssignments: z
    .array(z.lazy(() => groupModelAssignmentDtoSchema))
    .describe('Model assignments to groups (only for exams)')
    .optional(),
})

export type CreateEventWithGroupsDtoSchema = z.infer<typeof createEventWithGroupsDtoSchema>