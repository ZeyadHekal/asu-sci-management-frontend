/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { privilegeAssignmentDtoSchema } from '../privilegeAssignmentDtoSchema.ts'
import { z } from 'zod'

export const userTypeControllerGetPrivilegesPathParamsSchema = z.object({
  id: z.string().describe('User Type ID'),
})

export type UserTypeControllerGetPrivilegesPathParamsSchema = z.infer<typeof userTypeControllerGetPrivilegesPathParamsSchema>

/**
 * @description Privileges retrieved successfully
 */
export const userTypeControllerGetPrivileges200Schema = z.array(z.lazy(() => privilegeAssignmentDtoSchema))

export type UserTypeControllerGetPrivileges200Schema = z.infer<typeof userTypeControllerGetPrivileges200Schema>

/**
 * @description Unauthorized
 */
export const userTypeControllerGetPrivileges401Schema = z.unknown()

export type UserTypeControllerGetPrivileges401Schema = z.infer<typeof userTypeControllerGetPrivileges401Schema>

/**
 * @description Forbidden - Insufficient privileges
 */
export const userTypeControllerGetPrivileges403Schema = z.unknown()

export type UserTypeControllerGetPrivileges403Schema = z.infer<typeof userTypeControllerGetPrivileges403Schema>

/**
 * @description Not Found - User type does not exist
 */
export const userTypeControllerGetPrivileges404Schema = z.unknown()

export type UserTypeControllerGetPrivileges404Schema = z.infer<typeof userTypeControllerGetPrivileges404Schema>

export const userTypeControllerGetPrivilegesQueryResponseSchema = z.lazy(() => userTypeControllerGetPrivileges200Schema)

export type UserTypeControllerGetPrivilegesQueryResponseSchema = z.infer<typeof userTypeControllerGetPrivilegesQueryResponseSchema>