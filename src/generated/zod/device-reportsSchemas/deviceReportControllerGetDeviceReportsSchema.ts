/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { deviceReportListDtoSchema } from '../deviceReportListDtoSchema.ts'
import { z } from 'zod'

export const deviceReportControllerGetDeviceReportsPathParamsSchema = z.object({
  device_id: z.string().describe('Device ID'),
})

export type DeviceReportControllerGetDeviceReportsPathParamsSchema = z.infer<typeof deviceReportControllerGetDeviceReportsPathParamsSchema>

export const deviceReportControllerGetDeviceReportsQueryParamsSchema = z
  .object({
    limit: z.number().default(10),
    page: z.number().default(0),
    sortBy: z.string().default('created_at'),
    sortOrder: z.enum(['asc', 'desc']).default('desc'),
    ids: z.array(z.string()).optional(),
    deviceId: z.string().describe('Filter by device ID').optional(),
    labId: z.string().describe('Filter by lab ID').optional(),
    reporterId: z.string().describe('Filter by reporter ID').optional(),
    status: z.enum(['PENDING_REVIEW', 'IN_PROGRESS', 'CONFIRMED', 'RESOLVED', 'REJECTED', 'CANCELLED']).describe('Filter by status').optional(),
    appId: z.string().describe('Filter by software ID').optional(),
    search: z.string().describe('Search across device names, descriptions, and reporter names').optional(),
    dateFrom: z.string().describe('Filter by date from (YYYY-MM-DD)').optional(),
    dateTo: z.string().describe('Filter by date to (YYYY-MM-DD)').optional(),
  })
  .optional()

export type DeviceReportControllerGetDeviceReportsQueryParamsSchema = z.infer<typeof deviceReportControllerGetDeviceReportsQueryParamsSchema>

/**
 * @description Device reports retrieved successfully
 */
export const deviceReportControllerGetDeviceReports200Schema = z.array(z.lazy(() => deviceReportListDtoSchema))

export type DeviceReportControllerGetDeviceReports200Schema = z.infer<typeof deviceReportControllerGetDeviceReports200Schema>

/**
 * @description Unauthorized
 */
export const deviceReportControllerGetDeviceReports401Schema = z.unknown()

export type DeviceReportControllerGetDeviceReports401Schema = z.infer<typeof deviceReportControllerGetDeviceReports401Schema>

/**
 * @description Forbidden - Insufficient privileges
 */
export const deviceReportControllerGetDeviceReports403Schema = z.unknown()

export type DeviceReportControllerGetDeviceReports403Schema = z.infer<typeof deviceReportControllerGetDeviceReports403Schema>

export const deviceReportControllerGetDeviceReportsQueryResponseSchema = z.lazy(() => deviceReportControllerGetDeviceReports200Schema)

export type DeviceReportControllerGetDeviceReportsQueryResponseSchema = z.infer<typeof deviceReportControllerGetDeviceReportsQueryResponseSchema>