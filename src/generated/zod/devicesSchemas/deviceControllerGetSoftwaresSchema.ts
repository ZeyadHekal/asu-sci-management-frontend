/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { deviceSoftwarePagedDtoSchema } from '../deviceSoftwarePagedDtoSchema.ts'
import { z } from 'zod'

export const deviceControllerGetSoftwaresPathParamsSchema = z.object({
  device_id: z.string().describe('Device ID'),
})

export type DeviceControllerGetSoftwaresPathParamsSchema = z.infer<typeof deviceControllerGetSoftwaresPathParamsSchema>

export const deviceControllerGetSoftwaresQueryParamsSchema = z
  .object({
    limit: z.number().default(10),
    page: z.number().default(0),
    sortBy: z.string().default('created_at'),
    sortOrder: z.enum(['asc', 'desc']).default('desc'),
    ids: z.array(z.string()).optional(),
    deviceName: z.string().describe('Filter by device name').optional(),
    software: z.string().describe('Filter by software name').optional(),
    labId: z.string().describe('Filter by lab ID').optional(),
    status: z.string().describe('Filter by device status').optional(),
    assistantId: z.string().describe('Filter by lab assistant ID').optional(),
    specCategory: z.string().describe('Filter by specification category').optional(),
    specValue: z.string().describe('Filter by specification value').optional(),
  })
  .optional()

export type DeviceControllerGetSoftwaresQueryParamsSchema = z.infer<typeof deviceControllerGetSoftwaresQueryParamsSchema>

/**
 * @description Device softwares retrieved successfully
 */
export const deviceControllerGetSoftwares200Schema = z.array(z.lazy(() => deviceSoftwarePagedDtoSchema))

export type DeviceControllerGetSoftwares200Schema = z.infer<typeof deviceControllerGetSoftwares200Schema>

/**
 * @description Unauthorized
 */
export const deviceControllerGetSoftwares401Schema = z.unknown()

export type DeviceControllerGetSoftwares401Schema = z.infer<typeof deviceControllerGetSoftwares401Schema>

/**
 * @description Forbidden - Insufficient privileges
 */
export const deviceControllerGetSoftwares403Schema = z.unknown()

export type DeviceControllerGetSoftwares403Schema = z.infer<typeof deviceControllerGetSoftwares403Schema>

/**
 * @description Not Found - Device does not exist
 */
export const deviceControllerGetSoftwares404Schema = z.unknown()

export type DeviceControllerGetSoftwares404Schema = z.infer<typeof deviceControllerGetSoftwares404Schema>

export const deviceControllerGetSoftwaresQueryResponseSchema = z.lazy(() => deviceControllerGetSoftwares200Schema)

export type DeviceControllerGetSoftwaresQueryResponseSchema = z.infer<typeof deviceControllerGetSoftwaresQueryResponseSchema>